
FPGA_Ram.elf:     file format elf32-tradlittlemips


Disassembly of section .text_init:

bfc00000 <__reset_vector>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:63
/**************************************************************************************
    R E S E T   E X C E P T I O N   H A N D L E R
**************************************************************************************/

LEAF(__reset_vector)
    la a2,__cpu_init
bfc00000:	3c06bfc0 	lui	a2,0xbfc0
bfc00004:	24c60014 	addiu	a2,a2,20
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:64
    jr a2
bfc00008:	00c00008 	jr	a2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:65
    mtc0    $0, C0_COUNT        # Clear cp0 Count (Used to measure boot time.)
bfc0000c:	40804800 	mtc0	zero,c0_count
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:66
    nop
bfc00010:	00000000 	nop

bfc00014 <__cpu_init>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:75
LEAF(__cpu_init)

    # Verify the code is here due to a reset and not NMI. If this is an NMI then trigger
    # a debugger breakpoint using a sdbp instruction.

    mfc0    s1, C0_STATUS       # Read CP0 Status
bfc00014:	40116000 	mfc0	s1,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:76
    ext     s1, s1, 19, 1       # extract NMI
bfc00018:	7e3104c0 	ext	s1,s1,0x13,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:77
    beqz    s1, init_resources  # Branch if this is NOT an NMI exception.
bfc0001c:	12200002 	beqz	s1,bfc00028 <init_resources>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:78
    nop
bfc00020:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:79
    sdbbp                       # Failed assertion: NMI.
bfc00024:	7000003f 	sdbbp

bfc00028 <init_resources>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:85

init_resources:                 # initializes resources for "cpu".

    # Initialize CP0 registers

    la a2,      init_cp0        # Init CP0 Status, Count, Compare, Watch*, and Cause.
bfc00028:	3c06bfc0 	lui	a2,0xbfc0
bfc0002c:	24c6049c 	addiu	a2,a2,1180
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:86
    jalr a2
bfc00030:	00c0f809 	jalr	a2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:87
    nop
bfc00034:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:118
  #  jalr    a2
  #  nop

    # Prepare for eret to main.

    la      ra, all_done        # If main returns then go to all_done:.
bfc00038:	3c1fbfc0 	lui	ra,0xbfc0
bfc0003c:	27ff0058 	addiu	ra,ra,88
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:119
    move    a0, zero            # Indicate that there are no arguments available.
bfc00040:	00002021 	move	a0,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:120
    la      v0, _start          # load the address of the CRT entry point _start.
bfc00044:	3c02bfc0 	lui	v0,0xbfc0
bfc00048:	24420508 	addiu	v0,v0,1288
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:121
    mtc0    v0, $30             # Write ErrorEPC with the address of main
bfc0004c:	4082f000 	mtc0	v0,c0_errorepc
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:122
    ehb                         # clear hazards (makes sure write to ErrorPC has completed)
bfc00050:	000000c0 	ehb
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:126

    # Return from exception will now execute code in main

    eret                        # Exit reset exception handler and start execution of _start.
bfc00054:	42000018 	eret

bfc00058 <all_done>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:132


/**************************************************************************************/
all_done:
    # If main returns it will return to this point.  Just spin here.
    b       all_done
bfc00058:	1000ffff 	b	bfc00058 <all_done>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:133
    nop
bfc0005c:	00000000 	nop

bfc00060 <init_icache>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:60
LEAF(init_icache)

	// Can be skipped if using magic simulation cache flush

	// Determine how big the I$ is
	mfc0	v0, C0_CONFIG1		// read C0_Config1
bfc00060:	40028001 	mfc0	v0,c0_config1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:63

	// Isolate I$ Line Size
	ext	    v1, v0, CFG1_ILSHIFT, 3		// extract IL
bfc00064:	7c4314c0 	ext	v1,v0,0x13,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:66

	// Skip ahead if No I$
	beq	    v1, zero, done_icache
bfc00068:	10600011 	beqz	v1,bfc000b0 <done_icache>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:67
	nop
bfc0006c:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:69

	li	    a2, 2
bfc00070:	24060002 	li	a2,2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:70
	sllv    v1, a2, v1			// Now have true I$ line size in bytes
bfc00074:	00661804 	sllv	v1,a2,v1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:72

	ext	    a0, v0, CFG1_ISSHIFT, 3		// extract IS
bfc00078:	7c441580 	ext	a0,v0,0x16,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:73
	li	    a2, 64
bfc0007c:	24060040 	li	a2,64
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:74
	sllv    a0, a2, a0			// I$ Sets per way
bfc00080:	00862004 	sllv	a0,a2,a0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:77

	// Config1IA == I$ Assoc - 1
	ext	    a1, v0, CFG1_IASHIFT, 3		// extract IA
bfc00084:	7c451400 	ext	a1,v0,0x10,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:78
	add	    a1, 1
bfc00088:	20a50001 	addi	a1,a1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:80

	mul	    a0, a0, a1			// Total number of sets
bfc0008c:	70852002 	mul	a0,a0,a1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:82

	lui	    a2, 0x8000			// Get a KSeg0 address for cacheops
bfc00090:	3c068000 	lui	a2,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:85

	// Clear TagLo/TagHi registers
	mtc0    zero, C0_TAGLO		// write C0_ITagLo
bfc00094:	4080e000 	mtc0	zero,c0_taglo
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:86
	mtc0    zero, C0_TAGHI		// write C0_ITagHi
bfc00098:	4080e800 	mtc0	zero,c0_taghi
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:88

	move    a3, a0
bfc0009c:	00803821 	move	a3,a0

bfc000a0 <next_icache_tag>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:93

next_icache_tag:
	// Index Store Tag Cache Op
	// Will invalidate the tag entry, clear the lock bit, and clear the LRF bit
	cache   0x8, 0(a2)			// ICIndexStTag
bfc000a0:	bcc80000 	cache	0x8,0(a2)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:94
	add	    a3, -1				// Decrement set counter
bfc000a4:	20e7ffff 	addi	a3,a3,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:95
	bne     a3, zero, next_icache_tag
bfc000a8:	14e0fffd 	bnez	a3,bfc000a0 <next_icache_tag>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:96
	add     a2, v1				// Get next line address
bfc000ac:	00c33020 	add	a2,a2,v1

bfc000b0 <done_icache>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:100

done_icache:

    jr      ra
bfc000b0:	03e00008 	jr	ra
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:101
    nop
bfc000b4:	00000000 	nop

bfc000b8 <init_dcache>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:110
* init_dcache invalidates all data cache entries
**************************************************************************************/

LEAF(init_dcache)

	mfc0	v0, C0_CONFIG1		// read C0_Config1
bfc000b8:	40028001 	mfc0	v0,c0_config1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:113

	// Isolate D$ Line Size
	ext	    v1, v0, CFG1_DLSHIFT, 3		// extract DL
bfc000bc:	7c431280 	ext	v1,v0,0xa,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:116

	// Skip ahead if No D$
	beq	    v1, zero, done_dcache
bfc000c0:	10600013 	beqz	v1,bfc00110 <done_dcache>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:117
	nop
bfc000c4:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:119

	li	    a2, 2
bfc000c8:	24060002 	li	a2,2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:120
	sllv	v1, a2, v1			// Now have true D$ line size in bytes
bfc000cc:	00661804 	sllv	v1,a2,v1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:122

	ext	    a0, v0, CFG1_DSSHIFT, 3		// extract DS
bfc000d0:	7c441340 	ext	a0,v0,0xd,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:123
	li	    a2, 64
bfc000d4:	24060040 	li	a2,64
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:124
	sllv	a0, a2, a0	// D$ Sets per way
bfc000d8:	00862004 	sllv	a0,a2,a0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:127

	// Config1DA == D$ Assoc - 1
	ext	    a1, v0, CFG1_DASHIFT, 3		// extract DA
bfc000dc:	7c4511c0 	ext	a1,v0,0x7,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:128
	add	    a1, 1
bfc000e0:	20a50001 	addi	a1,a1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:130

	mul	    a0, a0, a1			// Get total number of sets
bfc000e4:	70852002 	mul	a0,a0,a1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:132

	lui	    a2, 0x8000		    // Get a KSeg0 address for cacheops
bfc000e8:	3c068000 	lui	a2,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:135

	// Clear TagLo/TagHi registers
	mtc0	zero, C0_TAGLO		// write C0_TagLo
bfc000ec:	4080e000 	mtc0	zero,c0_taglo
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:136
	mtc0	zero, C0_TAGHI		// write C0_TagHi
bfc000f0:	4080e800 	mtc0	zero,c0_taghi
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:137
	mtc0	zero, C0_TAGLO, 2	// write C0_DTagLo
bfc000f4:	4080e002 	mtc0	zero,c0_taglo1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:138
	mtc0	zero, C0_TAGHI, 2	// write C0_DTagHi
bfc000f8:	4080e802 	mtc0	zero,c0_taghi1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:140

	move	a3, a0
bfc000fc:	00803821 	move	a3,a0

bfc00100 <next_dcache_tag>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:146

next_dcache_tag:
	// Index Store Tag Cache Op
	// Will invalidate the tag entry, clear the lock bit, and clear the LRF bit

    cache	0x9, 0(a2)			// DCIndexStTag
bfc00100:	bcc90000 	cache	0x9,0(a2)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:147
	add	    a3, -1			    // Decrement set counter
bfc00104:	20e7ffff 	addi	a3,a3,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:149

	bne	    a3, zero, next_dcache_tag
bfc00108:	14e0fffd 	bnez	a3,bfc00100 <next_dcache_tag>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:150
	add	    a2, v1		    	// Get next line address
bfc0010c:	00c33020 	add	a2,a2,v1

bfc00110 <done_dcache>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:153

done_dcache:
    jr      ra
bfc00110:	03e00008 	jr	ra
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:154
    nop
bfc00114:	00000000 	nop

bfc00118 <change_k0_cca>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:160
END(init_dcache)

LEAF(change_k0_cca)
	// NOTE! This code must be executed in KSEG1 (not KSGE0 uncached)
    // Set CCA for kseg0 to cacheable
	mfc0	v0, C0_CONFIG	// read C0_Config
bfc00118:	40028000 	mfc0	v0,c0_config
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:161
	li	v1, 3			// CCA for single-core processors
bfc0011c:	24030003 	li	v1,3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:162
      ins	v0, v1, 0, 3	// insert K0
bfc00120:	7c621004 	ins	v0,v1,0x0,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:163
	mtc0	v0, C0_CONFIG	// write C0_Config
bfc00124:	40828000 	mtc0	v0,c0_config
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:164
	jr.hb   ra
bfc00128:	03e00408 	jr.hb	ra
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_caches.S:165
    	nop
bfc0012c:	00000000 	nop
	...
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:148
**************************************************************************************/
/* NOTE: the linker script must insure that this code starts at start + 0x200 so the exception */
/* vectors will be addressed properly. All .org assume this! */
/* TLB refill, 32 bit task. */
.org 0x180						# interrupt exception
	la a2,  __exception_entry   # prepare to enter the uart irq handler.
bfc00180:	3c06bfc0 	lui	a2,0xbfc0
bfc00184:	24c605c8 	addiu	a2,a2,1480
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:149
    jr a2
bfc00188:	00c00008 	jr	a2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:150
    nop
bfc0018c:	00000000 	nop
	...
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:155

	
.org 0x200                      # TLB refill, 32 bit task.
	# display alternating one-zeros on board LEDs
    li      k0, BOARD_16_LEDS_ADDR  # Board LEDs display
bfc00200:	3c1ab060 	lui	k0,0xb060
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:156
    li      k1, 0x1111          # alternating one-zeros
bfc00204:	241b1111 	li	k1,4369
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:157
    sw      k1, 0(k0)           # Write pattern to LEDs
bfc00208:	af5b0000 	sw	k1,0(k0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:158
    eret
bfc0020c:	42000018 	eret
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:159
    nop
bfc00210:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:163
	#la a2,  __exception_entry   # prepare to enter the uart irq handler.
    #jr a2
    #nop
    sdbbp                       # This has the effect of starting the debugger
bfc00214:	7000003f 	sdbbp
	...
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:168
    nop

.org 0x280                      # XTLB refill, 64 bit task. start + 0x280
	# display alternating one-zeros on board LEDs
    li      k0, BOARD_16_LEDS_ADDR  # Board LEDs display
bfc00280:	3c1ab060 	lui	k0,0xb060
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:169
    li      k1, 0x3333          # alternating one-zeros
bfc00284:	241b3333 	li	k1,13107
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:170
    sw      k1, 0(k0)           # Write pattern to LEDs
bfc00288:	af5b0000 	sw	k1,0(k0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:171
    eret
bfc0028c:	42000018 	eret
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:172
    nop
bfc00290:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:173
    sdbbp                       # This has the effect of starting the debugger
bfc00294:	7000003f 	sdbbp
	...
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:178
    nop

	
.org 0x300                      # Cache error exception. start + 0x300
    sdbbp                       # This has the effect of starting the debugger
bfc00300:	7000003f 	sdbbp
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:179
    nop
bfc00304:	00000000 	nop

bfc00308 <init_tlb>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:57
**************************************************************************************/
LEAF(init_tlb)

check_for_tlb:
	// Determine if we have a TLB
	mfc0    v1, C0_CONFIG			// read C0_Config
bfc00308:	40038000 	mfc0	v1,c0_config
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:58
	ext	    v1, v1, 7, 3			// extract MT field
bfc0030c:	7c6311c0 	ext	v1,v1,0x7,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:59
	li	    a3, 0x1					// load a 1 to check against
bfc00310:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:60
	bne	    v1, a3, done_init_tlb
bfc00314:	1467000f 	bne	v1,a3,bfc00354 <done_init_tlb>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:61
	mfc0    v0, C0_CONFIG1			// C0_Config1
bfc00318:	40028001 	mfc0	v0,c0_config1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:62
	nop
bfc0031c:	00000000 	nop

bfc00320 <start_init_tlb>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:66

start_init_tlb:
	// Config1MMUSize == Number of TLB entries - 1
	ext     v1, v0, CFG1_MMUSSHIFT, 6 // extract MMU Size
bfc00320:	7c432e40 	ext	v1,v0,0x19,0x6
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:67
	mtc0    zero, C0_ENTRYLO0		// write C0_EntryLo0
bfc00324:	40801000 	mtc0	zero,c0_entrylo0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:68
	mtc0    zero, C0_ENTRYLO1		// write C0_EntryLo1
bfc00328:	40801800 	mtc0	zero,c0_entrylo1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:69
	mtc0    zero, C0_PAGEMASK		// write C0_PageMask
bfc0032c:	40802800 	mtc0	zero,c0_pagemask
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:70
	mtc0    zero, C0_WIRED			// write C0_Wired
bfc00330:	40803000 	mtc0	zero,c0_wired
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:71
	li	    a0, 0x80000000
bfc00334:	3c048000 	lui	a0,0x8000

bfc00338 <next_tlb_entry_pair>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:74

next_tlb_entry_pair:
	mtc0    v1, C0_INDEX			// write C0_Index
bfc00338:	40830000 	mtc0	v1,c0_index
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:75
	mtc0	a0, C0_ENTRYHI			// write C0_EntryHi
bfc0033c:	40845000 	mtc0	a0,c0_entryhi
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:76
	ehb
bfc00340:	000000c0 	ehb
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:77
	tlbwi
bfc00344:	42000002 	tlbwi
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:78
	add	    a0, (2<<13)				// Add 8K to the address to avoid TLB conflict with previous entry
bfc00348:	20844000 	addi	a0,a0,16384
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:80

	bne		v1, zero, next_tlb_entry_pair
bfc0034c:	1460fffa 	bnez	v1,bfc00338 <next_tlb_entry_pair>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:81
	add	    v1, -1
bfc00350:	2063ffff 	addi	v1,v1,-1

bfc00354 <done_init_tlb>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:84

done_init_tlb:
    jr      ra
bfc00354:	03e00008 	jr	ra
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_tlb.S:85
    nop
bfc00358:	00000000 	nop
	...
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:186
#include "init_tlb.S"


.org 0x380    /* General exception. */
	# disable interrupt
	mfc0    k0, C0_STATUS
bfc00380:	401a6000 	mfc0	k0,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:187
	la		k1, 0xfffffffe
bfc00384:	241bfffe 	li	k1,-2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:188
	and		k0, k0, k1			# StatusIE = 0
bfc00388:	035bd024 	and	k0,k0,k1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:189
	mtc0	k0, C0_STATUS		# set the Status register to disable interrupt
bfc0038c:	409a6000 	mtc0	k0,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:190
	ehb
bfc00390:	000000c0 	ehb
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:192

	la a2,  __exception_entry   # prepare to enter the uart irq handler.
bfc00394:	3c06bfc0 	lui	a2,0xbfc0
bfc00398:	24c605c8 	addiu	a2,a2,1480
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:193
    jr a2
bfc0039c:	00c00008 	jr	a2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:194
    nop
bfc003a0:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:197
	
    # display alternating one-zeros on board LEDs
    li      k0, BOARD_16_LEDS_ADDR  # Board LEDs display
bfc003a4:	3c1ab060 	lui	k0,0xb060
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:198
    li      k1, 0x5555          # alternating one-zeros
bfc003a8:	241b5555 	li	k1,21845
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:199
    sw      k1, 0(k0)           # Write pattern to LEDs
bfc003ac:	af5b0000 	sw	k1,0(k0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:200
    eret
bfc003b0:	42000018 	eret
	...
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:205
    nop

.org 0x400    /* General interrupt. */
    # display alternating one-zeros on board LEDs
    li      k0, BOARD_16_LEDS_ADDR  # Board LEDs display
bfc00400:	3c1ab060 	lui	k0,0xb060
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:206
    li      k1, 0x7777          # alternating one-zeros
bfc00404:	241b7777 	li	k1,30583
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:207
    sw      k1, 0(k0)           # Write pattern to LEDs
bfc00408:	af5b0000 	sw	k1,0(k0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:208
    eret
bfc0040c:	42000018 	eret
	...
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:216

# If you want the above code to fit into 1k flash you will need to leave out the
# code below. This is the code that covers the debug exception which you normally will not get.

.org 0x480 /* EJTAG debug exception (EJTAG Control Register[ProbTrap] == 0.) */
    li      r24_malta_word, BOARD_16_LEDS_ADDR     # If post boot then $24 is clobbered.
bfc00480:	3c18b060 	lui	t8,0xb060
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:217
    mtc0    a0, C0_DESAVE       # DeSave a0
bfc00484:	4084f800 	mtc0	a0,c0_desave
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:218
    mfc0    a0, C0_DEPC         # Read DEPC
bfc00488:	4004c000 	mfc0	a0,c0_depc
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:219
    sw      a0, 0(r24_malta_word)    # Display lower 16 bits of DEPC if there is not an EJTAG probe.
bfc0048c:	af040000 	sw	a0,0(t8)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:220
    mfc0    a0, C0_DESAVE       # Restore a0
bfc00490:	4004f800 	mfc0	a0,c0_desave
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:221
1:  b       1b  /* Stay here */
bfc00494:	1000ffff 	b	bfc00494 <done_init_tlb+0x140>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/boot.S:222
    nop
bfc00498:	00000000 	nop

bfc0049c <init_cp0>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:57
**************************************************************************************/
LEAF(init_cp0)

    // Initialize Status
	//li	v1, 0x00400404		// (M_StatusERL | M_StatusIPL1 | M_StatusBEV)
	li	v1, 0x0040fc04			// (M_StatusERL | M_StatusIPL1~IPL6 | M_StatusBEV)
bfc0049c:	3c030040 	lui	v1,0x40
bfc004a0:	3463fc04 	ori	v1,v1,0xfc04
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:58
	mtc0	v1, C0_STATUS		// write C0_Status
bfc004a4:	40836000 	mtc0	v1,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:61

	// Initialize Watch registers if implemented.
	mfc0	v0, C0_CONFIG1		// read C0_Config1
bfc004a8:	40028001 	mfc0	v0,c0_config1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:62
	ext	v1, v0, 3, 1		// extract bit 3 WR (Watch registers implemented)
bfc004ac:	7c4300c0 	ext	v1,v0,0x3,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:63
	beq 	v1, zero, done_wr
bfc004b0:	10600011 	beqz	v1,bfc004f8 <done_wr>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:64
	li    	v1, 0x7				// (M_WatchHiI | M_WatchHiR | M_WatchHiW)
bfc004b4:	24030007 	li	v1,7
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:67

	// Clear all possible Watch Status bits and disable watch exceptions
	mtc0	v1, C0_WATCHHI		// write C0_WatchHi0
bfc004b8:	40839800 	mtc0	v1,c0_watchhi
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:68
	mtc0	zero, C0_WATCHLO	// write C0_WatchLo0
bfc004bc:	40809000 	mtc0	zero,c0_watchlo
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:70

	mtc0	v1, C0_WATCHHI, 1	// write C0_WatchHi1
bfc004c0:	40839801 	mtc0	v1,c0_watchhi,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:71
	mtc0	zero, C0_WATCHLO, 1	// write C0_WatchLo1
bfc004c4:	40809001 	mtc0	zero,c0_watchlo,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:73

	mtc0	v1, C0_WATCHHI, 2	// write C0_WatchHi2
bfc004c8:	40839802 	mtc0	v1,c0_watchhi,2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:74
	mtc0	zero, C0_WATCHLO, 2	// write C0_WatchLo2
bfc004cc:	40809002 	mtc0	zero,c0_watchlo,2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:76

	mtc0	v1, C0_WATCHHI, 3	// write C0_WatchHi3
bfc004d0:	40839803 	mtc0	v1,c0_watchhi,3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:77
	mtc0	zero, C0_WATCHLO, 3	// write C0_WatchLo3
bfc004d4:	40809003 	mtc0	zero,c0_watchlo,3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:79

	mtc0	v1, C0_WATCHHI, 4	// write C0_WatchHi4
bfc004d8:	40839804 	mtc0	v1,c0_watchhi,4
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:80
	mtc0	zero, C0_WATCHLO, 4	// write C0_WatchLo4
bfc004dc:	40809004 	mtc0	zero,c0_watchlo,4
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:82

	mtc0	v1, C0_WATCHHI, 5	// write C0_WatchHi5
bfc004e0:	40839805 	mtc0	v1,c0_watchhi,5
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:83
	mtc0	zero, C0_WATCHLO, 5	// write C0_WatchLo5
bfc004e4:	40809005 	mtc0	zero,c0_watchlo,5
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:85

	mtc0	v1, C0_WATCHHI, 6	// write C0_WatchHi6
bfc004e8:	40839806 	mtc0	v1,c0_watchhi,6
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:86
	mtc0	zero, C0_WATCHLO, 6	// write C0_WatchLo6
bfc004ec:	40809006 	mtc0	zero,c0_watchlo,6
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:88

	mtc0	v1, C0_WATCHHI, 7	// write C0_WatchHi7
bfc004f0:	40839807 	mtc0	v1,c0_watchhi,7
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:89
	mtc0	zero, C0_WATCHLO, 7	// write C0_WatchLo7
bfc004f4:	40809007 	mtc0	zero,c0_watchlo,7

bfc004f8 <done_wr>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:94

done_wr:

	// Clear WP bit to avoid watch exception upon user code entry, IV, and software interrupts.
	mtc0	zero, C0_CAUSE		// write C0_Cause: Init AFTER init of CP0 WatchHi/Lo registers.
bfc004f8:	40806800 	mtc0	zero,c0_cause
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:97

	// Clear timer interrupt. (Count was cleared at the reset vector to allow timing boot.)
	mtc0	zero, C0_COMPARE	// write C0_Compare
bfc004fc:	40805800 	mtc0	zero,c0_compare
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:99

    jr      ra
bfc00500:	03e00008 	jr	ra
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/init_cp0.S:100
	nop
bfc00504:	00000000 	nop

bfc00508 <_start>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:60
/**************************************************************************************
**************************************************************************************/
LEAF(_start)

    # Set the global pointer register address to _gp - value set in linker .ld file
    la      gp, _gp             # All share globals.
bfc00508:	3c1c8001 	lui	gp,0x8001
bfc0050c:	279cb620 	addiu	gp,gp,-18912
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:63

    # Set up the stack pointer register to STACK_BASE_ADDR defined in boot.h
    li      sp, STACK_BASE_ADDR # Set up stack base.
bfc00510:	3c1dbfc0 	lui	sp,0xbfc0
bfc00514:	37bd0900 	ori	sp,sp,0x900
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:66

    # Make a stack frame; must be a multiple of 8-bytes
    addiu   sp, sp, -8
bfc00518:	27bdfff8 	addiu	sp,sp,-8
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:69

    # Preserve return address over the call to main
    sw      ra, 0(sp)
bfc0051c:	afbf0000 	sw	ra,0(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:71

    li      s1_all_ones, 0xffffffff
bfc00520:	2411ffff 	li	s1,-1

bfc00524 <zero_bss>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:74

zero_bss:
    la      t1_temp_addr, _fbss
bfc00524:	3c098000 	lui	t1,0x8000
bfc00528:	25293628 	addiu	t1,t1,13864
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:75
    ins     t1_temp_addr, s1_all_ones, 29, 1
bfc0052c:	7e29ef44 	ins	t1,s1,0x1d,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:76
    la      t3_temp_mark, _end
bfc00530:	3c0b8000 	lui	t3,0x8000
bfc00534:	256b36a4 	addiu	t3,t3,13988
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:77
    ins     t3_temp_mark, s1_all_ones, 29, 1
bfc00538:	7e2bef44 	ins	t3,s1,0x1d,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:78
    beq     t1_temp_addr, t3_temp_mark, invoke_main
bfc0053c:	112b0005 	beq	t1,t3,bfc00554 <invoke_main>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:79
    nop
bfc00540:	00000000 	nop

bfc00544 <next_bss_word>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:81
next_bss_word:
    sw      zero, 0(t1_temp_addr)
bfc00544:	ad200000 	sw	zero,0(t1)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:82
    addiu   t1_temp_addr, 4
bfc00548:	25290004 	addiu	t1,t1,4
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:83
    bne     t1_temp_addr, t3_temp_mark, next_bss_word
bfc0054c:	152bfffd 	bne	t1,t3,bfc00544 <next_bss_word>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:84
    nop
bfc00550:	00000000 	nop

bfc00554 <invoke_main>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:90

	
invoke_main:
	# Create interrupt control
	#
	lui		v0, 0xbfc0
bfc00554:	3c02bfc0 	lui	v0,0xbfc0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:91
	mtc0	v0, C0_EBASE		# set the interrupt base address at 0xbfc0_0000
bfc00558:	40827801 	mtc0	v0,c0_ebase
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:92
	ehb
bfc0055c:	000000c0 	ehb
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:94
	
	mfc0	v0, C0_CAUSE
bfc00560:	40026800 	mfc0	v0,c0_cause
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:95
	la		v1, 0xff7fffff
bfc00564:	3c03ff7f 	lui	v1,0xff7f
bfc00568:	3463ffff 	ori	v1,v1,0xffff
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:96
	and		v0, v0, v1
bfc0056c:	00431024 	and	v0,v0,v1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:97
	mtc0	v0, C0_CAUSE		# CauseIV = 0, interrupt offset at 0x180
bfc00570:	40826800 	mtc0	v0,c0_cause
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:98
	ehb
bfc00574:	000000c0 	ehb
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:100
	
	mfc0	v0, C0_STATUS
bfc00578:	40026000 	mfc0	v0,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:103
	#la		v1, 0xffbffff9
	#and		v0, v0, v1			# StatusBEV = 0, StatusEXL = 0, StatusERL = 0
	la		v1, 0x1
bfc0057c:	24030001 	li	v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:104
	or		v0, v0, v1			# StatusIE = 1
bfc00580:	00431025 	or	v0,v0,v1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:105
	mtc0	v0, C0_STATUS		# set the Status register to enable interrupt
bfc00584:	40826000 	mtc0	v0,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:106
	ehb							
bfc00588:	000000c0 	ehb
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:108
	
	mfc0	v0,C0_STATUS		# M_StatusEXL = 0
bfc0058c:	40026000 	mfc0	v0,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:109
	lui		v1,0x0
bfc00590:	3c030000 	lui	v1,0x0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:110
	addiu	v1,v1,-3
bfc00594:	2463fffd 	addiu	v1,v1,-3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:111
	and		v0,v0,v1
bfc00598:	00431024 	and	v0,v0,v1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:112
	mtc0	v0,C0_STATUS
bfc0059c:	40826000 	mtc0	v0,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:113
	ehb							
bfc005a0:	000000c0 	ehb
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:116
	

    la      t0, main
bfc005a4:	3c088000 	lui	t0,0x8000
bfc005a8:	25082a8c 	addiu	t0,t0,10892
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:118
    # Create space for the o32 argument stack
    addiu   sp, sp, -16
bfc005ac:	27bdfff0 	addiu	sp,sp,-16
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:120
    # Call main
    jalr    t0
bfc005b0:	0100f809 	jalr	t0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:121
    nop
bfc005b4:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:123

    lw      ra, 0(sp)
bfc005b8:	8fbf0000 	lw	ra,0(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:124
    addiu   sp, sp, 8
bfc005bc:	27bd0008 	addiu	sp,sp,8
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:125
    jr      ra
bfc005c0:	03e00008 	jr	ra
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/mini_crt0.S:126
    nop
bfc005c4:	00000000 	nop

bfc005c8 <__exception_entry>:
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:55

/**************************************************************************************
**************************************************************************************/
LEAF(__exception_entry)

	move	k1,sp
bfc005c8:	03a0d821 	move	k1,sp
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:56
	addiu	sp, sp, -176
bfc005cc:	27bdff50 	addiu	sp,sp,-176
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:58
	#sw	at, 16(sp)
	sw	v0, 20(sp)
bfc005d0:	afa20014 	sw	v0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:59
	sw	v1, 24(sp)
bfc005d4:	afa30018 	sw	v1,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:60
	sw	a0, 28(sp)
bfc005d8:	afa4001c 	sw	a0,28(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:61
	sw	a1, 32(sp)
bfc005dc:	afa50020 	sw	a1,32(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:62
	sw	a2, 36(sp)
bfc005e0:	afa60024 	sw	a2,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:63
	sw	a3, 40(sp)
bfc005e4:	afa70028 	sw	a3,40(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:64
	sw	t0, 44(sp)
bfc005e8:	afa8002c 	sw	t0,44(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:65
	sw	t1, 48(sp)
bfc005ec:	afa90030 	sw	t1,48(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:66
	sw	t2, 52(sp)
bfc005f0:	afaa0034 	sw	t2,52(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:67
	sw	t3, 56(sp)
bfc005f4:	afab0038 	sw	t3,56(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:68
	sw	t4, 60(sp)
bfc005f8:	afac003c 	sw	t4,60(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:69
	sw	t5, 64(sp)
bfc005fc:	afad0040 	sw	t5,64(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:70
	sw	t6, 68(sp)
bfc00600:	afae0044 	sw	t6,68(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:71
	sw	t7, 72(sp)
bfc00604:	afaf0048 	sw	t7,72(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:72
	sw	s0, 76(sp)
bfc00608:	afb0004c 	sw	s0,76(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:73
	sw	s1, 80(sp)
bfc0060c:	afb10050 	sw	s1,80(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:74
	sw	s2, 84(sp)
bfc00610:	afb20054 	sw	s2,84(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:75
	sw	s3, 88(sp)
bfc00614:	afb30058 	sw	s3,88(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:76
	sw	s4, 92(sp)
bfc00618:	afb4005c 	sw	s4,92(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:77
	sw	s5, 96(sp)
bfc0061c:	afb50060 	sw	s5,96(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:78
	sw	s6, 100(sp)
bfc00620:	afb60064 	sw	s6,100(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:79
	sw	s7, 104(sp)
bfc00624:	afb70068 	sw	s7,104(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:80
	sw	t8, 108(sp)
bfc00628:	afb8006c 	sw	t8,108(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:81
	sw	t9, 112(sp)
bfc0062c:	afb90070 	sw	t9,112(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:82
	sw	k0, 116(sp)
bfc00630:	afba0074 	sw	k0,116(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:83
	sw	gp, 124(sp)
bfc00634:	afbc007c 	sw	gp,124(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:84
	sw	k1, 128(sp)
bfc00638:	afbb0080 	sw	k1,128(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:85
	sw	s8, 132(sp)
bfc0063c:	afbe0084 	sw	s8,132(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:86
	sw	ra, 136(sp)
bfc00640:	afbf0088 	sw	ra,136(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:87
	sw	zero,156(sp)
bfc00644:	afa0009c 	sw	zero,156(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:88
	mfhi	t1
bfc00648:	00004810 	mfhi	t1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:89
	mflo	t2
bfc0064c:	00005012 	mflo	t2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:90
	sw	t1,148(sp)
bfc00650:	afa90094 	sw	t1,148(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:91
	sw	t2,152(sp)
bfc00654:	afaa0098 	sw	t2,152(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:92
	mfc0	ra,C0_EPC
bfc00658:	401f7000 	mfc0	ra,c0_epc
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:93
	mfc0	s3,C0_CAUSE
bfc0065c:	40136800 	mfc0	s3,c0_cause
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:94
	sw	ra,140(sp)
bfc00660:	afbf008c 	sw	ra,140(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:95
	mfc0	t1,C0_BADVADDR
bfc00664:	40094000 	mfc0	t1,c0_badvaddr
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:96
	sw	t1,144(sp)
bfc00668:	afa90090 	sw	t1,144(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:97
	sw	s3,164(sp)
bfc0066c:	afb300a4 	sw	s3,164(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:98
	move	t3,zero
bfc00670:	00005821 	move	t3,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:99
	move	t4,zero
bfc00674:	00006021 	move	t4,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:100
	mfc0	t1,C0_CONFIG3
bfc00678:	40098003 	mfc0	t1,c0_config3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:101
	ext	t2,t1,0x1b,0x1
bfc0067c:	7d2a06c0 	ext	t2,t1,0x1b,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:102
	beqz	t2, 1f
bfc00680:	11400001 	beqz	t2,bfc00688 <__exception_entry+0xc0>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:103
	mfc0	t3,$8,2
bfc00684:	400b4002 	mfc0	t3,$8,2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:105
1:
	ext	t1,t1,0x1a,0x1
bfc00688:	7d290680 	ext	t1,t1,0x1a,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:106
	beqz	t1, 2f
bfc0068c:	11200001 	beqz	t1,bfc00694 <__exception_entry+0xcc>
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:107
	mfc0	t4,$8,1
bfc00690:	400c4001 	mfc0	t4,$8,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:109
2:
	sw	t3,172(sp)
bfc00694:	afab00ac 	sw	t3,172(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:110
	sw	t4,168(sp)
bfc00698:	afac00a8 	sw	t4,168(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:111
	move	a0,sp
bfc0069c:	03a02021 	move	a0,sp
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:112
	mfc0	s5,C0_STATUS
bfc006a0:	40156000 	mfc0	s5,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:113
	lui	t1,0x0
bfc006a4:	3c090000 	lui	t1,0x0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:114
	addiu	t1,t1,-3
bfc006a8:	2529fffd 	addiu	t1,t1,-3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:115
	and	s5,s5,t1
bfc006ac:	02a9a824 	and	s5,s5,t1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:116
	mtc0	s5,C0_STATUS
bfc006b0:	40956000 	mtc0	s5,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:117
	sw	s5,160(sp)
bfc006b4:	afb500a0 	sw	s5,160(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:119
	
	la  t9, _mips_handle_irq
bfc006b8:	3c198000 	lui	t9,0x8000
bfc006bc:	27391330 	addiu	t9,t9,4912
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:120
	andi	a1,s3,0x7c
bfc006c0:	3265007c 	andi	a1,s3,0x7c
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:121
	addiu	a0,a0,16
bfc006c4:	24840010 	addiu	a0,a0,16
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:122
	srl	a1,a1,0x2
bfc006c8:	00052882 	srl	a1,a1,0x2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:123
	jalr  t9
bfc006cc:	0320f809 	jalr	t9
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:124
	nop
bfc006d0:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:128
	
	
		
	lw	t1,148(sp)
bfc006d4:	8fa90094 	lw	t1,148(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:129
	lw	t2,152(sp)
bfc006d8:	8faa0098 	lw	t2,152(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:130
	mthi	t1
bfc006dc:	01200011 	mthi	t1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:131
	mtlo	t2
bfc006e0:	01400013 	mtlo	t2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:132
	lw	s5,160(sp)
bfc006e4:	8fb500a0 	lw	s5,160(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:133
	mtc0	s5,C0_STATUS
bfc006e8:	40956000 	mtc0	s5,c0_status
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:134
	lw	s6,140(sp)
bfc006ec:	8fb6008c 	lw	s6,140(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:135
	mtc0	s6,C0_EPC
bfc006f0:	40967000 	mtc0	s6,c0_epc
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:137
	#lw	at,16(sp)
	lw	v0,20(sp)
bfc006f4:	8fa20014 	lw	v0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:138
	lw	v1,24(sp)
bfc006f8:	8fa30018 	lw	v1,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:139
	lw	a0,28(sp)
bfc006fc:	8fa4001c 	lw	a0,28(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:140
	lw	a1,32(sp)
bfc00700:	8fa50020 	lw	a1,32(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:141
	lw	a2,36(sp)
bfc00704:	8fa60024 	lw	a2,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:142
	lw	a3,40(sp)
bfc00708:	8fa70028 	lw	a3,40(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:143
	lw	t0,44(sp)
bfc0070c:	8fa8002c 	lw	t0,44(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:144
	lw	t1,48(sp)
bfc00710:	8fa90030 	lw	t1,48(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:145
	lw	t2,52(sp)
bfc00714:	8faa0034 	lw	t2,52(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:146
	lw	t3,56(sp)
bfc00718:	8fab0038 	lw	t3,56(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:147
	lw	t4,60(sp)
bfc0071c:	8fac003c 	lw	t4,60(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:148
	lw	t5,64(sp)
bfc00720:	8fad0040 	lw	t5,64(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:149
	lw	t6,68(sp)
bfc00724:	8fae0044 	lw	t6,68(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:150
	lw	t7,72(sp)
bfc00728:	8faf0048 	lw	t7,72(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:151
	lw	s0,76(sp)
bfc0072c:	8fb0004c 	lw	s0,76(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:152
	lw	s1,80(sp)
bfc00730:	8fb10050 	lw	s1,80(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:153
	lw	s2,84(sp)
bfc00734:	8fb20054 	lw	s2,84(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:154
	lw	s3,88(sp)
bfc00738:	8fb30058 	lw	s3,88(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:155
	lw	s4,92(sp)
bfc0073c:	8fb4005c 	lw	s4,92(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:156
	lw	s5,96(sp)
bfc00740:	8fb50060 	lw	s5,96(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:157
	lw	s6,100(sp)
bfc00744:	8fb60064 	lw	s6,100(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:158
	lw	s7,104(sp)
bfc00748:	8fb70068 	lw	s7,104(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:159
	lw	t8,108(sp)
bfc0074c:	8fb8006c 	lw	t8,108(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:160
	lw	t9,112(sp)
bfc00750:	8fb90070 	lw	t9,112(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:161
	lw	k0,116(sp)
bfc00754:	8fba0074 	lw	k0,116(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:162
	lw	k1,120(sp)
bfc00758:	8fbb0078 	lw	k1,120(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:163
	lw	gp,124(sp)
bfc0075c:	8fbc007c 	lw	gp,124(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:164
	lw	s8,132(sp)
bfc00760:	8fbe0084 	lw	s8,132(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:165
	lw	ra,136(sp)
bfc00764:	8fbf0088 	lw	ra,136(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:166
	lw	sp,128(sp)
bfc00768:	8fbd0080 	lw	sp,128(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/exception_entry.S:167
	eret
bfc0076c:	42000018 	eret
	...

Disassembly of section .text_ram:

80001000 <Rev_Pwm>:
Rev_Pwm():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:139

void Rev_Pwm(){			//injput_data: 0~9
	//unsigned int RecievedByte;
	//RecievedByte = *READ_IO(UART_BASE + rbr);

	*WRITE_IO(PWM_BASE) = 110000 * (s[1] - 0x30);
80001000:	3c028000 	lui	v0,0x8000
80001004:	90423635 	lbu	v0,13877(v0)
80001008:	2444ffd0 	addiu	a0,v0,-48
8000100c:	00041180 	sll	v0,a0,0x6
80001010:	00041a00 	sll	v1,a0,0x8
80001014:	00621823 	subu	v1,v1,v0
80001018:	00641023 	subu	v0,v1,a0
8000101c:	000218c0 	sll	v1,v0,0x3
80001020:	00431021 	addu	v0,v0,v1
80001024:	00021080 	sll	v0,v0,0x2
80001028:	00441023 	subu	v0,v0,a0
8000102c:	00021100 	sll	v0,v0,0x4
80001030:	3c03b0c0 	lui	v1,0xb0c0
80001034:	ac620000 	sw	v0,0(v1)
80001038:	03e00008 	jr	ra
8000103c:	00000000 	nop

80001040 <Rev_Led>:
Rev_Led():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:143
	// RecievedByte = *READ_IO(UART_BASE + rbr);
}

void Rev_Led() {		//input_data: 0~9
80001040:	27bdfff0 	addiu	sp,sp,-16
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:145
	//unsigned int RecievedByte;
	volatile unsigned int lednum = 0xFFFF;
80001044:	3402ffff 	li	v0,0xffff
80001048:	afa2000c 	sw	v0,12(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:154
	// *WRITE_IO(IO_LEDR) = lednum >> (32- (s[1] - 0x30));
	
	volatile unsigned int zzx = 0;
	volatile unsigned int cjj = 1;
	volatile unsigned int i;
	for (i = 0; i < s[1] - 0x30; i++)
8000104c:	3c028000 	lui	v0,0x8000
80001050:	90443635 	lbu	a0,13877(v0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:152
	//RecievedByte = *READ_IO(UART_BASE + rbr);
	
	// *WRITE_IO(IO_LEDR) = lednum >> (32- (s[1] - 0x30));
	
	volatile unsigned int zzx = 0;
	volatile unsigned int cjj = 1;
80001054:	24020001 	li	v0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:151
	// while((*READ_IO(UART_BASE + lsr) & 0x00000001)==0x00000001){  //'0~9''\n'
	//RecievedByte = *READ_IO(UART_BASE + rbr);
	
	// *WRITE_IO(IO_LEDR) = lednum >> (32- (s[1] - 0x30));
	
	volatile unsigned int zzx = 0;
80001058:	afa00008 	sw	zero,8(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:152
	volatile unsigned int cjj = 1;
8000105c:	afa20004 	sw	v0,4(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:154
	volatile unsigned int i;
	for (i = 0; i < s[1] - 0x30; i++)
80001060:	afa00000 	sw	zero,0(sp)
80001064:	8fa20000 	lw	v0,0(sp)
80001068:	2484ffd0 	addiu	a0,a0,-48
8000106c:	0044102b 	sltu	v0,v0,a0
80001070:	1040000f 	beqz	v0,800010b0 <Rev_Led+0x70>
80001074:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:156 (discriminator 3)
	{
		zzx = zzx | cjj;
80001078:	8fa30008 	lw	v1,8(sp)
8000107c:	8fa20004 	lw	v0,4(sp)
80001080:	00431025 	or	v0,v0,v1
80001084:	afa20008 	sw	v0,8(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:157 (discriminator 3)
		cjj = cjj * 2;
80001088:	8fa20004 	lw	v0,4(sp)
8000108c:	00021040 	sll	v0,v0,0x1
80001090:	afa20004 	sw	v0,4(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:154 (discriminator 3)
	// *WRITE_IO(IO_LEDR) = lednum >> (32- (s[1] - 0x30));
	
	volatile unsigned int zzx = 0;
	volatile unsigned int cjj = 1;
	volatile unsigned int i;
	for (i = 0; i < s[1] - 0x30; i++)
80001094:	8fa20000 	lw	v0,0(sp)
80001098:	24420001 	addiu	v0,v0,1
8000109c:	afa20000 	sw	v0,0(sp)
800010a0:	8fa20000 	lw	v0,0(sp)
800010a4:	0044102b 	sltu	v0,v0,a0
800010a8:	1440fff3 	bnez	v0,80001078 <Rev_Led+0x38>
800010ac:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:160
	{
		zzx = zzx | cjj;
		cjj = cjj * 2;
	}

	*WRITE_IO(IO_LEDR) = zzx;
800010b0:	8fa30008 	lw	v1,8(sp)
800010b4:	3c02b060 	lui	v0,0xb060
800010b8:	ac430000 	sw	v1,0(v0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:163
	// *WRITE_IO(IO_LEDR) = s[1] - 0x30;
	
}
800010bc:	03e00008 	jr	ra
800010c0:	27bd0010 	addiu	sp,sp,16

800010c4 <Display_Switch>:
Display_Switch():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:168


void Display_Switch(){
	unsigned int num = 0;
	num = (*READ_IO(IO_SWR)) & 0x3f;
800010c4:	3c02b060 	lui	v0,0xb060
800010c8:	8c440008 	lw	a0,8(v0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:166
	// *WRITE_IO(IO_LEDR) = s[1] - 0x30;
	
}


void Display_Switch(){
800010cc:	27bdffd8 	addiu	sp,sp,-40
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
800010d0:	3c02b040 	lui	v0,0xb040
800010d4:	24030053 	li	v1,83
Display_Switch():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:166
	// *WRITE_IO(IO_LEDR) = s[1] - 0x30;
	
}


void Display_Switch(){
800010d8:	afbf0024 	sw	ra,36(sp)
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
800010dc:	ac431000 	sw	v1,4096(v0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
800010e0:	afa00018 	sw	zero,24(sp)
800010e4:	8fa20018 	lw	v0,24(sp)
800010e8:	2c422710 	sltiu	v0,v0,10000
800010ec:	10400008 	beqz	v0,80001110 <Display_Switch+0x4c>
800010f0:	3084003f 	andi	a0,a0,0x3f
800010f4:	8fa20018 	lw	v0,24(sp)
800010f8:	24420001 	addiu	v0,v0,1
800010fc:	afa20018 	sw	v0,24(sp)
80001100:	8fa20018 	lw	v0,24(sp)
80001104:	2c422710 	sltiu	v0,v0,10000
80001108:	1440fffa 	bnez	v0,800010f4 <Display_Switch+0x30>
8000110c:	00000000 	nop
Display_Switch():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:170

void Display_Switch(){
	unsigned int num = 0;
	num = (*READ_IO(IO_SWR)) & 0x3f;
	uart_print("S");
	uart_print(my_itoa(num));
80001110:	0c000533 	jal	800014cc <my_itoa>
80001114:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80001118:	90430000 	lbu	v1,0(v0)
8000111c:	10600012 	beqz	v1,80001168 <Display_Switch+0xa4>
80001120:	3c04b040 	lui	a0,0xb040
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
80001124:	ac831000 	sw	v1,4096(a0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80001128:	afa00014 	sw	zero,20(sp)
8000112c:	8fa30014 	lw	v1,20(sp)
80001130:	2c632710 	sltiu	v1,v1,10000
80001134:	50600009 	beqzl	v1,8000115c <Display_Switch+0x98>
80001138:	24420001 	addiu	v0,v0,1
8000113c:	8fa30014 	lw	v1,20(sp)
80001140:	24630001 	addiu	v1,v1,1
80001144:	afa30014 	sw	v1,20(sp)
80001148:	8fa30014 	lw	v1,20(sp)
8000114c:	2c632710 	sltiu	v1,v1,10000
80001150:	1460fffa 	bnez	v1,8000113c <Display_Switch+0x78>
80001154:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:211

void uart_print(const char *ptr)
{
	while (*ptr) {
		uart_outbyte (*ptr);
		ptr++;
80001158:	24420001 	addiu	v0,v0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
8000115c:	90430000 	lbu	v1,0(v0)
80001160:	1460fff0 	bnez	v1,80001124 <Display_Switch+0x60>
80001164:	00000000 	nop
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
80001168:	3c02b040 	lui	v0,0xb040
8000116c:	2403000a 	li	v1,10
80001170:	ac431000 	sw	v1,4096(v0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80001174:	afa00010 	sw	zero,16(sp)
80001178:	8fa20010 	lw	v0,16(sp)
8000117c:	2c422710 	sltiu	v0,v0,10000
80001180:	10400008 	beqz	v0,800011a4 <Display_Switch+0xe0>
80001184:	8fbf0024 	lw	ra,36(sp)
80001188:	8fa20010 	lw	v0,16(sp)
8000118c:	24420001 	addiu	v0,v0,1
80001190:	afa20010 	sw	v0,16(sp)
80001194:	8fa20010 	lw	v0,16(sp)
80001198:	2c422710 	sltiu	v0,v0,10000
8000119c:	1440fffa 	bnez	v0,80001188 <Display_Switch+0xc4>
800011a0:	8fbf0024 	lw	ra,36(sp)
Display_Switch():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:172
	unsigned int num = 0;
	num = (*READ_IO(IO_SWR)) & 0x3f;
	uart_print("S");
	uart_print(my_itoa(num));
	uart_print("\n");
}
800011a4:	03e00008 	jr	ra
800011a8:	27bd0028 	addiu	sp,sp,40

800011ac <delay>:
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:174

void delay() {
800011ac:	27bdfff8 	addiu	sp,sp,-8
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
800011b0:	afa00000 	sw	zero,0(sp)
800011b4:	8fa20000 	lw	v0,0(sp)
800011b8:	2c422710 	sltiu	v0,v0,10000
800011bc:	10400008 	beqz	v0,800011e0 <delay+0x34>
800011c0:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177 (discriminator 3)
800011c4:	8fa20000 	lw	v0,0(sp)
800011c8:	24420001 	addiu	v0,v0,1
800011cc:	afa20000 	sw	v0,0(sp)
800011d0:	8fa20000 	lw	v0,0(sp)
800011d4:	2c422710 	sltiu	v0,v0,10000
800011d8:	1440fffa 	bnez	v0,800011c4 <delay+0x18>
800011dc:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:178
}
800011e0:	03e00008 	jr	ra
800011e4:	27bd0008 	addiu	sp,sp,8

800011e8 <uart_outbyte>:
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:180

void uart_outbyte(char c) {
800011e8:	27bdfff8 	addiu	sp,sp,-8
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
800011ec:	3c02b040 	lui	v0,0xb040
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:180
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
800011f0:	308400ff 	andi	a0,a0,0xff
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
800011f4:	ac441000 	sw	a0,4096(v0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
800011f8:	afa00000 	sw	zero,0(sp)
800011fc:	8fa20000 	lw	v0,0(sp)
80001200:	2c422710 	sltiu	v0,v0,10000
80001204:	10400008 	beqz	v0,80001228 <uart_outbyte+0x40>
80001208:	00000000 	nop
8000120c:	8fa20000 	lw	v0,0(sp)
80001210:	24420001 	addiu	v0,v0,1
80001214:	afa20000 	sw	v0,0(sp)
80001218:	8fa20000 	lw	v0,0(sp)
8000121c:	2c422710 	sltiu	v0,v0,10000
80001220:	1440fffa 	bnez	v0,8000120c <uart_outbyte+0x24>
80001224:	00000000 	nop
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:183
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
	delay( );
}
80001228:	03e00008 	jr	ra
8000122c:	27bd0008 	addiu	sp,sp,8

80001230 <uart_inbyte>:
uart_inbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:189

char uart_inbyte(void) {
	unsigned int RecievedByte;
	unsigned int count = 0;
	
	while(!((*READ_IO(UART_BASE + lsr) & 0x00000001)==0x00000001))
80001230:	3c02b040 	lui	v0,0xb040
80001234:	8c421014 	lw	v0,4116(v0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:185
void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
	delay( );
}

char uart_inbyte(void) {
80001238:	27bdffe0 	addiu	sp,sp,-32
8000123c:	afb20018 	sw	s2,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:189
	unsigned int RecievedByte;
	unsigned int count = 0;
	
	while(!((*READ_IO(UART_BASE + lsr) & 0x00000001)==0x00000001))
80001240:	30420001 	andi	v0,v0,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:185
void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
	delay( );
}

char uart_inbyte(void) {
80001244:	afb10014 	sw	s1,20(sp)
80001248:	afb00010 	sw	s0,16(sp)
8000124c:	afbf001c 	sw	ra,28(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:189
	unsigned int RecievedByte;
	unsigned int count = 0;
	
	while(!((*READ_IO(UART_BASE + lsr) & 0x00000001)==0x00000001))
80001250:	24100001 	li	s0,1
80001254:	3c11b040 	lui	s1,0xb040
80001258:	14400014 	bnez	v0,800012ac <uart_inbyte+0x7c>
8000125c:	24120032 	li	s2,50
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:197
			Display_Temp(ADT7420_ReadTemp());	//send temp
			count = 0;
			//uart_print("t");

		}
		Display_Switch();					//send switch
80001260:	0c000431 	jal	800010c4 <Display_Switch>
80001264:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:189

char uart_inbyte(void) {
	unsigned int RecievedByte;
	unsigned int count = 0;
	
	while(!((*READ_IO(UART_BASE + lsr) & 0x00000001)==0x00000001))
80001268:	8e221014 	lw	v0,4116(s1)
8000126c:	30420001 	andi	v0,v0,0x1
80001270:	1440000e 	bnez	v0,800012ac <uart_inbyte+0x7c>
80001274:	26100001 	addiu	s0,s0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:191
	{
		if (++count == 50) {
80001278:	1612fff9 	bne	s0,s2,80001260 <uart_inbyte+0x30>
8000127c:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:192
			Display_Temp(ADT7420_ReadTemp());	//send temp
80001280:	0c000697 	jal	80001a5c <ADT7420_ReadTemp>
80001284:	00000000 	nop
80001288:	0c0006b4 	jal	80001ad0 <Display_Temp>
8000128c:	7c022620 	seh	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:197
			count = 0;
			//uart_print("t");

		}
		Display_Switch();					//send switch
80001290:	0c000431 	jal	800010c4 <Display_Switch>
80001294:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:189

char uart_inbyte(void) {
	unsigned int RecievedByte;
	unsigned int count = 0;
	
	while(!((*READ_IO(UART_BASE + lsr) & 0x00000001)==0x00000001))
80001298:	8e221014 	lw	v0,4116(s1)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:193
	{
		if (++count == 50) {
			Display_Temp(ADT7420_ReadTemp());	//send temp
			count = 0;
8000129c:	00008021 	move	s0,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:189

char uart_inbyte(void) {
	unsigned int RecievedByte;
	unsigned int count = 0;
	
	while(!((*READ_IO(UART_BASE + lsr) & 0x00000001)==0x00000001))
800012a0:	30420001 	andi	v0,v0,0x1
800012a4:	1040fff4 	beqz	v0,80001278 <uart_inbyte+0x48>
800012a8:	26100001 	addiu	s0,s0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:200

		}
		Display_Switch();					//send switch
	}

	RecievedByte = *READ_IO(UART_BASE + rbr);
800012ac:	3c02b040 	lui	v0,0xb040
800012b0:	8c421000 	lw	v0,4096(v0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:205



	return (char)RecievedByte;
}
800012b4:	8fbf001c 	lw	ra,28(sp)
800012b8:	8fb20018 	lw	s2,24(sp)
800012bc:	8fb10014 	lw	s1,20(sp)
800012c0:	8fb00010 	lw	s0,16(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:204

	RecievedByte = *READ_IO(UART_BASE + rbr);



	return (char)RecievedByte;
800012c4:	304200ff 	andi	v0,v0,0xff
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:205
}
800012c8:	03e00008 	jr	ra
800012cc:	27bd0020 	addiu	sp,sp,32

800012d0 <uart_print>:
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209

void uart_print(const char *ptr)
{
	while (*ptr) {
800012d0:	90820000 	lbu	v0,0(a0)
800012d4:	10400014 	beqz	v0,80001328 <uart_print+0x58>
800012d8:	3c03b040 	lui	v1,0xb040
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:208

	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
800012dc:	27bdfff8 	addiu	sp,sp,-8
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
800012e0:	ac621000 	sw	v0,4096(v1)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
800012e4:	afa00000 	sw	zero,0(sp)
800012e8:	8fa20000 	lw	v0,0(sp)
800012ec:	2c422710 	sltiu	v0,v0,10000
800012f0:	50400009 	beqzl	v0,80001318 <uart_print+0x48>
800012f4:	24840001 	addiu	a0,a0,1
800012f8:	8fa20000 	lw	v0,0(sp)
800012fc:	24420001 	addiu	v0,v0,1
80001300:	afa20000 	sw	v0,0(sp)
80001304:	8fa20000 	lw	v0,0(sp)
80001308:	2c422710 	sltiu	v0,v0,10000
8000130c:	1440fffa 	bnez	v0,800012f8 <uart_print+0x28>
80001310:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:211

void uart_print(const char *ptr)
{
	while (*ptr) {
		uart_outbyte (*ptr);
		ptr++;
80001314:	24840001 	addiu	a0,a0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80001318:	90820000 	lbu	v0,0(a0)
8000131c:	1440fff0 	bnez	v0,800012e0 <uart_print+0x10>
80001320:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:213
		uart_outbyte (*ptr);
		ptr++;
	}
}
80001324:	27bd0008 	addiu	sp,sp,8
80001328:	03e00008 	jr	ra
8000132c:	00000000 	nop

80001330 <_mips_handle_irq>:
_mips_handle_irq():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:222
*/


void _mips_handle_irq(void* ctx, int reason)
{
	if(reason & IS_TIMER_INTR) {
80001330:	7ca20780 	ext	v0,a1,0x1e,0x1
80001334:	1040001b 	beqz	v0,800013a4 <_mips_handle_irq+0x74>
80001338:	27bdfff0 	addiu	sp,sp,-16
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:224
	// write C0_Compare = $11
		asm volatile ("mtc0	$0, $11");
8000133c:	40805800 	mtc0	zero,c0_compare
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:226
			
		asm volatile ("li $9, 0x1");
80001340:	24090001 	li	t1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:228
		// write C0_COUNT = $9
		asm volatile ("mtc0 $9, $9");
80001344:	40894800 	mtc0	t1,c0_count
80001348:	3c038000 	lui	v1,0x8000
8000134c:	24632eb8 	addiu	v1,v1,11960
80001350:	24020054 	li	v0,84
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
80001354:	3c04b040 	lui	a0,0xb040
80001358:	ac821000 	sw	v0,4096(a0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
8000135c:	afa00008 	sw	zero,8(sp)
80001360:	8fa20008 	lw	v0,8(sp)
80001364:	2c422710 	sltiu	v0,v0,10000
80001368:	50400009 	beqzl	v0,80001390 <_mips_handle_irq+0x60>
8000136c:	24630001 	addiu	v1,v1,1
80001370:	8fa20008 	lw	v0,8(sp)
80001374:	24420001 	addiu	v0,v0,1
80001378:	afa20008 	sw	v0,8(sp)
8000137c:	8fa20008 	lw	v0,8(sp)
80001380:	2c422710 	sltiu	v0,v0,10000
80001384:	1440fffa 	bnez	v0,80001370 <_mips_handle_irq+0x40>
80001388:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:211

void uart_print(const char *ptr)
{
	while (*ptr) {
		uart_outbyte (*ptr);
		ptr++;
8000138c:	24630001 	addiu	v1,v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80001390:	90620000 	lbu	v0,0(v1)
80001394:	1440fff0 	bnez	v0,80001358 <_mips_handle_irq+0x28>
80001398:	00000000 	nop
_mips_handle_irq():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:251
	
	else {
		uart_print("Other interrupts occurred!\n\r");
	}

}
8000139c:	03e00008 	jr	ra
800013a0:	27bd0010 	addiu	sp,sp,16
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:240
		data_received = 0x1;
		uart_print("UART interrupts occurred!\n\r");
		return;
	}
	*/
	else if(reason & IS_PWM_INTR) {
800013a4:	30a54000 	andi	a1,a1,0x4000
800013a8:	10a0001a 	beqz	a1,80001414 <_mips_handle_irq+0xe4>
800013ac:	3c038000 	lui	v1,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:241
		*WRITE_IO(PWM_BASE) = 0x0;
800013b0:	3c02b0c0 	lui	v0,0xb0c0
800013b4:	3c038000 	lui	v1,0x8000
800013b8:	ac400000 	sw	zero,0(v0)
800013bc:	24632ed8 	addiu	v1,v1,11992
800013c0:	24020050 	li	v0,80
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
800013c4:	3c04b040 	lui	a0,0xb040
800013c8:	ac821000 	sw	v0,4096(a0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
800013cc:	afa00004 	sw	zero,4(sp)
800013d0:	8fa20004 	lw	v0,4(sp)
800013d4:	2c422710 	sltiu	v0,v0,10000
800013d8:	50400009 	beqzl	v0,80001400 <_mips_handle_irq+0xd0>
800013dc:	24630001 	addiu	v1,v1,1
800013e0:	8fa20004 	lw	v0,4(sp)
800013e4:	24420001 	addiu	v0,v0,1
800013e8:	afa20004 	sw	v0,4(sp)
800013ec:	8fa20004 	lw	v0,4(sp)
800013f0:	2c422710 	sltiu	v0,v0,10000
800013f4:	1440fffa 	bnez	v0,800013e0 <_mips_handle_irq+0xb0>
800013f8:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:211

void uart_print(const char *ptr)
{
	while (*ptr) {
		uart_outbyte (*ptr);
		ptr++;
800013fc:	24630001 	addiu	v1,v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80001400:	90620000 	lbu	v0,0(v1)
80001404:	1440fff0 	bnez	v0,800013c8 <_mips_handle_irq+0x98>
80001408:	00000000 	nop
_mips_handle_irq():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:251
	
	else {
		uart_print("Other interrupts occurred!\n\r");
	}

}
8000140c:	03e00008 	jr	ra
80001410:	27bd0010 	addiu	sp,sp,16
80001414:	24632ef4 	addiu	v1,v1,12020
80001418:	2402004f 	li	v0,79
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
8000141c:	3c04b040 	lui	a0,0xb040
80001420:	ac821000 	sw	v0,4096(a0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80001424:	afa00000 	sw	zero,0(sp)
80001428:	8fa20000 	lw	v0,0(sp)
8000142c:	2c422710 	sltiu	v0,v0,10000
80001430:	50400009 	beqzl	v0,80001458 <_mips_handle_irq+0x128>
80001434:	24630001 	addiu	v1,v1,1
80001438:	8fa20000 	lw	v0,0(sp)
8000143c:	24420001 	addiu	v0,v0,1
80001440:	afa20000 	sw	v0,0(sp)
80001444:	8fa20000 	lw	v0,0(sp)
80001448:	2c422710 	sltiu	v0,v0,10000
8000144c:	1440fffa 	bnez	v0,80001438 <_mips_handle_irq+0x108>
80001450:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:211

void uart_print(const char *ptr)
{
	while (*ptr) {
		uart_outbyte (*ptr);
		ptr++;
80001454:	24630001 	addiu	v1,v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80001458:	90620000 	lbu	v0,0(v1)
8000145c:	1440fff0 	bnez	v0,80001420 <_mips_handle_irq+0xf0>
80001460:	00000000 	nop
_mips_handle_irq():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:251
	
	else {
		uart_print("Other interrupts occurred!\n\r");
	}

}
80001464:	03e00008 	jr	ra
80001468:	27bd0010 	addiu	sp,sp,16

8000146c <reverse>:
reverse():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:71
char *reverse(char *s)  
{  
    char temp;  
    char *p = s;    //p指向s的头部  
    char *q = s;    //q指向s的尾部  
    while(*q)  
8000146c:	90860000 	lbu	a2,0(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:67
int  TUpper = 0x1FFF;


//反转字符串  
char *reverse(char *s)  
{  
80001470:	00801021 	move	v0,a0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:71
    char temp;  
    char *p = s;    //p指向s的头部  
    char *q = s;    //q指向s的尾部  
    while(*q)  
80001474:	10c00005 	beqz	a2,8000148c <reverse+0x20>
80001478:	00801821 	move	v1,a0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:72
        ++q;  
8000147c:	24630001 	addiu	v1,v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:71
char *reverse(char *s)  
{  
    char temp;  
    char *p = s;    //p指向s的头部  
    char *q = s;    //q指向s的尾部  
    while(*q)  
80001480:	90650000 	lbu	a1,0(v1)
80001484:	54a0fffe 	bnezl	a1,80001480 <reverse+0x14>
80001488:	24630001 	addiu	v1,v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:73
        ++q;  
    q--;  
8000148c:	2463ffff 	addiu	v1,v1,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:76
  
    //交换移动指针，直到p和q交叉  
    while(q > p)  
80001490:	0043202b 	sltu	a0,v0,v1
80001494:	1080000b 	beqz	a0,800014c4 <reverse+0x58>
80001498:	00402821 	move	a1,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:79
    {  
        temp = *p;  
        *p++ = *q;  
8000149c:	10000003 	b	800014ac <reverse+0x40>
800014a0:	90680000 	lbu	t0,0(v1)
800014a4:	90a60000 	lbu	a2,0(a1)
800014a8:	90680000 	lbu	t0,0(v1)
800014ac:	24a50001 	addiu	a1,a1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:80
        *q-- = temp;  
800014b0:	2463ffff 	addiu	v1,v1,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:76
    while(*q)  
        ++q;  
    q--;  
  
    //交换移动指针，直到p和q交叉  
    while(q > p)  
800014b4:	00a3382b 	sltu	a3,a1,v1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:79
    {  
        temp = *p;  
        *p++ = *q;  
800014b8:	a0a8ffff 	sb	t0,-1(a1)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:76
    while(*q)  
        ++q;  
    q--;  
  
    //交换移动指针，直到p和q交叉  
    while(q > p)  
800014bc:	14e0fff9 	bnez	a3,800014a4 <reverse+0x38>
800014c0:	a0660001 	sb	a2,1(v1)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:83
        temp = *p;  
        *p++ = *q;  
        *q-- = temp;  
    }  
    return s;  
}  
800014c4:	03e00008 	jr	ra
800014c8:	00000000 	nop

800014cc <my_itoa>:
my_itoa():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:90
/* 
 * 功能：整数转换为字符串 
 * char s[] 的作用是存储整数的每一位 
 */  
char *my_itoa(int n)  
{  
800014cc:	000417c3 	sra	v0,a0,0x1f
800014d0:	00442826 	xor	a1,v0,a0
800014d4:	3c0b8000 	lui	t3,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:99
    {  
        n = -n;  
    }  
    do      //从各位开始变为字符，直到最高位，最后应该反转  
    {  
        s[i++] = n%10 + '0';  
800014d8:	3c0a6666 	lui	t2,0x6666
800014dc:	00a22823 	subu	a1,a1,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:90
/* 
 * 功能：整数转换为字符串 
 * char s[] 的作用是存储整数的每一位 
 */  
char *my_itoa(int n)  
{  
800014e0:	00003821 	move	a3,zero
800014e4:	25623640 	addiu	v0,t3,13888
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:99
    {  
        n = -n;  
    }  
    do      //从各位开始变为字符，直到最高位，最后应该反转  
    {  
        s[i++] = n%10 + '0';  
800014e8:	254a6667 	addiu	t2,t2,26215
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:99 (discriminator 1)
800014ec:	00aa0018 	mult	a1,t2
800014f0:	000537c3 	sra	a2,a1,0x1f
800014f4:	24e70001 	addiu	a3,a3,1
800014f8:	00474021 	addu	t0,v0,a3
800014fc:	00001810 	mfhi	v1
80001500:	00031883 	sra	v1,v1,0x2
80001504:	00661823 	subu	v1,v1,a2
80001508:	00033040 	sll	a2,v1,0x1
8000150c:	000348c0 	sll	t1,v1,0x3
80001510:	00c93021 	addu	a2,a2,t1
80001514:	00a62823 	subu	a1,a1,a2
80001518:	24a60030 	addiu	a2,a1,48
8000151c:	a106ffff 	sb	a2,-1(t0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:101 (discriminator 1)
        n = n/10;  
    }while(n > 0);  
80001520:	1460fff2 	bnez	v1,800014ec <my_itoa+0x20>
80001524:	00602821 	move	a1,v1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:103
  
    if(isNegative < 0)   //如果是负数，补上负号  
80001528:	0480001a 	bltz	a0,80001594 <my_itoa+0xc8>
8000152c:	2404002d 	li	a0,45
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:107
    {  
        s[i++] = '-';  
    }  
    s[i] = '\0';    //最后加上字符串结束符  
80001530:	00473821 	addu	a3,v0,a3
80001534:	a0e00000 	sb	zero,0(a3)
reverse():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:71
char *reverse(char *s)  
{  
    char temp;  
    char *p = s;    //p指向s的头部  
    char *q = s;    //q指向s的尾部  
    while(*q)  
80001538:	91653640 	lbu	a1,13888(t3)
8000153c:	10a00005 	beqz	a1,80001554 <my_itoa+0x88>
80001540:	00401821 	move	v1,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:72
        ++q;  
80001544:	24630001 	addiu	v1,v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:71
char *reverse(char *s)  
{  
    char temp;  
    char *p = s;    //p指向s的头部  
    char *q = s;    //q指向s的尾部  
    while(*q)  
80001548:	90640000 	lbu	a0,0(v1)
8000154c:	5480fffe 	bnezl	a0,80001548 <my_itoa+0x7c>
80001550:	24630001 	addiu	v1,v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:73
        ++q;  
    q--;  
80001554:	2463ffff 	addiu	v1,v1,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:76
  
    //交换移动指针，直到p和q交叉  
    while(q > p)  
80001558:	0043202b 	sltu	a0,v0,v1
8000155c:	1080000b 	beqz	a0,8000158c <my_itoa+0xc0>
80001560:	00402021 	move	a0,v0
my_itoa():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:79
    {  
        temp = *p;  
        *p++ = *q;  
80001564:	10000003 	b	80001574 <my_itoa+0xa8>
80001568:	90670000 	lbu	a3,0(v1)
8000156c:	90850000 	lbu	a1,0(a0)
reverse():
80001570:	90670000 	lbu	a3,0(v1)
80001574:	24840001 	addiu	a0,a0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:80
        *q-- = temp;  
80001578:	2463ffff 	addiu	v1,v1,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:76
    while(*q)  
        ++q;  
    q--;  
  
    //交换移动指针，直到p和q交叉  
    while(q > p)  
8000157c:	0083302b 	sltu	a2,a0,v1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:79
    {  
        temp = *p;  
        *p++ = *q;  
80001580:	a087ffff 	sb	a3,-1(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:76
    while(*q)  
        ++q;  
    q--;  
  
    //交换移动指针，直到p和q交叉  
    while(q > p)  
80001584:	14c0fff9 	bnez	a2,8000156c <my_itoa+0xa0>
80001588:	a0650001 	sb	a1,1(v1)
my_itoa():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:110
        s[i++] = '-';  
    }  
    s[i] = '\0';    //最后加上字符串结束符  
	
    return reverse(s);    
}  
8000158c:	03e00008 	jr	ra
80001590:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:105
        n = n/10;  
    }while(n > 0);  
  
    if(isNegative < 0)   //如果是负数，补上负号  
    {  
        s[i++] = '-';  
80001594:	24e70001 	addiu	a3,a3,1
80001598:	1000ffe5 	b	80001530 <my_itoa+0x64>
8000159c:	a1040000 	sb	a0,0(t0)

800015a0 <SetAlertModeComparator>:
SetAlertModeComparator():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:144
* @param None.
*
* @return None.
******************************************************************************/
void SetAlertModeComparator(void)
{
800015a0:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:149
	unsigned char txBuffer[1] = {0x00};

	txBuffer[0] = 1 << INT_CT;

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, txBuffer);
800015a4:	27a20018 	addiu	v0,sp,24
800015a8:	3c04b0a0 	lui	a0,0xb0a0
800015ac:	afa20010 	sw	v0,16(sp)
800015b0:	2405004b 	li	a1,75
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:147
******************************************************************************/
void SetAlertModeComparator(void)
{
	unsigned char txBuffer[1] = {0x00};

	txBuffer[0] = 1 << INT_CT;
800015b4:	24020010 	li	v0,16
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:149

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, txBuffer);
800015b8:	24060003 	li	a2,3
800015bc:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:144
* @param None.
*
* @return None.
******************************************************************************/
void SetAlertModeComparator(void)
{
800015c0:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:149
	unsigned char txBuffer[1] = {0x00};

	txBuffer[0] = 1 << INT_CT;

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, txBuffer);
800015c4:	0c000a7d 	jal	800029f4 <I2C_Write>
800015c8:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:150
}
800015cc:	8fbf0024 	lw	ra,36(sp)
800015d0:	03e00008 	jr	ra
800015d4:	27bd0028 	addiu	sp,sp,40

800015d8 <ADT7420_Init>:
ADT7420_Init():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:120
* @param  None.
*
* @return None.
******************************************************************************/
void ADT7420_Init(void)
{
800015d8:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:123
	unsigned char txBuffer[1] = { 0x00 };
	
	if(I2C_Init(IIC_BASEADDR, ADT7420_IIC_ADDR))
800015dc:	3c04b0a0 	lui	a0,0xb0a0
800015e0:	2405004b 	li	a1,75
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:120
* @param  None.
*
* @return None.
******************************************************************************/
void ADT7420_Init(void)
{
800015e4:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:123
	unsigned char txBuffer[1] = { 0x00 };
	
	if(I2C_Init(IIC_BASEADDR, ADT7420_IIC_ADDR))
800015e8:	0c000a3f 	jal	800028fc <I2C_Init>
800015ec:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:132
    else
    {
    //    uart_print("AXI IIC Error!\n\r");
    }
	
	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, SOFT_RST_REG, 1, txBuffer);
800015f0:	27a20018 	addiu	v0,sp,24
800015f4:	afa20010 	sw	v0,16(sp)
800015f8:	3c04b0a0 	lui	a0,0xb0a0
800015fc:	2405004b 	li	a1,75
80001600:	2406002f 	li	a2,47
80001604:	0c000a7d 	jal	800029f4 <I2C_Write>
80001608:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:134

	SetAlertModeComparator();
8000160c:	0c000568 	jal	800015a0 <SetAlertModeComparator>
80001610:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:135
}
80001614:	8fbf0024 	lw	ra,36(sp)
80001618:	03e00008 	jr	ra
8000161c:	27bd0028 	addiu	sp,sp,40

80001620 <ADT7420_ReadConfigReg>:
ADT7420_ReadConfigReg():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:160
* @param None.
*
* @return rxBuffer[0] & 0x7F - all bits in the Configuration Register, except RESOLUTION bit
******************************************************************************/
char ADT7420_ReadConfigReg(void)
{
80001620:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:163
	unsigned char rxBuffer[1] = {0x00};

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
80001624:	27a20018 	addiu	v0,sp,24
80001628:	3c04b0a0 	lui	a0,0xb0a0
8000162c:	afa20010 	sw	v0,16(sp)
80001630:	2405004b 	li	a1,75
80001634:	24060003 	li	a2,3
80001638:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:160
* @param None.
*
* @return rxBuffer[0] & 0x7F - all bits in the Configuration Register, except RESOLUTION bit
******************************************************************************/
char ADT7420_ReadConfigReg(void)
{
8000163c:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:163
	unsigned char rxBuffer[1] = {0x00};

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
80001640:	0c000a49 	jal	80002924 <I2C_Read>
80001644:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:165

	return(rxBuffer[0] & 0x7F);
80001648:	93a20018 	lbu	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:166
}
8000164c:	8fbf0024 	lw	ra,36(sp)
80001650:	27bd0028 	addiu	sp,sp,40
80001654:	03e00008 	jr	ra
80001658:	3042007f 	andi	v0,v0,0x7f

8000165c <ADT7420_PrintID>:
ADT7420_PrintID():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:176
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintID(void)
{
8000165c:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:179
	unsigned char rxBuffer[1] = {0x00};

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, ID_REG, 1, rxBuffer);
80001660:	27a20018 	addiu	v0,sp,24
80001664:	2405004b 	li	a1,75
80001668:	2406000b 	li	a2,11
8000166c:	24070001 	li	a3,1
80001670:	3c04b0a0 	lui	a0,0xb0a0
80001674:	afa20010 	sw	v0,16(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:176
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintID(void)
{
80001678:	afbf0024 	sw	ra,36(sp)
8000167c:	afb00020 	sw	s0,32(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:179
	unsigned char rxBuffer[1] = {0x00};

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, ID_REG, 1, rxBuffer);
80001680:	0c000a49 	jal	80002924 <I2C_Read>
80001684:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:181

	uart_print("Revision ID = ");
80001688:	3c048000 	lui	a0,0x8000
8000168c:	0c0004b4 	jal	800012d0 <uart_print>
80001690:	24842f14 	addiu	a0,a0,12052
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:182
	uart_print(my_itoa(rxBuffer[0] & REVISION_ID));
80001694:	93a40018 	lbu	a0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:183
	uart_print("\n\r");
80001698:	3c108000 	lui	s0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:182
	unsigned char rxBuffer[1] = {0x00};

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, ID_REG, 1, rxBuffer);

	uart_print("Revision ID = ");
	uart_print(my_itoa(rxBuffer[0] & REVISION_ID));
8000169c:	0c000533 	jal	800014cc <my_itoa>
800016a0:	30840007 	andi	a0,a0,0x7
800016a4:	0c0004b4 	jal	800012d0 <uart_print>
800016a8:	00402021 	move	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:183
	uart_print("\n\r");
800016ac:	0c0004b4 	jal	800012d0 <uart_print>
800016b0:	2604361c 	addiu	a0,s0,13852
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:184
	uart_print("Manufacture ID = ");
800016b4:	3c048000 	lui	a0,0x8000
800016b8:	0c0004b4 	jal	800012d0 <uart_print>
800016bc:	24842f24 	addiu	a0,a0,12068
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:185
	uart_print(my_itoa((rxBuffer[0] & MANUFACTURE_ID) >> 3));
800016c0:	93a40018 	lbu	a0,24(sp)
800016c4:	0c000533 	jal	800014cc <my_itoa>
800016c8:	000420c2 	srl	a0,a0,0x3
800016cc:	0c0004b4 	jal	800012d0 <uart_print>
800016d0:	00402021 	move	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:186
	uart_print("\n\r");
800016d4:	0c0004b4 	jal	800012d0 <uart_print>
800016d8:	2604361c 	addiu	a0,s0,13852
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:187
	uart_print("-----------------------------------------\n\r");
800016dc:	3c048000 	lui	a0,0x8000
800016e0:	0c0004b4 	jal	800012d0 <uart_print>
800016e4:	24842f38 	addiu	a0,a0,12088
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:188
}
800016e8:	8fbf0024 	lw	ra,36(sp)
800016ec:	8fb00020 	lw	s0,32(sp)
800016f0:	03e00008 	jr	ra
800016f4:	27bd0028 	addiu	sp,sp,40

800016f8 <ADT7420_DisplayMainMenu>:
ADT7420_DisplayMainMenu():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:199
*
* @return None.
******************************************************************************/
void ADT7420_DisplayMainMenu(void)
{
	uart_print("\n\rADT7420 Demo Program \n\r");
800016f8:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:198
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplayMainMenu(void)
{
800016fc:	27bdffe8 	addiu	sp,sp,-24
80001700:	afbf0014 	sw	ra,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:199
	uart_print("\n\rADT7420 Demo Program \n\r");
80001704:	0c0004b4 	jal	800012d0 <uart_print>
80001708:	24842f64 	addiu	a0,a0,12132
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:201

	ADT7420_PrintID();
8000170c:	0c000597 	jal	8000165c <ADT7420_PrintID>
80001710:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:203

	uart_print("Available options: \n\r");
80001714:	3c048000 	lui	a0,0x8000
80001718:	0c0004b4 	jal	800012d0 <uart_print>
8000171c:	24842f80 	addiu	a0,a0,12160
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:204
	uart_print("	[t] Read Temperature\n\r");
80001720:	3c048000 	lui	a0,0x8000
80001724:	0c0004b4 	jal	800012d0 <uart_print>
80001728:	24842f98 	addiu	a0,a0,12184
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:205
	uart_print("	[r] Set Resolution\n\r");
8000172c:	3c048000 	lui	a0,0x8000
80001730:	0c0004b4 	jal	800012d0 <uart_print>
80001734:	24842fb0 	addiu	a0,a0,12208
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:206
	uart_print("	[h] Set THigh\n\r");
80001738:	3c048000 	lui	a0,0x8000
8000173c:	0c0004b4 	jal	800012d0 <uart_print>
80001740:	24842fc8 	addiu	a0,a0,12232
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:207
	uart_print("	[l] Set TLow\n\r");
80001744:	3c048000 	lui	a0,0x8000
80001748:	0c0004b4 	jal	800012d0 <uart_print>
8000174c:	24842fdc 	addiu	a0,a0,12252
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:208
	uart_print("	[c] Set TCrit\n\r");
80001750:	3c048000 	lui	a0,0x8000
80001754:	0c0004b4 	jal	800012d0 <uart_print>
80001758:	24842fec 	addiu	a0,a0,12268
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:209
	uart_print("	[y] Set THyst\n\r");
8000175c:	3c048000 	lui	a0,0x8000
80001760:	0c0004b4 	jal	800012d0 <uart_print>
80001764:	24843000 	addiu	a0,a0,12288
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:210
	uart_print("	[f] Set Fault Queue\n\r");
80001768:	3c048000 	lui	a0,0x8000
8000176c:	0c0004b4 	jal	800012d0 <uart_print>
80001770:	24843014 	addiu	a0,a0,12308
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:211
	uart_print("	[s] Display Settings \n\r");
80001774:	3c048000 	lui	a0,0x8000
80001778:	0c0004b4 	jal	800012d0 <uart_print>
8000177c:	2484302c 	addiu	a0,a0,12332
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:212
	uart_print("	[m] Stop the program and display this menu\n\r");
80001780:	3c048000 	lui	a0,0x8000
80001784:	0c0004b4 	jal	800012d0 <uart_print>
80001788:	24843048 	addiu	a0,a0,12360
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:213
	uart_print("\n\r");
8000178c:	3c048000 	lui	a0,0x8000
80001790:	0c0004b4 	jal	800012d0 <uart_print>
80001794:	2484361c 	addiu	a0,a0,13852
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:214
	uart_print("Press key to select desired option\n\r");
80001798:	3c048000 	lui	a0,0x8000
8000179c:	0c0004b4 	jal	800012d0 <uart_print>
800017a0:	24843078 	addiu	a0,a0,12408
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:216
	uart_print("Press [q] to exit the application\n\r");
}
800017a4:	8fbf0014 	lw	ra,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:215
	uart_print("	[f] Set Fault Queue\n\r");
	uart_print("	[s] Display Settings \n\r");
	uart_print("	[m] Stop the program and display this menu\n\r");
	uart_print("\n\r");
	uart_print("Press key to select desired option\n\r");
	uart_print("Press [q] to exit the application\n\r");
800017a8:	3c048000 	lui	a0,0x8000
800017ac:	248430a0 	addiu	a0,a0,12448
800017b0:	080004b4 	j	800012d0 <uart_print>
800017b4:	27bd0018 	addiu	sp,sp,24

800017b8 <ADT7420_DisplayMenu>:
ADT7420_DisplayMenu():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:227
*
* @return None.
******************************************************************************/
void ADT7420_DisplayMenu(void)
{
	uart_print("\n\rAvailable options: \n\r");
800017b8:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:226
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplayMenu(void)
{
800017bc:	27bdffe8 	addiu	sp,sp,-24
800017c0:	afbf0014 	sw	ra,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:227
	uart_print("\n\rAvailable options: \n\r");
800017c4:	0c0004b4 	jal	800012d0 <uart_print>
800017c8:	248430c4 	addiu	a0,a0,12484
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:228
	uart_print("	[t] Read Temperature\n\r");
800017cc:	3c048000 	lui	a0,0x8000
800017d0:	0c0004b4 	jal	800012d0 <uart_print>
800017d4:	24842f98 	addiu	a0,a0,12184
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:229
	uart_print("	[r] Set Resolution\n\r");
800017d8:	3c048000 	lui	a0,0x8000
800017dc:	0c0004b4 	jal	800012d0 <uart_print>
800017e0:	24842fb0 	addiu	a0,a0,12208
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:230
	uart_print("	[h] Set THigh\n\r");
800017e4:	3c048000 	lui	a0,0x8000
800017e8:	0c0004b4 	jal	800012d0 <uart_print>
800017ec:	24842fc8 	addiu	a0,a0,12232
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:231
	uart_print("	[l] Set TLow\n\r");
800017f0:	3c048000 	lui	a0,0x8000
800017f4:	0c0004b4 	jal	800012d0 <uart_print>
800017f8:	24842fdc 	addiu	a0,a0,12252
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:232
	uart_print("	[c] Set TCrit\n\r");
800017fc:	3c048000 	lui	a0,0x8000
80001800:	0c0004b4 	jal	800012d0 <uart_print>
80001804:	24842fec 	addiu	a0,a0,12268
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:233
	uart_print("	[y] Set THyst\n\r");
80001808:	3c048000 	lui	a0,0x8000
8000180c:	0c0004b4 	jal	800012d0 <uart_print>
80001810:	24843000 	addiu	a0,a0,12288
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:234
	uart_print("	[f] Set Fault Queue\n\r");
80001814:	3c048000 	lui	a0,0x8000
80001818:	0c0004b4 	jal	800012d0 <uart_print>
8000181c:	24843014 	addiu	a0,a0,12308
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:235
	uart_print("	[s] Display Settings \n\r");
80001820:	3c048000 	lui	a0,0x8000
80001824:	0c0004b4 	jal	800012d0 <uart_print>
80001828:	2484302c 	addiu	a0,a0,12332
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:236
	uart_print("	[m] Stop the program and display this menu\n\r");
8000182c:	3c048000 	lui	a0,0x8000
80001830:	0c0004b4 	jal	800012d0 <uart_print>
80001834:	24843048 	addiu	a0,a0,12360
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:240


	rxData = 0;
}
80001838:	8fbf0014 	lw	ra,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:239
	uart_print("	[f] Set Fault Queue\n\r");
	uart_print("	[s] Display Settings \n\r");
	uart_print("	[m] Stop the program and display this menu\n\r");


	rxData = 0;
8000183c:	af80800c 	sw	zero,-32756(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:240
}
80001840:	03e00008 	jr	ra
80001844:	27bd0018 	addiu	sp,sp,24

80001848 <ADT7420_GetResolution>:
ADT7420_GetResolution():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:253
* @return (rxBuffer[0] & (1 << RESOLUTION)) - bit 7 of CONFIGURATION REGISTER
* 				 - 0 -> resolution is 13 bits
* 				 - 1 -> resolution is 16 bits.
******************************************************************************/
unsigned char ADT7420_GetResolution(char display)
{
80001848:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:255
	unsigned char rxBuffer[2] = {0x00, 0x00};
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
8000184c:	27a20018 	addiu	v0,sp,24
80001850:	2405004b 	li	a1,75
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:253
* @return (rxBuffer[0] & (1 << RESOLUTION)) - bit 7 of CONFIGURATION REGISTER
* 				 - 0 -> resolution is 13 bits
* 				 - 1 -> resolution is 16 bits.
******************************************************************************/
unsigned char ADT7420_GetResolution(char display)
{
80001854:	afb00020 	sw	s0,32(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:255
	unsigned char rxBuffer[2] = {0x00, 0x00};
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
80001858:	afa20010 	sw	v0,16(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:253
* @return (rxBuffer[0] & (1 << RESOLUTION)) - bit 7 of CONFIGURATION REGISTER
* 				 - 0 -> resolution is 13 bits
* 				 - 1 -> resolution is 16 bits.
******************************************************************************/
unsigned char ADT7420_GetResolution(char display)
{
8000185c:	309000ff 	andi	s0,a0,0xff
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:255
	unsigned char rxBuffer[2] = {0x00, 0x00};
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
80001860:	24060003 	li	a2,3
80001864:	3c04b0a0 	lui	a0,0xb0a0
80001868:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:253
* @return (rxBuffer[0] & (1 << RESOLUTION)) - bit 7 of CONFIGURATION REGISTER
* 				 - 0 -> resolution is 13 bits
* 				 - 1 -> resolution is 16 bits.
******************************************************************************/
unsigned char ADT7420_GetResolution(char display)
{
8000186c:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:254
	unsigned char rxBuffer[2] = {0x00, 0x00};
80001870:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:255
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
80001874:	0c000a49 	jal	80002924 <I2C_Read>
80001878:	a3a00019 	sb	zero,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:257

	if(display == 1)
8000187c:	24020001 	li	v0,1
80001880:	12020006 	beq	s0,v0,8000189c <ADT7420_GetResolution+0x54>
80001884:	93a20018 	lbu	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:270
			uart_print("Resolution is 16 bits (0.0078 C/LSB)\n\r");
		}
	}

	return (rxBuffer[0] & (1 << RESOLUTION));
}
80001888:	8fbf0024 	lw	ra,36(sp)
8000188c:	8fb00020 	lw	s0,32(sp)
80001890:	30420080 	andi	v0,v0,0x80
80001894:	03e00008 	jr	ra
80001898:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:259
	unsigned char rxBuffer[2] = {0x00, 0x00};
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);

	if(display == 1)
	{
		if((rxBuffer[0] & (1 << RESOLUTION)) == 0)
8000189c:	83a20018 	lb	v0,24(sp)
800018a0:	0442000a 	bltzl	v0,800018cc <ADT7420_GetResolution+0x84>
800018a4:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:261
		{
			uart_print("Resolution is 13 bits (0.0625 C/LSB)\n\r");
800018a8:	3c048000 	lui	a0,0x8000
800018ac:	0c0004b4 	jal	800012d0 <uart_print>
800018b0:	248430dc 	addiu	a0,a0,12508
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:269
		{
			uart_print("Resolution is 16 bits (0.0078 C/LSB)\n\r");
		}
	}

	return (rxBuffer[0] & (1 << RESOLUTION));
800018b4:	93a20018 	lbu	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:270
}
800018b8:	8fbf0024 	lw	ra,36(sp)
800018bc:	8fb00020 	lw	s0,32(sp)
800018c0:	30420080 	andi	v0,v0,0x80
800018c4:	03e00008 	jr	ra
800018c8:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:265
		{
			uart_print("Resolution is 13 bits (0.0625 C/LSB)\n\r");
		}
		else
		{
			uart_print("Resolution is 16 bits (0.0078 C/LSB)\n\r");
800018cc:	0c0004b4 	jal	800012d0 <uart_print>
800018d0:	24843104 	addiu	a0,a0,12548
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:269
		}
	}

	return (rxBuffer[0] & (1 << RESOLUTION));
800018d4:	93a20018 	lbu	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:270
}
800018d8:	8fbf0024 	lw	ra,36(sp)
800018dc:	8fb00020 	lw	s0,32(sp)
800018e0:	30420080 	andi	v0,v0,0x80
800018e4:	03e00008 	jr	ra
800018e8:	27bd0028 	addiu	sp,sp,40

800018ec <ADT7420_DisplayResolutionMenu>:
ADT7420_DisplayResolutionMenu():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:281
*
* @return None.
******************************************************************************/
void ADT7420_DisplayResolutionMenu(void)
{
	uart_print("\n\r>Set Resolution Menu\n\r");
800018ec:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:280
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplayResolutionMenu(void)
{
800018f0:	27bdffe8 	addiu	sp,sp,-24
800018f4:	afbf0014 	sw	ra,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:281
	uart_print("\n\r>Set Resolution Menu\n\r");
800018f8:	0c0004b4 	jal	800012d0 <uart_print>
800018fc:	2484312c 	addiu	a0,a0,12588
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:282
	uart_print("-----------------------------------------\n\r");
80001900:	3c048000 	lui	a0,0x8000
80001904:	0c0004b4 	jal	800012d0 <uart_print>
80001908:	24842f38 	addiu	a0,a0,12088
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:283
	uart_print("Possible resolutions are:\n\r");
8000190c:	3c048000 	lui	a0,0x8000
80001910:	0c0004b4 	jal	800012d0 <uart_print>
80001914:	24843148 	addiu	a0,a0,12616
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:284
	uart_print("	1. 13 bits (0.0625 C/LSB):\n\r");
80001918:	3c048000 	lui	a0,0x8000
8000191c:	0c0004b4 	jal	800012d0 <uart_print>
80001920:	24843164 	addiu	a0,a0,12644
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:286
	uart_print("	2. 16 bits (0.0078 C/LSB):\n\r");
}
80001924:	8fbf0014 	lw	ra,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:285
{
	uart_print("\n\r>Set Resolution Menu\n\r");
	uart_print("-----------------------------------------\n\r");
	uart_print("Possible resolutions are:\n\r");
	uart_print("	1. 13 bits (0.0625 C/LSB):\n\r");
	uart_print("	2. 16 bits (0.0078 C/LSB):\n\r");
80001928:	3c048000 	lui	a0,0x8000
8000192c:	24843184 	addiu	a0,a0,12676
80001930:	080004b4 	j	800012d0 <uart_print>
80001934:	27bd0018 	addiu	sp,sp,24

80001938 <ADT7420_SetResolution>:
ADT7420_SetResolution():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:296
* @param None
*
* @return None
******************************************************************************/
void ADT7420_SetResolution(void)
{
80001938:	27bdffd8 	addiu	sp,sp,-40
8000193c:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:300
	unsigned char txBuffer[1] = { 0x00 };
	char          rx          = 0;

	ADT7420_DisplayResolutionMenu();
80001940:	0c00063b 	jal	800018ec <ADT7420_DisplayResolutionMenu>
80001944:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:304

	// Check if data is available on the UART
	// Store and display received data
	rx = uart_inbyte();
80001948:	0c00048c 	jal	80001230 <uart_inbyte>
8000194c:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:306

	switch (rx)
80001950:	24030031 	li	v1,49
80001954:	10430029 	beq	v0,v1,800019fc <ADT7420_SetResolution+0xc4>
80001958:	24030032 	li	v1,50
8000195c:	1043000d 	beq	v0,v1,80001994 <ADT7420_SetResolution+0x5c>
80001960:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:323
			TUpper = 0xFFFF;
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		default:
			uart_print("Wrong option!\n\r");
80001964:	0c0004b4 	jal	800012d0 <uart_print>
80001968:	248431c4 	addiu	a0,a0,12740
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:327
			break;
		}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, txBuffer);
8000196c:	27a20018 	addiu	v0,sp,24
80001970:	afa20010 	sw	v0,16(sp)
80001974:	3c04b0a0 	lui	a0,0xb0a0
80001978:	2405004b 	li	a1,75
8000197c:	24060003 	li	a2,3
80001980:	0c000a7d 	jal	800029f4 <I2C_Write>
80001984:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:328
}
80001988:	8fbf0024 	lw	ra,36(sp)
8000198c:	03e00008 	jr	ra
80001990:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:316
			TUpper = 0x1FFF;
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '2' :
			txBuffer[0] = (1 << RESOLUTION) | ADT7420_ReadConfigReg();
80001994:	0c000588 	jal	80001620 <ADT7420_ReadConfigReg>
80001998:	00000000 	nop
8000199c:	2403ff80 	li	v1,-128
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:317
			uart_print("Resolution is 16 bits (0.0078 C/LSB)\n\r");
800019a0:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:316
			TUpper = 0x1FFF;
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '2' :
			txBuffer[0] = (1 << RESOLUTION) | ADT7420_ReadConfigReg();
800019a4:	00431025 	or	v0,v0,v1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:317
			uart_print("Resolution is 16 bits (0.0078 C/LSB)\n\r");
800019a8:	24843104 	addiu	a0,a0,12548
800019ac:	0c0004b4 	jal	800012d0 <uart_print>
800019b0:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:318
			TUpper = 0xFFFF;
800019b4:	3402ffff 	li	v0,0xffff
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:320
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
800019b8:	3c048000 	lui	a0,0x8000
800019bc:	248431a4 	addiu	a0,a0,12708
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:318
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '2' :
			txBuffer[0] = (1 << RESOLUTION) | ADT7420_ReadConfigReg();
			uart_print("Resolution is 16 bits (0.0078 C/LSB)\n\r");
			TUpper = 0xFFFF;
800019c0:	af828000 	sw	v0,-32768(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:319
			rxData = 'm';
800019c4:	2402006d 	li	v0,109
800019c8:	af82800c 	sw	v0,-32756(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:320
			uart_print("\n\r>Returning to Main Menu...\n\r");
800019cc:	0c0004b4 	jal	800012d0 <uart_print>
800019d0:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:327
		default:
			uart_print("Wrong option!\n\r");
			break;
		}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, txBuffer);
800019d4:	27a20018 	addiu	v0,sp,24
800019d8:	afa20010 	sw	v0,16(sp)
800019dc:	3c04b0a0 	lui	a0,0xb0a0
800019e0:	2405004b 	li	a1,75
800019e4:	24060003 	li	a2,3
800019e8:	0c000a7d 	jal	800029f4 <I2C_Write>
800019ec:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:328
}
800019f0:	8fbf0024 	lw	ra,36(sp)
800019f4:	03e00008 	jr	ra
800019f8:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:309
	rx = uart_inbyte();

	switch (rx)
		{
		case '1' :
			txBuffer[0] = (0 << RESOLUTION) | ADT7420_ReadConfigReg() ; // so as not to change other configuration parameters
800019fc:	0c000588 	jal	80001620 <ADT7420_ReadConfigReg>
80001a00:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:310
			uart_print("Resolution is 13 bits (0.0625 C/LSB)\n\r");
80001a04:	3c048000 	lui	a0,0x8000
80001a08:	248430dc 	addiu	a0,a0,12508
80001a0c:	0c0004b4 	jal	800012d0 <uart_print>
80001a10:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:311
			TUpper = 0x1FFF;
80001a14:	24021fff 	li	v0,8191
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:313
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
80001a18:	3c048000 	lui	a0,0x8000
80001a1c:	248431a4 	addiu	a0,a0,12708
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:311
	switch (rx)
		{
		case '1' :
			txBuffer[0] = (0 << RESOLUTION) | ADT7420_ReadConfigReg() ; // so as not to change other configuration parameters
			uart_print("Resolution is 13 bits (0.0625 C/LSB)\n\r");
			TUpper = 0x1FFF;
80001a20:	af828000 	sw	v0,-32768(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:312
			rxData = 'm';
80001a24:	2402006d 	li	v0,109
80001a28:	af82800c 	sw	v0,-32756(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:313
			uart_print("\n\r>Returning to Main Menu...\n\r");
80001a2c:	0c0004b4 	jal	800012d0 <uart_print>
80001a30:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:327
		default:
			uart_print("Wrong option!\n\r");
			break;
		}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, txBuffer);
80001a34:	27a20018 	addiu	v0,sp,24
80001a38:	afa20010 	sw	v0,16(sp)
80001a3c:	3c04b0a0 	lui	a0,0xb0a0
80001a40:	2405004b 	li	a1,75
80001a44:	24060003 	li	a2,3
80001a48:	0c000a7d 	jal	800029f4 <I2C_Write>
80001a4c:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:328
}
80001a50:	8fbf0024 	lw	ra,36(sp)
80001a54:	03e00008 	jr	ra
80001a58:	27bd0028 	addiu	sp,sp,40

80001a5c <ADT7420_ReadTemp>:
ADT7420_ReadTemp():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:338
* @param None.
*
* @return data - value read from the Temperature MSB and LSB registers.
******************************************************************************/
int ADT7420_ReadTemp(void)
{
80001a5c:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:342
	unsigned char rxBuffer[2]  = {0x00,0x00};
	int           data         = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TEMP_REG, 2, rxBuffer);
80001a60:	27a20018 	addiu	v0,sp,24
80001a64:	3c04b0a0 	lui	a0,0xb0a0
80001a68:	afa20010 	sw	v0,16(sp)
80001a6c:	2405004b 	li	a1,75
80001a70:	00003021 	move	a2,zero
80001a74:	24070002 	li	a3,2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:338
* @param None.
*
* @return data - value read from the Temperature MSB and LSB registers.
******************************************************************************/
int ADT7420_ReadTemp(void)
{
80001a78:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:339
	unsigned char rxBuffer[2]  = {0x00,0x00};
80001a7c:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:342
	int           data         = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TEMP_REG, 2, rxBuffer);
80001a80:	0c000a49 	jal	80002924 <I2C_Read>
80001a84:	a3a00019 	sb	zero,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:344

	if(ADT7420_GetResolution(0) == 0)
80001a88:	0c000612 	jal	80001848 <ADT7420_GetResolution>
80001a8c:	00002021 	move	a0,zero
80001a90:	10400007 	beqz	v0,80001ab0 <ADT7420_ReadTemp+0x54>
80001a94:	93a20018 	lbu	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:350
	{
		data = (rxBuffer[0] << 5) | (rxBuffer[1] >> 3);
	}
	else
	{
		data = (rxBuffer[0] << 8) | (rxBuffer[1]);
80001a98:	93a30019 	lbu	v1,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:354
	}

	return (data);
}
80001a9c:	8fbf0024 	lw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:350
	{
		data = (rxBuffer[0] << 5) | (rxBuffer[1] >> 3);
	}
	else
	{
		data = (rxBuffer[0] << 8) | (rxBuffer[1]);
80001aa0:	00021200 	sll	v0,v0,0x8
80001aa4:	00431025 	or	v0,v0,v1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:354
	}

	return (data);
}
80001aa8:	03e00008 	jr	ra
80001aac:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:346

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TEMP_REG, 2, rxBuffer);

	if(ADT7420_GetResolution(0) == 0)
	{
		data = (rxBuffer[0] << 5) | (rxBuffer[1] >> 3);
80001ab0:	93a20019 	lbu	v0,25(sp)
80001ab4:	93a40018 	lbu	a0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:354
	{
		data = (rxBuffer[0] << 8) | (rxBuffer[1]);
	}

	return (data);
}
80001ab8:	8fbf0024 	lw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:346

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TEMP_REG, 2, rxBuffer);

	if(ADT7420_GetResolution(0) == 0)
	{
		data = (rxBuffer[0] << 5) | (rxBuffer[1] >> 3);
80001abc:	000218c2 	srl	v1,v0,0x3
80001ac0:	00041140 	sll	v0,a0,0x5
80001ac4:	00621025 	or	v0,v1,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:354
	{
		data = (rxBuffer[0] << 8) | (rxBuffer[1]);
	}

	return (data);
}
80001ac8:	03e00008 	jr	ra
80001acc:	27bd0028 	addiu	sp,sp,40

80001ad0 <Display_Temp>:
Display_Temp():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:366
* @return None.
******************************************************************************/


void Display_Temp(short int data)
{
80001ad0:	27bdffe0 	addiu	sp,sp,-32
80001ad4:	afb10018 	sw	s1,24(sp)
80001ad8:	7c048e20 	seh	s1,a0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:369
	int     value     = 0;
	// converting data for display
	if(ADT7420_GetResolution(0) == 0)
80001adc:	00002021 	move	a0,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:366
* @return None.
******************************************************************************/


void Display_Temp(short int data)
{
80001ae0:	afbf001c 	sw	ra,28(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:369
	int     value     = 0;
	// converting data for display
	if(ADT7420_GetResolution(0) == 0)
80001ae4:	0c000612 	jal	80001848 <ADT7420_GetResolution>
80001ae8:	afb00014 	sw	s0,20(sp)
80001aec:	14400031 	bnez	v0,80001bb4 <Display_Temp+0xe4>
80001af0:	00118080 	sll	s0,s1,0x2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:371
	{
		if(data & 0x1000)
80001af4:	3222ffff 	andi	v0,s1,0xffff
80001af8:	30431000 	andi	v1,v0,0x1000
80001afc:	5460003c 	bnezl	v1,80001bf0 <Display_Temp+0x120>
80001b00:	2411e000 	li	s1,-8192
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:375
		{
			data = data	| 0xffffe000;
		}
		value = (100 * data) / 16;
80001b04:	00118080 	sll	s0,s1,0x2
80001b08:	00118900 	sll	s1,s1,0x4
80001b0c:	02118821 	addu	s1,s0,s1
80001b10:	00118080 	sll	s0,s1,0x2
80001b14:	02308821 	addu	s1,s1,s0
80001b18:	2630000f 	addiu	s0,s1,15
80001b1c:	2a220000 	slti	v0,s1,0
80001b20:	0222800a 	movz	s0,s1,v0
80001b24:	00108103 	sra	s0,s0,0x4
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:382
	else
	{
		value = (100 * data) / 128;
	}

	if(value >= 0)
80001b28:	0602002d 	bltzl	s0,80001be0 <Display_Temp+0x110>
80001b2c:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:384
	{
	    uart_print("T");
80001b30:	3c048000 	lui	a0,0x8000
80001b34:	0c0004b4 	jal	800012d0 <uart_print>
80001b38:	248431d4 	addiu	a0,a0,12756
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:395
	else
	{
		value = value * (-1);

		uart_print("T-");
		uart_print(my_itoa(value / 100));
80001b3c:	3c0251eb 	lui	v0,0x51eb
80001b40:	3442851f 	ori	v0,v0,0x851f
80001b44:	02020018 	mult	s0,v0
80001b48:	00108fc3 	sra	s1,s0,0x1f
80001b4c:	00001010 	mfhi	v0
80001b50:	00021143 	sra	v0,v0,0x5
80001b54:	00518823 	subu	s1,v0,s1
80001b58:	0c000533 	jal	800014cc <my_itoa>
80001b5c:	02202021 	move	a0,s1
80001b60:	0c0004b4 	jal	800012d0 <uart_print>
80001b64:	00402021 	move	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:396
		uart_print(".");
80001b68:	3c048000 	lui	a0,0x8000
80001b6c:	0c0004b4 	jal	800012d0 <uart_print>
80001b70:	248431d8 	addiu	a0,a0,12760
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:397
		uart_print(my_itoa(value % 100));
80001b74:	00112080 	sll	a0,s1,0x2
80001b78:	00118900 	sll	s1,s1,0x4
80001b7c:	00918821 	addu	s1,a0,s1
80001b80:	00112080 	sll	a0,s1,0x2
80001b84:	02242021 	addu	a0,s1,a0
80001b88:	0c000533 	jal	800014cc <my_itoa>
80001b8c:	02042023 	subu	a0,s0,a0
80001b90:	0c0004b4 	jal	800012d0 <uart_print>
80001b94:	00402021 	move	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:400
		uart_print("\n");
	}
}
80001b98:	8fbf001c 	lw	ra,28(sp)
80001b9c:	8fb10018 	lw	s1,24(sp)
80001ba0:	8fb00014 	lw	s0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:398

		uart_print("T-");
		uart_print(my_itoa(value / 100));
		uart_print(".");
		uart_print(my_itoa(value % 100));
		uart_print("\n");
80001ba4:	3c048000 	lui	a0,0x8000
80001ba8:	248431dc 	addiu	a0,a0,12764
80001bac:	080004b4 	j	800012d0 <uart_print>
80001bb0:	27bd0020 	addiu	sp,sp,32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:379
		}
		value = (100 * data) / 16;
	}
	else
	{
		value = (100 * data) / 128;
80001bb4:	00118900 	sll	s1,s1,0x4
80001bb8:	02118821 	addu	s1,s0,s1
80001bbc:	00118080 	sll	s0,s1,0x2
80001bc0:	02308821 	addu	s1,s1,s0
80001bc4:	2630007f 	addiu	s0,s1,127
80001bc8:	2a220000 	slti	v0,s1,0
80001bcc:	0222800a 	movz	s0,s1,v0
80001bd0:	001081c3 	sra	s0,s0,0x7
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:382
	}

	if(value >= 0)
80001bd4:	0603ffd7 	bgezl	s0,80001b34 <Display_Temp+0x64>
80001bd8:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:394
	}
	else
	{
		value = value * (-1);

		uart_print("T-");
80001bdc:	3c048000 	lui	a0,0x8000
80001be0:	0c0004b4 	jal	800012d0 <uart_print>
80001be4:	248431e0 	addiu	a0,a0,12768
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:392
		uart_print(my_itoa(value % 100));
		uart_print("\n");
	}
	else
	{
		value = value * (-1);
80001be8:	1000ffd4 	b	80001b3c <Display_Temp+0x6c>
80001bec:	00108023 	negu	s0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:373
	// converting data for display
	if(ADT7420_GetResolution(0) == 0)
	{
		if(data & 0x1000)
		{
			data = data	| 0xffffe000;
80001bf0:	00518825 	or	s1,v0,s1
80001bf4:	1000ffc3 	b	80001b04 <Display_Temp+0x34>
80001bf8:	7c118e20 	seh	s1,s1

80001bfc <ADT7420_ConsoleRead>:
ADT7420_ConsoleRead():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:413
* 			0 	-> characters read are not hex values.
******************************************************************************/
int ADT7420_ConsoleRead(void)
{
	char rx    = 0;
	char c[4]  = "0000";
80001bfc:	3c023030 	lui	v0,0x3030
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:411
*
* @return value -> data converted to hex value
* 			0 	-> characters read are not hex values.
******************************************************************************/
int ADT7420_ConsoleRead(void)
{
80001c00:	27bdffc8 	addiu	sp,sp,-56
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:413
	char rx    = 0;
	char c[4]  = "0000";
80001c04:	24423030 	addiu	v0,v0,12336
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:421
	char cnt   = 0;
	int  value = 0;

	cnt   = 0;
	i     = 0;
	valid = 0;
80001c08:	a3808010 	sb	zero,-32752(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:411
*
* @return value -> data converted to hex value
* 			0 	-> characters read are not hex values.
******************************************************************************/
int ADT7420_ConsoleRead(void)
{
80001c0c:	afb60030 	sw	s6,48(sp)
80001c10:	afb5002c 	sw	s5,44(sp)
80001c14:	afb40028 	sw	s4,40(sp)
80001c18:	afb30024 	sw	s3,36(sp)
80001c1c:	afb20020 	sw	s2,32(sp)
80001c20:	afb1001c 	sw	s1,28(sp)
80001c24:	afbf0034 	sw	ra,52(sp)
80001c28:	afb00018 	sw	s0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:413
	char rx    = 0;
	char c[4]  = "0000";
80001c2c:	afa20010 	sw	v0,16(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:419
	char *c_ptr;
	int  i     = 0;
	char cnt   = 0;
	int  value = 0;

	cnt   = 0;
80001c30:	00008821 	move	s1,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:423
	i     = 0;
	valid = 0;
	value = 0;
	c_ptr = c;
80001c34:	27b40010 	addiu	s4,sp,16
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:433
		// Store and display received data
		rx = uart_inbyte();
		uart_print(my_itoa(rx));
		
		// Check if pressed key is [Enter]
		if(rx == 0x0D)
80001c38:	2412000d 	li	s2,13
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:437
		{
			i = 5;
		}
		else if(rx == 0x0A)
80001c3c:	2413000a 	li	s3,10
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:454
		}
		else
		{
			*c_ptr++ = rx;
			cnt = cnt + 1;
			valid = 1;
80001c40:	24160001 	li	s6,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:456
		}
		if(cnt == 4)
80001c44:	24150004 	li	s5,4
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:429

	while(i < 6)
	{
		// Check if data is available on the UART
		// Store and display received data
		rx = uart_inbyte();
80001c48:	0c00048c 	jal	80001230 <uart_inbyte>
80001c4c:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:430
		uart_print(my_itoa(rx));
80001c50:	00402021 	move	a0,v0
80001c54:	0c000533 	jal	800014cc <my_itoa>
80001c58:	00408021 	move	s0,v0
80001c5c:	0c0004b4 	jal	800012d0 <uart_print>
80001c60:	00402021 	move	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:441
		}
		else if(rx == 0x0A)
		{
			i = 5;
		}
		else if(((rx > 0x00)&&(rx < 0x30))|| // Not 0 - 9
80001c64:	2602ffff 	addiu	v0,s0,-1
80001c68:	304200ff 	andi	v0,v0,0xff
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:433
		// Store and display received data
		rx = uart_inbyte();
		uart_print(my_itoa(rx));
		
		// Check if pressed key is [Enter]
		if(rx == 0x0D)
80001c6c:	12120012 	beq	s0,s2,80001cb8 <ADT7420_ConsoleRead+0xbc>
80001c70:	2c42002f 	sltiu	v0,v0,47
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:442
		else if(rx == 0x0A)
		{
			i = 5;
		}
		else if(((rx > 0x00)&&(rx < 0x30))|| // Not 0 - 9
				((rx > 0x39)&&(rx < 0x41))|| // Not A - F
80001c74:	2603ffc6 	addiu	v1,s0,-58
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:441
		}
		else if(rx == 0x0A)
		{
			i = 5;
		}
		else if(((rx > 0x00)&&(rx < 0x30))|| // Not 0 - 9
80001c78:	306300ff 	andi	v1,v1,0xff
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:437
		// Check if pressed key is [Enter]
		if(rx == 0x0D)
		{
			i = 5;
		}
		else if(rx == 0x0A)
80001c7c:	1213000e 	beq	s0,s3,80001cb8 <ADT7420_ConsoleRead+0xbc>
80001c80:	2c630007 	sltiu	v1,v1,7
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:441
		{
			i = 5;
		}
		else if(((rx > 0x00)&&(rx < 0x30))|| // Not 0 - 9
80001c84:	14400008 	bnez	v0,80001ca8 <ADT7420_ConsoleRead+0xac>
80001c88:	2602ffb9 	addiu	v0,s0,-71
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:442 (discriminator 1)
				((rx > 0x39)&&(rx < 0x41))|| // Not A - F
80001c8c:	304200ff 	andi	v0,v0,0xff
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:441 (discriminator 1)
		}
		else if(rx == 0x0A)
		{
			i = 5;
		}
		else if(((rx > 0x00)&&(rx < 0x30))|| // Not 0 - 9
80001c90:	14600005 	bnez	v1,80001ca8 <ADT7420_ConsoleRead+0xac>
80001c94:	2c42001a 	sltiu	v0,v0,26
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:442
				((rx > 0x39)&&(rx < 0x41))|| // Not A - F
80001c98:	14400003 	bnez	v0,80001ca8 <ADT7420_ConsoleRead+0xac>
80001c9c:	2e030067 	sltiu	v1,s0,103
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:443
				((rx > 0x46)&&(rx < 0x61))|| // Not a - f
80001ca0:	14600034 	bnez	v1,80001d74 <ADT7420_ConsoleRead+0x178>
80001ca4:	26220001 	addiu	v0,s1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:446
				(rx > 0x66))
		{
			uart_print("\n\rCharacters entered must be HEX values (0 to 9 and A B C D E F)\n\r");
80001ca8:	3c048000 	lui	a0,0x8000
80001cac:	0c0004b4 	jal	800012d0 <uart_print>
80001cb0:	248431e4 	addiu	a0,a0,12772
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:448
			i = 6;
			valid = 0;
80001cb4:	a3808010 	sb	zero,-32752(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:464
		}
		i++;
	}

	// Translate from ASCII to hex
	for(i = 0; i < cnt; i++)
80001cb8:	1220001a 	beqz	s1,80001d24 <ADT7420_ConsoleRead+0x128>
80001cbc:	93858010 	lbu	a1,-32752(gp)
80001cc0:	27a40010 	addiu	a0,sp,16
80001cc4:	00918821 	addu	s1,a0,s1
80001cc8:	00001021 	move	v0,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:466
	{
		if(c[i] > 0x60)
80001ccc:	90830000 	lbu	v1,0(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:468
		{
			value = value * 16 + (c[i] - 0x57);
80001cd0:	00024900 	sll	t1,v0,0x4
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:466
	}

	// Translate from ASCII to hex
	for(i = 0; i < cnt; i++)
	{
		if(c[i] > 0x60)
80001cd4:	2c660061 	sltiu	a2,v1,97
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:468
		{
			value = value * 16 + (c[i] - 0x57);
80001cd8:	2468ffa9 	addiu	t0,v1,-87
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:466
	}

	// Translate from ASCII to hex
	for(i = 0; i < cnt; i++)
	{
		if(c[i] > 0x60)
80001cdc:	14c0001e 	bnez	a2,80001d58 <ADT7420_ConsoleRead+0x15c>
80001ce0:	2c67003a 	sltiu	a3,v1,58
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:468
		{
			value = value * 16 + (c[i] - 0x57);
80001ce4:	01281021 	addu	v0,t1,t0
80001ce8:	24840001 	addiu	a0,a0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:464 (discriminator 2)
		}
		i++;
	}

	// Translate from ASCII to hex
	for(i = 0; i < cnt; i++)
80001cec:	5491fff8 	bnel	a0,s1,80001cd0 <ADT7420_ConsoleRead+0xd4>
80001cf0:	90830000 	lbu	v1,0(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:488
	}
	else
	{
		return 0;
	}
}
80001cf4:	8fbf0034 	lw	ra,52(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:482
		}
	}

	if(valid == 1)
	{
		return value;
80001cf8:	38a50001 	xori	a1,a1,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:488
	}
	else
	{
		return 0;
	}
}
80001cfc:	8fb60030 	lw	s6,48(sp)
80001d00:	8fb5002c 	lw	s5,44(sp)
80001d04:	8fb40028 	lw	s4,40(sp)
80001d08:	8fb30024 	lw	s3,36(sp)
80001d0c:	8fb20020 	lw	s2,32(sp)
80001d10:	8fb1001c 	lw	s1,28(sp)
80001d14:	8fb00018 	lw	s0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:482
		}
	}

	if(valid == 1)
	{
		return value;
80001d18:	0005100b 	movn	v0,zero,a1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:488
	}
	else
	{
		return 0;
	}
}
80001d1c:	03e00008 	jr	ra
80001d20:	27bd0038 	addiu	sp,sp,56
80001d24:	8fbf0034 	lw	ra,52(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:464
		}
		i++;
	}

	// Translate from ASCII to hex
	for(i = 0; i < cnt; i++)
80001d28:	00001021 	move	v0,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:482
		}
	}

	if(valid == 1)
	{
		return value;
80001d2c:	38a50001 	xori	a1,a1,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:488
	}
	else
	{
		return 0;
	}
}
80001d30:	8fb60030 	lw	s6,48(sp)
80001d34:	8fb5002c 	lw	s5,44(sp)
80001d38:	8fb40028 	lw	s4,40(sp)
80001d3c:	8fb30024 	lw	s3,36(sp)
80001d40:	8fb20020 	lw	s2,32(sp)
80001d44:	8fb1001c 	lw	s1,28(sp)
80001d48:	8fb00018 	lw	s0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:482
		}
	}

	if(valid == 1)
	{
		return value;
80001d4c:	0005100b 	movn	v0,zero,a1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:488
	}
	else
	{
		return 0;
	}
}
80001d50:	03e00008 	jr	ra
80001d54:	27bd0038 	addiu	sp,sp,56
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:472
		{
			value = value * 16 + (c[i] - 0x57);
		}
		else if(c[i] > 0x39)
		{
			value = value * 16 + (c[i] - 0x37);
80001d58:	00024100 	sll	t0,v0,0x4
80001d5c:	2466ffc9 	addiu	a2,v1,-55
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:476
		}
		else
		{
			value = value * 16 + (c[i] - 0x30);
80001d60:	2463ffd0 	addiu	v1,v1,-48
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:470
	{
		if(c[i] > 0x60)
		{
			value = value * 16 + (c[i] - 0x57);
		}
		else if(c[i] > 0x39)
80001d64:	14e0ffe0 	bnez	a3,80001ce8 <ADT7420_ConsoleRead+0xec>
80001d68:	01031021 	addu	v0,t0,v1
80001d6c:	1000ffde 	b	80001ce8 <ADT7420_ConsoleRead+0xec>
80001d70:	01061021 	addu	v0,t0,a2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:453
			valid = 0;
		}
		else
		{
			*c_ptr++ = rx;
			cnt = cnt + 1;
80001d74:	305100ff 	andi	s1,v0,0xff
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:452
			i = 6;
			valid = 0;
		}
		else
		{
			*c_ptr++ = rx;
80001d78:	a2900000 	sb	s0,0(s4)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:456
			cnt = cnt + 1;
			valid = 1;
		}
		if(cnt == 4)
80001d7c:	12350003 	beq	s1,s5,80001d8c <ADT7420_ConsoleRead+0x190>
80001d80:	a3968010 	sb	s6,-32752(gp)
80001d84:	1000ffb0 	b	80001c48 <ADT7420_ConsoleRead+0x4c>
80001d88:	26940001 	addiu	s4,s4,1
80001d8c:	1000ffcc 	b	80001cc0 <ADT7420_ConsoleRead+0xc4>
80001d90:	24050001 	li	a1,1

80001d94 <ADT7420_SetTHigh>:
ADT7420_SetTHigh():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:531
* @param THigh - value to be placed in the register.
*
* @return None.
******************************************************************************/
void ADT7420_SetTHigh(int THigh)
{
80001d94:	27bdffd8 	addiu	sp,sp,-40
80001d98:	afb00020 	sw	s0,32(sp)
80001d9c:	00808021 	move	s0,a0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:534
	unsigned char txBuffer[2] = {0x00, 0x00};

	if(ADT7420_GetResolution(0) == 0)
80001da0:	00002021 	move	a0,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:531
* @param THigh - value to be placed in the register.
*
* @return None.
******************************************************************************/
void ADT7420_SetTHigh(int THigh)
{
80001da4:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:532
	unsigned char txBuffer[2] = {0x00, 0x00};
80001da8:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:534

	if(ADT7420_GetResolution(0) == 0)
80001dac:	0c000612 	jal	80001848 <ADT7420_GetResolution>
80001db0:	a3a00019 	sb	zero,25(sp)
80001db4:	1040000e 	beqz	v0,80001df0 <ADT7420_SetTHigh+0x5c>
80001db8:	7e023a00 	ext	v0,s0,0x8,0x8
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:541
		txBuffer[0] = (THigh & 0x1FE0) >> 5;
		txBuffer[1] = (THigh & 0x001F) << 3;
	}
	else
	{
		txBuffer[0] = (THigh & 0xFF00) >> 8;
80001dbc:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:545
		txBuffer[1] = THigh & 0x00FF;
	}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, TH_SETP_MSB, 2, txBuffer);
80001dc0:	27a20018 	addiu	v0,sp,24
80001dc4:	afa20010 	sw	v0,16(sp)
80001dc8:	3c04b0a0 	lui	a0,0xb0a0
80001dcc:	2405004b 	li	a1,75
80001dd0:	24060004 	li	a2,4
80001dd4:	24070002 	li	a3,2
80001dd8:	0c000a7d 	jal	800029f4 <I2C_Write>
80001ddc:	a3b00019 	sb	s0,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:546
}
80001de0:	8fbf0024 	lw	ra,36(sp)
80001de4:	8fb00020 	lw	s0,32(sp)
80001de8:	03e00008 	jr	ra
80001dec:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:536
{
	unsigned char txBuffer[2] = {0x00, 0x00};

	if(ADT7420_GetResolution(0) == 0)
	{
		txBuffer[0] = (THigh & 0x1FE0) >> 5;
80001df0:	7e023940 	ext	v0,s0,0x5,0x8
80001df4:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:545
	{
		txBuffer[0] = (THigh & 0xFF00) >> 8;
		txBuffer[1] = THigh & 0x00FF;
	}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, TH_SETP_MSB, 2, txBuffer);
80001df8:	27a20018 	addiu	v0,sp,24
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:537
	unsigned char txBuffer[2] = {0x00, 0x00};

	if(ADT7420_GetResolution(0) == 0)
	{
		txBuffer[0] = (THigh & 0x1FE0) >> 5;
		txBuffer[1] = (THigh & 0x001F) << 3;
80001dfc:	001080c0 	sll	s0,s0,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:545
	{
		txBuffer[0] = (THigh & 0xFF00) >> 8;
		txBuffer[1] = THigh & 0x00FF;
	}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, TH_SETP_MSB, 2, txBuffer);
80001e00:	afa20010 	sw	v0,16(sp)
80001e04:	3c04b0a0 	lui	a0,0xb0a0
80001e08:	2405004b 	li	a1,75
80001e0c:	24060004 	li	a2,4
80001e10:	24070002 	li	a3,2
80001e14:	0c000a7d 	jal	800029f4 <I2C_Write>
80001e18:	a3b00019 	sb	s0,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:546
}
80001e1c:	8fbf0024 	lw	ra,36(sp)
80001e20:	8fb00020 	lw	s0,32(sp)
80001e24:	03e00008 	jr	ra
80001e28:	27bd0028 	addiu	sp,sp,40

80001e2c <ADT7420_DisplaySetTHighMenu>:
ADT7420_DisplaySetTHighMenu():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:501
******************************************************************************/
void ADT7420_DisplaySetTHighMenu(void)
{
	int THigh = 0;

	uart_print("\n\r>Set THigh Menu\n\r");
80001e2c:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:498
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplaySetTHighMenu(void)
{
80001e30:	27bdffe0 	addiu	sp,sp,-32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:501
	int THigh = 0;

	uart_print("\n\r>Set THigh Menu\n\r");
80001e34:	24843228 	addiu	a0,a0,12840
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:498
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplaySetTHighMenu(void)
{
80001e38:	afbf001c 	sw	ra,28(sp)
80001e3c:	afb10018 	sw	s1,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:501
	int THigh = 0;

	uart_print("\n\r>Set THigh Menu\n\r");
80001e40:	0c0004b4 	jal	800012d0 <uart_print>
80001e44:	afb00014 	sw	s0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:502
	uart_print("-----------------------------------------\n\r");
80001e48:	3c048000 	lui	a0,0x8000
80001e4c:	0c0004b4 	jal	800012d0 <uart_print>
80001e50:	24842f38 	addiu	a0,a0,12088
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:504

	uart_print("\n\rPlease enter a value between 0x0000 and 0x003C");
80001e54:	3c048000 	lui	a0,0x8000
80001e58:	0c0004b4 	jal	800012d0 <uart_print>
80001e5c:	2484323c 	addiu	a0,a0,12860
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:506

	THigh = ADT7420_ConsoleRead();
80001e60:	0c0006ff 	jal	80001bfc <ADT7420_ConsoleRead>
80001e64:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:508

	while(!((THigh>=0x0000)&(THigh<=0x003C)))
80001e68:	2c43003d 	sltiu	v1,v0,61
80001e6c:	1460000d 	bnez	v1,80001ea4 <ADT7420_DisplaySetTHighMenu+0x78>
80001e70:	3c118000 	lui	s1,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:511
	{
		uart_print("\n\rValue for THigh must be in the range 0x0000 and 0x003C\n\r");
		uart_print("Please enter a valid value: 0x");
80001e74:	3c108000 	lui	s0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:510

	THigh = ADT7420_ConsoleRead();

	while(!((THigh>=0x0000)&(THigh<=0x003C)))
	{
		uart_print("\n\rValue for THigh must be in the range 0x0000 and 0x003C\n\r");
80001e78:	26313270 	addiu	s1,s1,12912
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:511
		uart_print("Please enter a valid value: 0x");
80001e7c:	261032ac 	addiu	s0,s0,12972
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:510

	THigh = ADT7420_ConsoleRead();

	while(!((THigh>=0x0000)&(THigh<=0x003C)))
	{
		uart_print("\n\rValue for THigh must be in the range 0x0000 and 0x003C\n\r");
80001e80:	0c0004b4 	jal	800012d0 <uart_print>
80001e84:	02202021 	move	a0,s1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:511
		uart_print("Please enter a valid value: 0x");
80001e88:	0c0004b4 	jal	800012d0 <uart_print>
80001e8c:	02002021 	move	a0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:512
		THigh = ADT7420_ConsoleRead();
80001e90:	0c0006ff 	jal	80001bfc <ADT7420_ConsoleRead>
80001e94:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:508

	uart_print("\n\rPlease enter a value between 0x0000 and 0x003C");

	THigh = ADT7420_ConsoleRead();

	while(!((THigh>=0x0000)&(THigh<=0x003C)))
80001e98:	2c43003d 	sltiu	v1,v0,61
80001e9c:	1060fff8 	beqz	v1,80001e80 <ADT7420_DisplaySetTHighMenu+0x54>
80001ea0:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:515
		uart_print("\n\rValue for THigh must be in the range 0x0000 and 0x003C\n\r");
		uart_print("Please enter a valid value: 0x");
		THigh = ADT7420_ConsoleRead();
	}

	if(valid == 1)
80001ea4:	93848010 	lbu	a0,-32752(gp)
80001ea8:	24030001 	li	v1,1
80001eac:	10830005 	beq	a0,v1,80001ec4 <ADT7420_DisplaySetTHighMenu+0x98>
80001eb0:	8fbf001c 	lw	ra,28(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:521
	{
		ADT7420_SetTHigh(THigh);
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
	}
}
80001eb4:	8fb10018 	lw	s1,24(sp)
80001eb8:	8fb00014 	lw	s0,20(sp)
80001ebc:	03e00008 	jr	ra
80001ec0:	27bd0020 	addiu	sp,sp,32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:517
		THigh = ADT7420_ConsoleRead();
	}

	if(valid == 1)
	{
		ADT7420_SetTHigh(THigh);
80001ec4:	0c000765 	jal	80001d94 <ADT7420_SetTHigh>
80001ec8:	00402021 	move	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:521
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
	}
}
80001ecc:	8fbf001c 	lw	ra,28(sp)
80001ed0:	8fb10018 	lw	s1,24(sp)
80001ed4:	8fb00014 	lw	s0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:519

	if(valid == 1)
	{
		ADT7420_SetTHigh(THigh);
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
80001ed8:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:518
	}

	if(valid == 1)
	{
		ADT7420_SetTHigh(THigh);
		rxData = 'm';
80001edc:	2402006d 	li	v0,109
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:519
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
80001ee0:	248432cc 	addiu	a0,a0,13004
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:521
	}
}
80001ee4:	27bd0020 	addiu	sp,sp,32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:518
	}

	if(valid == 1)
	{
		ADT7420_SetTHigh(THigh);
		rxData = 'm';
80001ee8:	af82800c 	sw	v0,-32756(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:519
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
80001eec:	080004b4 	j	800012d0 <uart_print>
80001ef0:	00000000 	nop

80001ef4 <ADT7420_PrintTHigh>:
ADT7420_PrintTHigh():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:556
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintTHigh(void)
{
80001ef4:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:560
	unsigned char rxBuffer[2] = {0x00, 0x00};
	int           val         = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TH_SETP_MSB, 2, rxBuffer);
80001ef8:	27a20018 	addiu	v0,sp,24
80001efc:	3c04b0a0 	lui	a0,0xb0a0
80001f00:	afa20010 	sw	v0,16(sp)
80001f04:	2405004b 	li	a1,75
80001f08:	24060004 	li	a2,4
80001f0c:	24070002 	li	a3,2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:556
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintTHigh(void)
{
80001f10:	afbf0024 	sw	ra,36(sp)
80001f14:	afb00020 	sw	s0,32(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:557
	unsigned char rxBuffer[2] = {0x00, 0x00};
80001f18:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:560
	int           val         = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TH_SETP_MSB, 2, rxBuffer);
80001f1c:	0c000a49 	jal	80002924 <I2C_Read>
80001f20:	a3a00019 	sb	zero,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:562

	if(ADT7420_GetResolution(0) == 0)
80001f24:	0c000612 	jal	80001848 <ADT7420_GetResolution>
80001f28:	00002021 	move	a0,zero
80001f2c:	1040000d 	beqz	v0,80001f64 <ADT7420_PrintTHigh+0x70>
80001f30:	93a20018 	lbu	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:565
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
	else
		val = (rxBuffer[0] << 8) | rxBuffer[1];
80001f34:	93b00019 	lbu	s0,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:567

	uart_print("THigh Setpoint ");
80001f38:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:565
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TH_SETP_MSB, 2, rxBuffer);

	if(ADT7420_GetResolution(0) == 0)
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
	else
		val = (rxBuffer[0] << 8) | rxBuffer[1];
80001f3c:	00021200 	sll	v0,v0,0x8
80001f40:	00508025 	or	s0,v0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:567

	uart_print("THigh Setpoint ");
80001f44:	0c0004b4 	jal	800012d0 <uart_print>
80001f48:	248432f0 	addiu	a0,a0,13040
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:568
	Display_Temp(val);
80001f4c:	0c0006b4 	jal	80001ad0 <Display_Temp>
80001f50:	7c102620 	seh	a0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:569
}
80001f54:	8fbf0024 	lw	ra,36(sp)
80001f58:	8fb00020 	lw	s0,32(sp)
80001f5c:	03e00008 	jr	ra
80001f60:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:563
	int           val         = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TH_SETP_MSB, 2, rxBuffer);

	if(ADT7420_GetResolution(0) == 0)
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
80001f64:	93a20019 	lbu	v0,25(sp)
80001f68:	93b00018 	lbu	s0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:567
	else
		val = (rxBuffer[0] << 8) | rxBuffer[1];

	uart_print("THigh Setpoint ");
80001f6c:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:563
	int           val         = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TH_SETP_MSB, 2, rxBuffer);

	if(ADT7420_GetResolution(0) == 0)
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
80001f70:	000210c2 	srl	v0,v0,0x3
80001f74:	00108140 	sll	s0,s0,0x5
80001f78:	00508025 	or	s0,v0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:567
	else
		val = (rxBuffer[0] << 8) | rxBuffer[1];

	uart_print("THigh Setpoint ");
80001f7c:	0c0004b4 	jal	800012d0 <uart_print>
80001f80:	248432f0 	addiu	a0,a0,13040
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:568
	Display_Temp(val);
80001f84:	0c0006b4 	jal	80001ad0 <Display_Temp>
80001f88:	7c102620 	seh	a0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:569
}
80001f8c:	8fbf0024 	lw	ra,36(sp)
80001f90:	8fb00020 	lw	s0,32(sp)
80001f94:	03e00008 	jr	ra
80001f98:	27bd0028 	addiu	sp,sp,40

80001f9c <ADT7420_SetTLow>:
ADT7420_SetTLow():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:611
* @param TLow - value to be placed in the register.
*
* @return None.
******************************************************************************/
void ADT7420_SetTLow(int TLow)
{
80001f9c:	27bdffd8 	addiu	sp,sp,-40
80001fa0:	afb00020 	sw	s0,32(sp)
80001fa4:	00808021 	move	s0,a0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:614
	unsigned char txBuffer[2] = {0x00, 0x00};

	if(ADT7420_GetResolution(0) == 0)
80001fa8:	00002021 	move	a0,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:611
* @param TLow - value to be placed in the register.
*
* @return None.
******************************************************************************/
void ADT7420_SetTLow(int TLow)
{
80001fac:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:612
	unsigned char txBuffer[2] = {0x00, 0x00};
80001fb0:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:614

	if(ADT7420_GetResolution(0) == 0)
80001fb4:	0c000612 	jal	80001848 <ADT7420_GetResolution>
80001fb8:	a3a00019 	sb	zero,25(sp)
80001fbc:	1040000e 	beqz	v0,80001ff8 <ADT7420_SetTLow+0x5c>
80001fc0:	7e023a00 	ext	v0,s0,0x8,0x8
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:621
		txBuffer[0] = (TLow & 0x1FE0) >> 5;
		txBuffer[1] = (TLow & 0x001F) << 3;
	}
	else
	{
		txBuffer[0] = (TLow & 0xFF00) >> 8;
80001fc4:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:625
		txBuffer[1] = TLow & 0x00FF;
	}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, TL_SETP_MSB, 2, txBuffer);
80001fc8:	27a20018 	addiu	v0,sp,24
80001fcc:	afa20010 	sw	v0,16(sp)
80001fd0:	3c04b0a0 	lui	a0,0xb0a0
80001fd4:	2405004b 	li	a1,75
80001fd8:	24060006 	li	a2,6
80001fdc:	24070002 	li	a3,2
80001fe0:	0c000a7d 	jal	800029f4 <I2C_Write>
80001fe4:	a3b00019 	sb	s0,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:626
}
80001fe8:	8fbf0024 	lw	ra,36(sp)
80001fec:	8fb00020 	lw	s0,32(sp)
80001ff0:	03e00008 	jr	ra
80001ff4:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:616
{
	unsigned char txBuffer[2] = {0x00, 0x00};

	if(ADT7420_GetResolution(0) == 0)
	{
		txBuffer[0] = (TLow & 0x1FE0) >> 5;
80001ff8:	7e023940 	ext	v0,s0,0x5,0x8
80001ffc:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:625
	{
		txBuffer[0] = (TLow & 0xFF00) >> 8;
		txBuffer[1] = TLow & 0x00FF;
	}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, TL_SETP_MSB, 2, txBuffer);
80002000:	27a20018 	addiu	v0,sp,24
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:617
	unsigned char txBuffer[2] = {0x00, 0x00};

	if(ADT7420_GetResolution(0) == 0)
	{
		txBuffer[0] = (TLow & 0x1FE0) >> 5;
		txBuffer[1] = (TLow & 0x001F) << 3;
80002004:	001080c0 	sll	s0,s0,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:625
	{
		txBuffer[0] = (TLow & 0xFF00) >> 8;
		txBuffer[1] = TLow & 0x00FF;
	}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, TL_SETP_MSB, 2, txBuffer);
80002008:	afa20010 	sw	v0,16(sp)
8000200c:	3c04b0a0 	lui	a0,0xb0a0
80002010:	2405004b 	li	a1,75
80002014:	24060006 	li	a2,6
80002018:	24070002 	li	a3,2
8000201c:	0c000a7d 	jal	800029f4 <I2C_Write>
80002020:	a3b00019 	sb	s0,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:626
}
80002024:	8fbf0024 	lw	ra,36(sp)
80002028:	8fb00020 	lw	s0,32(sp)
8000202c:	03e00008 	jr	ra
80002030:	27bd0028 	addiu	sp,sp,40

80002034 <ADT7420_DisplaySetTLowMenu>:
ADT7420_DisplaySetTLowMenu():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:582
******************************************************************************/
void ADT7420_DisplaySetTLowMenu(void)
{
	int TLow = 0;

	uart_print("\n\r>Set TLow Menu\n\r");
80002034:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:579
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplaySetTLowMenu(void)
{
80002038:	27bdffe0 	addiu	sp,sp,-32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:582
	int TLow = 0;

	uart_print("\n\r>Set TLow Menu\n\r");
8000203c:	24843300 	addiu	a0,a0,13056
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:579
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplaySetTLowMenu(void)
{
80002040:	afbf001c 	sw	ra,28(sp)
80002044:	afb10018 	sw	s1,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:582
	int TLow = 0;

	uart_print("\n\r>Set TLow Menu\n\r");
80002048:	0c0004b4 	jal	800012d0 <uart_print>
8000204c:	afb00014 	sw	s0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:583
	uart_print("-----------------------------------------\n\r");
80002050:	3c048000 	lui	a0,0x8000
80002054:	0c0004b4 	jal	800012d0 <uart_print>
80002058:	24842f38 	addiu	a0,a0,12088
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:584
	uart_print("\n\rPlease enter a value between 0x0000 and 0x000A");
8000205c:	3c048000 	lui	a0,0x8000
80002060:	0c0004b4 	jal	800012d0 <uart_print>
80002064:	24843314 	addiu	a0,a0,13076
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:586

	TLow = ADT7420_ConsoleRead();
80002068:	0c0006ff 	jal	80001bfc <ADT7420_ConsoleRead>
8000206c:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:588

	while(!((TLow>=0x0000)&(TLow<=0x000A)))
80002070:	2c43000b 	sltiu	v1,v0,11
80002074:	1460000d 	bnez	v1,800020ac <ADT7420_DisplaySetTLowMenu+0x78>
80002078:	3c118000 	lui	s1,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:591
	{
		uart_print("\n\rValue for TLow must be in the range 0x0000 and 0x000A\n\r");
		uart_print("Please enter a valid value: 0x");
8000207c:	3c108000 	lui	s0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:590

	TLow = ADT7420_ConsoleRead();

	while(!((TLow>=0x0000)&(TLow<=0x000A)))
	{
		uart_print("\n\rValue for TLow must be in the range 0x0000 and 0x000A\n\r");
80002080:	26313348 	addiu	s1,s1,13128
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:591
		uart_print("Please enter a valid value: 0x");
80002084:	261032ac 	addiu	s0,s0,12972
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:590

	TLow = ADT7420_ConsoleRead();

	while(!((TLow>=0x0000)&(TLow<=0x000A)))
	{
		uart_print("\n\rValue for TLow must be in the range 0x0000 and 0x000A\n\r");
80002088:	0c0004b4 	jal	800012d0 <uart_print>
8000208c:	02202021 	move	a0,s1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:591
		uart_print("Please enter a valid value: 0x");
80002090:	0c0004b4 	jal	800012d0 <uart_print>
80002094:	02002021 	move	a0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:592
		TLow = ADT7420_ConsoleRead();
80002098:	0c0006ff 	jal	80001bfc <ADT7420_ConsoleRead>
8000209c:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:588
	uart_print("-----------------------------------------\n\r");
	uart_print("\n\rPlease enter a value between 0x0000 and 0x000A");

	TLow = ADT7420_ConsoleRead();

	while(!((TLow>=0x0000)&(TLow<=0x000A)))
800020a0:	2c43000b 	sltiu	v1,v0,11
800020a4:	1060fff8 	beqz	v1,80002088 <ADT7420_DisplaySetTLowMenu+0x54>
800020a8:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:595
		uart_print("\n\rValue for TLow must be in the range 0x0000 and 0x000A\n\r");
		uart_print("Please enter a valid value: 0x");
		TLow = ADT7420_ConsoleRead();
	}

	if(valid == 1)
800020ac:	93848010 	lbu	a0,-32752(gp)
800020b0:	24030001 	li	v1,1
800020b4:	10830005 	beq	a0,v1,800020cc <ADT7420_DisplaySetTLowMenu+0x98>
800020b8:	8fbf001c 	lw	ra,28(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:601
	{
		ADT7420_SetTLow(TLow);
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
	}
}
800020bc:	8fb10018 	lw	s1,24(sp)
800020c0:	8fb00014 	lw	s0,20(sp)
800020c4:	03e00008 	jr	ra
800020c8:	27bd0020 	addiu	sp,sp,32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:597
		TLow = ADT7420_ConsoleRead();
	}

	if(valid == 1)
	{
		ADT7420_SetTLow(TLow);
800020cc:	0c0007e7 	jal	80001f9c <ADT7420_SetTLow>
800020d0:	00402021 	move	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:601
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
	}
}
800020d4:	8fbf001c 	lw	ra,28(sp)
800020d8:	8fb10018 	lw	s1,24(sp)
800020dc:	8fb00014 	lw	s0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:599

	if(valid == 1)
	{
		ADT7420_SetTLow(TLow);
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
800020e0:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:598
	}

	if(valid == 1)
	{
		ADT7420_SetTLow(TLow);
		rxData = 'm';
800020e4:	2402006d 	li	v0,109
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:599
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
800020e8:	248432cc 	addiu	a0,a0,13004
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:601
	}
}
800020ec:	27bd0020 	addiu	sp,sp,32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:598
	}

	if(valid == 1)
	{
		ADT7420_SetTLow(TLow);
		rxData = 'm';
800020f0:	af82800c 	sw	v0,-32756(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:599
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
800020f4:	080004b4 	j	800012d0 <uart_print>
800020f8:	00000000 	nop

800020fc <ADT7420_PrintTLow>:
ADT7420_PrintTLow():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:636
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintTLow(void)
{
800020fc:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:640
	unsigned char rxBuffer[2] = {0x00, 0x00};
	int           val         = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TL_SETP_MSB, 2, rxBuffer);
80002100:	27a20018 	addiu	v0,sp,24
80002104:	3c04b0a0 	lui	a0,0xb0a0
80002108:	afa20010 	sw	v0,16(sp)
8000210c:	2405004b 	li	a1,75
80002110:	24060006 	li	a2,6
80002114:	24070002 	li	a3,2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:636
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintTLow(void)
{
80002118:	afbf0024 	sw	ra,36(sp)
8000211c:	afb00020 	sw	s0,32(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:637
	unsigned char rxBuffer[2] = {0x00, 0x00};
80002120:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:640
	int           val         = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TL_SETP_MSB, 2, rxBuffer);
80002124:	0c000a49 	jal	80002924 <I2C_Read>
80002128:	a3a00019 	sb	zero,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:642

	if(ADT7420_GetResolution(0) == 0)
8000212c:	0c000612 	jal	80001848 <ADT7420_GetResolution>
80002130:	00002021 	move	a0,zero
80002134:	1040000d 	beqz	v0,8000216c <ADT7420_PrintTLow+0x70>
80002138:	93a20018 	lbu	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:648
	{
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
	}
	else
	{
		val = (rxBuffer[0] << 8) | rxBuffer[1];
8000213c:	93b00019 	lbu	s0,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:651
	}

	uart_print("TLow Setpoint ");
80002140:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:648
	{
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
	}
	else
	{
		val = (rxBuffer[0] << 8) | rxBuffer[1];
80002144:	00021200 	sll	v0,v0,0x8
80002148:	00508025 	or	s0,v0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:651
	}

	uart_print("TLow Setpoint ");
8000214c:	0c0004b4 	jal	800012d0 <uart_print>
80002150:	24843384 	addiu	a0,a0,13188
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:652
	Display_Temp(val);
80002154:	0c0006b4 	jal	80001ad0 <Display_Temp>
80002158:	7c102620 	seh	a0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:653
}
8000215c:	8fbf0024 	lw	ra,36(sp)
80002160:	8fb00020 	lw	s0,32(sp)
80002164:	03e00008 	jr	ra
80002168:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:644

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TL_SETP_MSB, 2, rxBuffer);

	if(ADT7420_GetResolution(0) == 0)
	{
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
8000216c:	93a20019 	lbu	v0,25(sp)
80002170:	93b00018 	lbu	s0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:651
	else
	{
		val = (rxBuffer[0] << 8) | rxBuffer[1];
	}

	uart_print("TLow Setpoint ");
80002174:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:644

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TL_SETP_MSB, 2, rxBuffer);

	if(ADT7420_GetResolution(0) == 0)
	{
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
80002178:	000210c2 	srl	v0,v0,0x3
8000217c:	00108140 	sll	s0,s0,0x5
80002180:	00508025 	or	s0,v0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:651
	else
	{
		val = (rxBuffer[0] << 8) | rxBuffer[1];
	}

	uart_print("TLow Setpoint ");
80002184:	0c0004b4 	jal	800012d0 <uart_print>
80002188:	24843384 	addiu	a0,a0,13188
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:652
	Display_Temp(val);
8000218c:	0c0006b4 	jal	80001ad0 <Display_Temp>
80002190:	7c102620 	seh	a0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:653
}
80002194:	8fbf0024 	lw	ra,36(sp)
80002198:	8fb00020 	lw	s0,32(sp)
8000219c:	03e00008 	jr	ra
800021a0:	27bd0028 	addiu	sp,sp,40

800021a4 <ADT7420_SetTCrit>:
ADT7420_SetTCrit():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:663
* @param TCrit - value to be placed in the register.
*
* @return None.
******************************************************************************/
void ADT7420_SetTCrit(int TCrit)
{
800021a4:	27bdffd8 	addiu	sp,sp,-40
800021a8:	afb00020 	sw	s0,32(sp)
800021ac:	00808021 	move	s0,a0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:665
	unsigned char txBuffer[2] = {0x00, 0x00};
	if(ADT7420_GetResolution(0) == 0)
800021b0:	00002021 	move	a0,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:663
* @param TCrit - value to be placed in the register.
*
* @return None.
******************************************************************************/
void ADT7420_SetTCrit(int TCrit)
{
800021b4:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:664
	unsigned char txBuffer[2] = {0x00, 0x00};
800021b8:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:665
	if(ADT7420_GetResolution(0) == 0)
800021bc:	0c000612 	jal	80001848 <ADT7420_GetResolution>
800021c0:	a3a00019 	sb	zero,25(sp)
800021c4:	1040000e 	beqz	v0,80002200 <ADT7420_SetTCrit+0x5c>
800021c8:	7e023a00 	ext	v0,s0,0x8,0x8
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:672
		txBuffer[0] = (TCrit & 0x1FE0) >> 5;
		txBuffer[1] = (TCrit & 0x001F) << 3;
	}
	else
	{
		txBuffer[0] = (TCrit & 0xFF00) >> 8;
800021cc:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:676
		txBuffer[1] = TCrit & 0x00FF;
	}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, TCRIT_SETP_MSB, 2, txBuffer);
800021d0:	27a20018 	addiu	v0,sp,24
800021d4:	afa20010 	sw	v0,16(sp)
800021d8:	3c04b0a0 	lui	a0,0xb0a0
800021dc:	2405004b 	li	a1,75
800021e0:	24060008 	li	a2,8
800021e4:	24070002 	li	a3,2
800021e8:	0c000a7d 	jal	800029f4 <I2C_Write>
800021ec:	a3b00019 	sb	s0,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:677
}
800021f0:	8fbf0024 	lw	ra,36(sp)
800021f4:	8fb00020 	lw	s0,32(sp)
800021f8:	03e00008 	jr	ra
800021fc:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:667
void ADT7420_SetTCrit(int TCrit)
{
	unsigned char txBuffer[2] = {0x00, 0x00};
	if(ADT7420_GetResolution(0) == 0)
	{
		txBuffer[0] = (TCrit & 0x1FE0) >> 5;
80002200:	7e023940 	ext	v0,s0,0x5,0x8
80002204:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:676
	{
		txBuffer[0] = (TCrit & 0xFF00) >> 8;
		txBuffer[1] = TCrit & 0x00FF;
	}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, TCRIT_SETP_MSB, 2, txBuffer);
80002208:	27a20018 	addiu	v0,sp,24
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:668
{
	unsigned char txBuffer[2] = {0x00, 0x00};
	if(ADT7420_GetResolution(0) == 0)
	{
		txBuffer[0] = (TCrit & 0x1FE0) >> 5;
		txBuffer[1] = (TCrit & 0x001F) << 3;
8000220c:	001080c0 	sll	s0,s0,0x3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:676
	{
		txBuffer[0] = (TCrit & 0xFF00) >> 8;
		txBuffer[1] = TCrit & 0x00FF;
	}

	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, TCRIT_SETP_MSB, 2, txBuffer);
80002210:	afa20010 	sw	v0,16(sp)
80002214:	3c04b0a0 	lui	a0,0xb0a0
80002218:	2405004b 	li	a1,75
8000221c:	24060008 	li	a2,8
80002220:	24070002 	li	a3,2
80002224:	0c000a7d 	jal	800029f4 <I2C_Write>
80002228:	a3b00019 	sb	s0,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:677
}
8000222c:	8fbf0024 	lw	ra,36(sp)
80002230:	8fb00020 	lw	s0,32(sp)
80002234:	03e00008 	jr	ra
80002238:	27bd0028 	addiu	sp,sp,40

8000223c <ADT7420_DisplaySetTCritMenu>:
ADT7420_DisplaySetTCritMenu():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:691

void ADT7420_DisplaySetTCritMenu(void)
{
	int TCrit = 0;

	uart_print("\n\r>Set TCrit Menu\n\r");
8000223c:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:688
*
* @return None.
******************************************************************************/

void ADT7420_DisplaySetTCritMenu(void)
{
80002240:	27bdffe0 	addiu	sp,sp,-32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:691
	int TCrit = 0;

	uart_print("\n\r>Set TCrit Menu\n\r");
80002244:	24843394 	addiu	a0,a0,13204
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:688
*
* @return None.
******************************************************************************/

void ADT7420_DisplaySetTCritMenu(void)
{
80002248:	afbf001c 	sw	ra,28(sp)
8000224c:	afb10018 	sw	s1,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:691
	int TCrit = 0;

	uart_print("\n\r>Set TCrit Menu\n\r");
80002250:	0c0004b4 	jal	800012d0 <uart_print>
80002254:	afb00014 	sw	s0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:692
	uart_print("-----------------------------------------\n\r");
80002258:	3c048000 	lui	a0,0x8000
8000225c:	0c0004b4 	jal	800012d0 <uart_print>
80002260:	24842f38 	addiu	a0,a0,12088
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:693
	uart_print("\n\rPlease enter a value between 0x0000 and 0x0064");
80002264:	3c048000 	lui	a0,0x8000
80002268:	0c0004b4 	jal	800012d0 <uart_print>
8000226c:	248433a8 	addiu	a0,a0,13224
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:695

	TCrit = ADT7420_ConsoleRead();
80002270:	0c0006ff 	jal	80001bfc <ADT7420_ConsoleRead>
80002274:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:697

	while(!((TCrit>=0x0000)&(TCrit<=0x0064)))
80002278:	2c430065 	sltiu	v1,v0,101
8000227c:	1460000d 	bnez	v1,800022b4 <ADT7420_DisplaySetTCritMenu+0x78>
80002280:	3c118000 	lui	s1,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:700
	{
		uart_print("\n\rValue for TCrit must be in the range 0x0000 and 0x0064\n\r");
		uart_print("Please enter a valid value: 0x");
80002284:	3c108000 	lui	s0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:699

	TCrit = ADT7420_ConsoleRead();

	while(!((TCrit>=0x0000)&(TCrit<=0x0064)))
	{
		uart_print("\n\rValue for TCrit must be in the range 0x0000 and 0x0064\n\r");
80002288:	263133dc 	addiu	s1,s1,13276
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:700
		uart_print("Please enter a valid value: 0x");
8000228c:	261032ac 	addiu	s0,s0,12972
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:699

	TCrit = ADT7420_ConsoleRead();

	while(!((TCrit>=0x0000)&(TCrit<=0x0064)))
	{
		uart_print("\n\rValue for TCrit must be in the range 0x0000 and 0x0064\n\r");
80002290:	0c0004b4 	jal	800012d0 <uart_print>
80002294:	02202021 	move	a0,s1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:700
		uart_print("Please enter a valid value: 0x");
80002298:	0c0004b4 	jal	800012d0 <uart_print>
8000229c:	02002021 	move	a0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:701
		TCrit = ADT7420_ConsoleRead();
800022a0:	0c0006ff 	jal	80001bfc <ADT7420_ConsoleRead>
800022a4:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:697
	uart_print("-----------------------------------------\n\r");
	uart_print("\n\rPlease enter a value between 0x0000 and 0x0064");

	TCrit = ADT7420_ConsoleRead();

	while(!((TCrit>=0x0000)&(TCrit<=0x0064)))
800022a8:	2c430065 	sltiu	v1,v0,101
800022ac:	1060fff8 	beqz	v1,80002290 <ADT7420_DisplaySetTCritMenu+0x54>
800022b0:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:704
		uart_print("\n\rValue for TCrit must be in the range 0x0000 and 0x0064\n\r");
		uart_print("Please enter a valid value: 0x");
		TCrit = ADT7420_ConsoleRead();
	}

	if(valid == 1)
800022b4:	93848010 	lbu	a0,-32752(gp)
800022b8:	24030001 	li	v1,1
800022bc:	10830005 	beq	a0,v1,800022d4 <ADT7420_DisplaySetTCritMenu+0x98>
800022c0:	8fbf001c 	lw	ra,28(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:710
	{
		ADT7420_SetTCrit(TCrit);
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
	}
}
800022c4:	8fb10018 	lw	s1,24(sp)
800022c8:	8fb00014 	lw	s0,20(sp)
800022cc:	03e00008 	jr	ra
800022d0:	27bd0020 	addiu	sp,sp,32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:706
		TCrit = ADT7420_ConsoleRead();
	}

	if(valid == 1)
	{
		ADT7420_SetTCrit(TCrit);
800022d4:	0c000869 	jal	800021a4 <ADT7420_SetTCrit>
800022d8:	00402021 	move	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:710
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
	}
}
800022dc:	8fbf001c 	lw	ra,28(sp)
800022e0:	8fb10018 	lw	s1,24(sp)
800022e4:	8fb00014 	lw	s0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:708

	if(valid == 1)
	{
		ADT7420_SetTCrit(TCrit);
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
800022e8:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:707
	}

	if(valid == 1)
	{
		ADT7420_SetTCrit(TCrit);
		rxData = 'm';
800022ec:	2402006d 	li	v0,109
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:708
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
800022f0:	248432cc 	addiu	a0,a0,13004
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:710
	}
}
800022f4:	27bd0020 	addiu	sp,sp,32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:707
	}

	if(valid == 1)
	{
		ADT7420_SetTCrit(TCrit);
		rxData = 'm';
800022f8:	af82800c 	sw	v0,-32756(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:708
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
800022fc:	080004b4 	j	800012d0 <uart_print>
80002300:	00000000 	nop

80002304 <ADT7420_PrintTCrit>:
ADT7420_PrintTCrit():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:720
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintTCrit(void)
{
80002304:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:724
	unsigned char rxBuffer[2] = {0x00, 0x00};
	int           val         = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TCRIT_SETP_MSB, 2, rxBuffer);
80002308:	27a20018 	addiu	v0,sp,24
8000230c:	3c04b0a0 	lui	a0,0xb0a0
80002310:	afa20010 	sw	v0,16(sp)
80002314:	2405004b 	li	a1,75
80002318:	24060008 	li	a2,8
8000231c:	24070002 	li	a3,2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:720
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintTCrit(void)
{
80002320:	afbf0024 	sw	ra,36(sp)
80002324:	afb00020 	sw	s0,32(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:721
	unsigned char rxBuffer[2] = {0x00, 0x00};
80002328:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:724
	int           val         = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TCRIT_SETP_MSB, 2, rxBuffer);
8000232c:	0c000a49 	jal	80002924 <I2C_Read>
80002330:	a3a00019 	sb	zero,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:726

	if(ADT7420_GetResolution(0) == 0)
80002334:	0c000612 	jal	80001848 <ADT7420_GetResolution>
80002338:	00002021 	move	a0,zero
8000233c:	1040000d 	beqz	v0,80002374 <ADT7420_PrintTCrit+0x70>
80002340:	93a20018 	lbu	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:732
	{
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
	}
	else
	{
		val = (rxBuffer[0] << 8) | rxBuffer[1];
80002344:	93b00019 	lbu	s0,25(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:735
	}

	uart_print("TCrit Setpoint ");
80002348:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:732
	{
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
	}
	else
	{
		val = (rxBuffer[0] << 8) | rxBuffer[1];
8000234c:	00021200 	sll	v0,v0,0x8
80002350:	00508025 	or	s0,v0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:735
	}

	uart_print("TCrit Setpoint ");
80002354:	0c0004b4 	jal	800012d0 <uart_print>
80002358:	24843418 	addiu	a0,a0,13336
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:736
	Display_Temp(val);
8000235c:	0c0006b4 	jal	80001ad0 <Display_Temp>
80002360:	7c102620 	seh	a0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:737
}
80002364:	8fbf0024 	lw	ra,36(sp)
80002368:	8fb00020 	lw	s0,32(sp)
8000236c:	03e00008 	jr	ra
80002370:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:728

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TCRIT_SETP_MSB, 2, rxBuffer);

	if(ADT7420_GetResolution(0) == 0)
	{
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
80002374:	93a20019 	lbu	v0,25(sp)
80002378:	93b00018 	lbu	s0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:735
	else
	{
		val = (rxBuffer[0] << 8) | rxBuffer[1];
	}

	uart_print("TCrit Setpoint ");
8000237c:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:728

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, TCRIT_SETP_MSB, 2, rxBuffer);

	if(ADT7420_GetResolution(0) == 0)
	{
		val = ( rxBuffer[0] << 5 ) | ( rxBuffer[1] >> 3);
80002380:	000210c2 	srl	v0,v0,0x3
80002384:	00108140 	sll	s0,s0,0x5
80002388:	00508025 	or	s0,v0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:735
	else
	{
		val = (rxBuffer[0] << 8) | rxBuffer[1];
	}

	uart_print("TCrit Setpoint ");
8000238c:	0c0004b4 	jal	800012d0 <uart_print>
80002390:	24843418 	addiu	a0,a0,13336
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:736
	Display_Temp(val);
80002394:	0c0006b4 	jal	80001ad0 <Display_Temp>
80002398:	7c102620 	seh	a0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:737
}
8000239c:	8fbf0024 	lw	ra,36(sp)
800023a0:	8fb00020 	lw	s0,32(sp)
800023a4:	03e00008 	jr	ra
800023a8:	27bd0028 	addiu	sp,sp,40

800023ac <ADT7420_SetHysteresis>:
ADT7420_SetHysteresis():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:779
* @param THyst - value from 0x0000 to 0x000F to be placed in the register.
*
* @return None.
******************************************************************************/
void ADT7420_SetHysteresis(int THyst)
{
800023ac:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:782
	unsigned char txBuffer[1] = {0x00};
	txBuffer[0] = THyst & 0x0F;
	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, T_HYST_SETP, 1, txBuffer);
800023b0:	27a30018 	addiu	v1,sp,24
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:781
* @return None.
******************************************************************************/
void ADT7420_SetHysteresis(int THyst)
{
	unsigned char txBuffer[1] = {0x00};
	txBuffer[0] = THyst & 0x0F;
800023b4:	3082000f 	andi	v0,a0,0xf
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:782
	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, T_HYST_SETP, 1, txBuffer);
800023b8:	afa30010 	sw	v1,16(sp)
800023bc:	3c04b0a0 	lui	a0,0xb0a0
800023c0:	2405004b 	li	a1,75
800023c4:	2406000a 	li	a2,10
800023c8:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:779
* @param THyst - value from 0x0000 to 0x000F to be placed in the register.
*
* @return None.
******************************************************************************/
void ADT7420_SetHysteresis(int THyst)
{
800023cc:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:782
	unsigned char txBuffer[1] = {0x00};
	txBuffer[0] = THyst & 0x0F;
	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, T_HYST_SETP, 1, txBuffer);
800023d0:	0c000a7d 	jal	800029f4 <I2C_Write>
800023d4:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:783
}
800023d8:	8fbf0024 	lw	ra,36(sp)
800023dc:	03e00008 	jr	ra
800023e0:	27bd0028 	addiu	sp,sp,40

800023e4 <ADT7420_DisplaySetTHystMenu>:
ADT7420_DisplaySetTHystMenu():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:750
******************************************************************************/
void ADT7420_DisplaySetTHystMenu(void)
{
	int THyst = 0;

	uart_print("\n\r>Set THyst Menu\n\r");
800023e4:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:747
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplaySetTHystMenu(void)
{
800023e8:	27bdffe0 	addiu	sp,sp,-32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:750
	int THyst = 0;

	uart_print("\n\r>Set THyst Menu\n\r");
800023ec:	24843428 	addiu	a0,a0,13352
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:747
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplaySetTHystMenu(void)
{
800023f0:	afbf001c 	sw	ra,28(sp)
800023f4:	afb10018 	sw	s1,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:750
	int THyst = 0;

	uart_print("\n\r>Set THyst Menu\n\r");
800023f8:	0c0004b4 	jal	800012d0 <uart_print>
800023fc:	afb00014 	sw	s0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:751
	uart_print("-----------------------------------------\n\r");
80002400:	3c048000 	lui	a0,0x8000
80002404:	0c0004b4 	jal	800012d0 <uart_print>
80002408:	24842f38 	addiu	a0,a0,12088
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:752
	uart_print("Enter a value from 0x0000 to 0x000F: 0x");
8000240c:	3c048000 	lui	a0,0x8000
80002410:	0c0004b4 	jal	800012d0 <uart_print>
80002414:	2484343c 	addiu	a0,a0,13372
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:754

	THyst = ADT7420_ConsoleRead();
80002418:	0c0006ff 	jal	80001bfc <ADT7420_ConsoleRead>
8000241c:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:756

	while(!((THyst>=0)&(THyst<16)))
80002420:	2c430010 	sltiu	v1,v0,16
80002424:	1460000d 	bnez	v1,8000245c <ADT7420_DisplaySetTHystMenu+0x78>
80002428:	3c118000 	lui	s1,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:759
	{
		uart_print("\n\rValue for THyst must be in the range 0 C to 15 C\n\r");
		uart_print("Please enter a valid value: 0x");
8000242c:	3c108000 	lui	s0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:758

	THyst = ADT7420_ConsoleRead();

	while(!((THyst>=0)&(THyst<16)))
	{
		uart_print("\n\rValue for THyst must be in the range 0 C to 15 C\n\r");
80002430:	26313464 	addiu	s1,s1,13412
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:759
		uart_print("Please enter a valid value: 0x");
80002434:	261032ac 	addiu	s0,s0,12972
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:758

	THyst = ADT7420_ConsoleRead();

	while(!((THyst>=0)&(THyst<16)))
	{
		uart_print("\n\rValue for THyst must be in the range 0 C to 15 C\n\r");
80002438:	0c0004b4 	jal	800012d0 <uart_print>
8000243c:	02202021 	move	a0,s1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:759
		uart_print("Please enter a valid value: 0x");
80002440:	0c0004b4 	jal	800012d0 <uart_print>
80002444:	02002021 	move	a0,s0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:760
		THyst = ADT7420_ConsoleRead();
80002448:	0c0006ff 	jal	80001bfc <ADT7420_ConsoleRead>
8000244c:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:756
	uart_print("-----------------------------------------\n\r");
	uart_print("Enter a value from 0x0000 to 0x000F: 0x");

	THyst = ADT7420_ConsoleRead();

	while(!((THyst>=0)&(THyst<16)))
80002450:	2c430010 	sltiu	v1,v0,16
80002454:	1060fff8 	beqz	v1,80002438 <ADT7420_DisplaySetTHystMenu+0x54>
80002458:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:763
		uart_print("\n\rValue for THyst must be in the range 0 C to 15 C\n\r");
		uart_print("Please enter a valid value: 0x");
		THyst = ADT7420_ConsoleRead();
	}

	if(valid == 1)
8000245c:	93848010 	lbu	a0,-32752(gp)
80002460:	24030001 	li	v1,1
80002464:	10830005 	beq	a0,v1,8000247c <ADT7420_DisplaySetTHystMenu+0x98>
80002468:	8fbf001c 	lw	ra,28(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:769
	{
		ADT7420_SetHysteresis(THyst);
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
	}
}
8000246c:	8fb10018 	lw	s1,24(sp)
80002470:	8fb00014 	lw	s0,20(sp)
80002474:	03e00008 	jr	ra
80002478:	27bd0020 	addiu	sp,sp,32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:765
		THyst = ADT7420_ConsoleRead();
	}

	if(valid == 1)
	{
		ADT7420_SetHysteresis(THyst);
8000247c:	0c0008eb 	jal	800023ac <ADT7420_SetHysteresis>
80002480:	00402021 	move	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:769
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
	}
}
80002484:	8fbf001c 	lw	ra,28(sp)
80002488:	8fb10018 	lw	s1,24(sp)
8000248c:	8fb00014 	lw	s0,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:767

	if(valid == 1)
	{
		ADT7420_SetHysteresis(THyst);
		rxData = 'm';
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
80002490:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:766
	}

	if(valid == 1)
	{
		ADT7420_SetHysteresis(THyst);
		rxData = 'm';
80002494:	2402006d 	li	v0,109
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:767
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
80002498:	248432cc 	addiu	a0,a0,13004
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:769
	}
}
8000249c:	27bd0020 	addiu	sp,sp,32
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:766
	}

	if(valid == 1)
	{
		ADT7420_SetHysteresis(THyst);
		rxData = 'm';
800024a0:	af82800c 	sw	v0,-32756(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:767
		uart_print("\n\r\n\r>Returning to Main Menu...\n\r");
800024a4:	080004b4 	j	800012d0 <uart_print>
800024a8:	00000000 	nop

800024ac <ADT7420_PrintHysteresis>:
ADT7420_PrintHysteresis():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:793
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintHysteresis(void)
{
800024ac:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:795
	unsigned char rxBuffer[2] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, T_HYST_SETP, 1, rxBuffer);
800024b0:	27a20018 	addiu	v0,sp,24
800024b4:	2405004b 	li	a1,75
800024b8:	2406000a 	li	a2,10
800024bc:	24070001 	li	a3,1
800024c0:	3c04b0a0 	lui	a0,0xb0a0
800024c4:	afa20010 	sw	v0,16(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:793
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintHysteresis(void)
{
800024c8:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:795
	unsigned char rxBuffer[2] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, T_HYST_SETP, 1, rxBuffer);
800024cc:	0c000a49 	jal	80002924 <I2C_Read>
800024d0:	a7a00018 	sh	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:796
	uart_print("THyst Setpoint T = ");
800024d4:	3c048000 	lui	a0,0x8000
800024d8:	0c0004b4 	jal	800012d0 <uart_print>
800024dc:	2484349c 	addiu	a0,a0,13468
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:797
	uart_print(my_itoa(rxBuffer[0]));
800024e0:	0c000533 	jal	800014cc <my_itoa>
800024e4:	93a40018 	lbu	a0,24(sp)
800024e8:	0c0004b4 	jal	800012d0 <uart_print>
800024ec:	00402021 	move	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:798
	uart_print(" C\n\r");
800024f0:	3c048000 	lui	a0,0x8000
800024f4:	0c0004b4 	jal	800012d0 <uart_print>
800024f8:	24843494 	addiu	a0,a0,13460
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:799
}
800024fc:	8fbf0024 	lw	ra,36(sp)
80002500:	03e00008 	jr	ra
80002504:	27bd0028 	addiu	sp,sp,40

80002508 <ADT7420_DisplaySetFaultQueueMenu>:
ADT7420_DisplaySetFaultQueueMenu():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:813
void ADT7420_DisplaySetFaultQueueMenu(void)
{
	unsigned char txBuffer[1] = { 0x00 };
	char          rx          = 0;

	uart_print("\n\r>Fault Queue Menu\n\r");
80002508:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:809
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplaySetFaultQueueMenu(void)
{
8000250c:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:813
	unsigned char txBuffer[1] = { 0x00 };
	char          rx          = 0;

	uart_print("\n\r>Fault Queue Menu\n\r");
80002510:	248434b0 	addiu	a0,a0,13488
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:809
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplaySetFaultQueueMenu(void)
{
80002514:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:813
	unsigned char txBuffer[1] = { 0x00 };
	char          rx          = 0;

	uart_print("\n\r>Fault Queue Menu\n\r");
80002518:	0c0004b4 	jal	800012d0 <uart_print>
8000251c:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:814
	uart_print("-----------------------------------------\n\r");
80002520:	3c048000 	lui	a0,0x8000
80002524:	0c0004b4 	jal	800012d0 <uart_print>
80002528:	24842f38 	addiu	a0,a0,12088
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:815
	uart_print("Number of fault queues:\n\r");
8000252c:	3c048000 	lui	a0,0x8000
80002530:	0c0004b4 	jal	800012d0 <uart_print>
80002534:	248434c8 	addiu	a0,a0,13512
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:816
	uart_print("	1. 1 fault\n\r");
80002538:	3c048000 	lui	a0,0x8000
8000253c:	0c0004b4 	jal	800012d0 <uart_print>
80002540:	248434e4 	addiu	a0,a0,13540
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:817
	uart_print("	2. 2 faults\n\r");
80002544:	3c048000 	lui	a0,0x8000
80002548:	0c0004b4 	jal	800012d0 <uart_print>
8000254c:	248434f4 	addiu	a0,a0,13556
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:818
	uart_print("	3. 3 faults\n\r");
80002550:	3c048000 	lui	a0,0x8000
80002554:	0c0004b4 	jal	800012d0 <uart_print>
80002558:	24843504 	addiu	a0,a0,13572
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:819
	uart_print("	4. 4 faults\n\r");
8000255c:	3c048000 	lui	a0,0x8000
80002560:	0c0004b4 	jal	800012d0 <uart_print>
80002564:	24843514 	addiu	a0,a0,13588
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:823

	// Check if data is available on the UART
	// Store and display received data
	rx = uart_inbyte( );
80002568:	0c00048c 	jal	80001230 <uart_inbyte>
8000256c:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:825

	switch (rx)
80002570:	24030032 	li	v1,50
80002574:	10430034 	beq	v0,v1,80002648 <ADT7420_DisplaySetFaultQueueMenu+0x140>
80002578:	2c430033 	sltiu	v1,v0,51
8000257c:	1460001e 	bnez	v1,800025f8 <ADT7420_DisplaySetFaultQueueMenu+0xf0>
80002580:	24030033 	li	v1,51
80002584:	10430018 	beq	v0,v1,800025e8 <ADT7420_DisplaySetFaultQueueMenu+0xe0>
80002588:	24030034 	li	v1,52
8000258c:	14430021 	bne	v0,v1,80002614 <ADT7420_DisplaySetFaultQueueMenu+0x10c>
80002590:	24020003 	li	v0,3
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:847
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '4' :
			txBuffer[0] = 0x03 << FAULT_QUEUE;
			uart_print("4 fault queues\n\r");
80002594:	3c048000 	lui	a0,0x8000
80002598:	2484355c 	addiu	a0,a0,13660
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:834
			uart_print("1 fault queue\n\r");
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '2' :
			txBuffer[0] = 0x01 << FAULT_QUEUE;
8000259c:	a3a20018 	sb	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:835
			uart_print("2 fault queues\n\r");
800025a0:	0c0004b4 	jal	800012d0 <uart_print>
800025a4:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:837
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
800025a8:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:836
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '2' :
			txBuffer[0] = 0x01 << FAULT_QUEUE;
			uart_print("2 fault queues\n\r");
			rxData = 'm';
800025ac:	2402006d 	li	v0,109
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:837
			uart_print("\n\r>Returning to Main Menu...\n\r");
800025b0:	248431a4 	addiu	a0,a0,12708
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:836
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '2' :
			txBuffer[0] = 0x01 << FAULT_QUEUE;
			uart_print("2 fault queues\n\r");
			rxData = 'm';
800025b4:	af82800c 	sw	v0,-32756(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:837
			uart_print("\n\r>Returning to Main Menu...\n\r");
800025b8:	0c0004b4 	jal	800012d0 <uart_print>
800025bc:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:855
			break;
		default:
			uart_print("Wrong option!\n\r");
			break;
	}
	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, txBuffer);
800025c0:	27a20018 	addiu	v0,sp,24
800025c4:	afa20010 	sw	v0,16(sp)
800025c8:	3c04b0a0 	lui	a0,0xb0a0
800025cc:	2405004b 	li	a1,75
800025d0:	24060003 	li	a2,3
800025d4:	0c000a7d 	jal	800029f4 <I2C_Write>
800025d8:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:856
}
800025dc:	8fbf0024 	lw	ra,36(sp)
800025e0:	03e00008 	jr	ra
800025e4:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:841
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '3' :
			txBuffer[0] = 0x02 << FAULT_QUEUE;
			uart_print("3 fault queues\n\r");
800025e8:	3c048000 	lui	a0,0x8000
800025ec:	24843548 	addiu	a0,a0,13640
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:840
			uart_print("2 fault queues\n\r");
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '3' :
			txBuffer[0] = 0x02 << FAULT_QUEUE;
800025f0:	1000ffea 	b	8000259c <ADT7420_DisplaySetFaultQueueMenu+0x94>
800025f4:	24020002 	li	v0,2
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:825

	// Check if data is available on the UART
	// Store and display received data
	rx = uart_inbyte( );

	switch (rx)
800025f8:	24030031 	li	v1,49
800025fc:	54430006 	bnel	v0,v1,80002618 <ADT7420_DisplaySetFaultQueueMenu+0x110>
80002600:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:829
	{
	case '1' :
			txBuffer[0] = 0x00 << FAULT_QUEUE;
			uart_print("1 fault queue\n\r");
80002604:	3c048000 	lui	a0,0x8000
80002608:	24843524 	addiu	a0,a0,13604
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:828
	rx = uart_inbyte( );

	switch (rx)
	{
	case '1' :
			txBuffer[0] = 0x00 << FAULT_QUEUE;
8000260c:	1000ffe4 	b	800025a0 <ADT7420_DisplaySetFaultQueueMenu+0x98>
80002610:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:852
			uart_print("4 fault queues\n\r");
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		default:
			uart_print("Wrong option!\n\r");
80002614:	3c048000 	lui	a0,0x8000
80002618:	0c0004b4 	jal	800012d0 <uart_print>
8000261c:	248431c4 	addiu	a0,a0,12740
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:855
			break;
	}
	I2C_Write(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, txBuffer);
80002620:	27a20018 	addiu	v0,sp,24
80002624:	afa20010 	sw	v0,16(sp)
80002628:	3c04b0a0 	lui	a0,0xb0a0
8000262c:	2405004b 	li	a1,75
80002630:	24060003 	li	a2,3
80002634:	0c000a7d 	jal	800029f4 <I2C_Write>
80002638:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:856
}
8000263c:	8fbf0024 	lw	ra,36(sp)
80002640:	03e00008 	jr	ra
80002644:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:835
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '2' :
			txBuffer[0] = 0x01 << FAULT_QUEUE;
			uart_print("2 fault queues\n\r");
80002648:	3c048000 	lui	a0,0x8000
8000264c:	24843534 	addiu	a0,a0,13620
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:834
			uart_print("1 fault queue\n\r");
			rxData = 'm';
			uart_print("\n\r>Returning to Main Menu...\n\r");
			break;
		case '2' :
			txBuffer[0] = 0x01 << FAULT_QUEUE;
80002650:	1000ffd2 	b	8000259c <ADT7420_DisplaySetFaultQueueMenu+0x94>
80002654:	24020001 	li	v0,1

80002658 <ADT7420_PrintFaultQueue>:
ADT7420_PrintFaultQueue():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:866
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintFaultQueue(void)
{
80002658:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:870
	unsigned char rxBuffer[1] = { 0x00 };
	char          rx          = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
8000265c:	27a20018 	addiu	v0,sp,24
80002660:	3c04b0a0 	lui	a0,0xb0a0
80002664:	afa20010 	sw	v0,16(sp)
80002668:	2405004b 	li	a1,75
8000266c:	24060003 	li	a2,3
80002670:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:866
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintFaultQueue(void)
{
80002674:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:870
	unsigned char rxBuffer[1] = { 0x00 };
	char          rx          = 0;

	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
80002678:	0c000a49 	jal	80002924 <I2C_Read>
8000267c:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:872

	rx = rxBuffer[0] & (0x03 << FAULT_QUEUE);
80002680:	93a20018 	lbu	v0,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:874

	switch (rx)
80002684:	24030002 	li	v1,2
80002688:	30420003 	andi	v0,v0,0x3
8000268c:	10430016 	beq	v0,v1,800026e8 <ADT7420_PrintFaultQueue+0x90>
80002690:	24030003 	li	v1,3
80002694:	1043000e 	beq	v0,v1,800026d0 <ADT7420_PrintFaultQueue+0x78>
80002698:	24030001 	li	v1,1
8000269c:	50430007 	beql	v0,v1,800026bc <ADT7420_PrintFaultQueue+0x64>
800026a0:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:877
	{
		case 0x00 :
			uart_print("1 fault queue\n\r");
800026a4:	3c048000 	lui	a0,0x8000
800026a8:	0c0004b4 	jal	800012d0 <uart_print>
800026ac:	24843524 	addiu	a0,a0,13604
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:891
			uart_print("4 fault queues\n\r");
			break;
		default:
			break;
	}
}
800026b0:	8fbf0024 	lw	ra,36(sp)
800026b4:	03e00008 	jr	ra
800026b8:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:880
	{
		case 0x00 :
			uart_print("1 fault queue\n\r");
			break;
		case 0x01 :
			uart_print("2 fault queues\n\r");
800026bc:	0c0004b4 	jal	800012d0 <uart_print>
800026c0:	24843534 	addiu	a0,a0,13620
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:891
			uart_print("4 fault queues\n\r");
			break;
		default:
			break;
	}
}
800026c4:	8fbf0024 	lw	ra,36(sp)
800026c8:	03e00008 	jr	ra
800026cc:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:886
			break;
		case 0x02 :
			uart_print("3 fault queues\n\r");
			break;
		case 0x03 :
			uart_print("4 fault queues\n\r");
800026d0:	3c048000 	lui	a0,0x8000
800026d4:	0c0004b4 	jal	800012d0 <uart_print>
800026d8:	2484355c 	addiu	a0,a0,13660
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:891
			break;
		default:
			break;
	}
}
800026dc:	8fbf0024 	lw	ra,36(sp)
800026e0:	03e00008 	jr	ra
800026e4:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:883
			break;
		case 0x01 :
			uart_print("2 fault queues\n\r");
			break;
		case 0x02 :
			uart_print("3 fault queues\n\r");
800026e8:	3c048000 	lui	a0,0x8000
800026ec:	0c0004b4 	jal	800012d0 <uart_print>
800026f0:	24843548 	addiu	a0,a0,13640
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:891
			uart_print("4 fault queues\n\r");
			break;
		default:
			break;
	}
}
800026f4:	8fbf0024 	lw	ra,36(sp)
800026f8:	03e00008 	jr	ra
800026fc:	27bd0028 	addiu	sp,sp,40

80002700 <ADT7420_PrintAlertMode>:
ADT7420_PrintAlertMode():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:901
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintAlertMode(void)
{
80002700:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:903
	unsigned char rxBuffer[2] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
80002704:	27a20018 	addiu	v0,sp,24
80002708:	3c04b0a0 	lui	a0,0xb0a0
8000270c:	afa20010 	sw	v0,16(sp)
80002710:	2405004b 	li	a1,75
80002714:	24060003 	li	a2,3
80002718:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:901
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintAlertMode(void)
{
8000271c:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:903
	unsigned char rxBuffer[2] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
80002720:	0c000a49 	jal	80002924 <I2C_Read>
80002724:	a7a00018 	sh	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:905

	if (rxBuffer[0] & (1 << INT_CT))
80002728:	93a20018 	lbu	v0,24(sp)
8000272c:	30420010 	andi	v0,v0,0x10
80002730:	54400007 	bnezl	v0,80002750 <ADT7420_PrintAlertMode+0x50>
80002734:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:911
	{
		uart_print("Alert Mode: Comparator\n\r");
	}
	else
	{
		uart_print("Alert Mode: Interrupt\n\r");
80002738:	3c048000 	lui	a0,0x8000
8000273c:	0c0004b4 	jal	800012d0 <uart_print>
80002740:	2484358c 	addiu	a0,a0,13708
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:913
	}
}
80002744:	8fbf0024 	lw	ra,36(sp)
80002748:	03e00008 	jr	ra
8000274c:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:907
	unsigned char rxBuffer[2] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);

	if (rxBuffer[0] & (1 << INT_CT))
	{
		uart_print("Alert Mode: Comparator\n\r");
80002750:	0c0004b4 	jal	800012d0 <uart_print>
80002754:	24843570 	addiu	a0,a0,13680
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:913
	}
	else
	{
		uart_print("Alert Mode: Interrupt\n\r");
	}
}
80002758:	8fbf0024 	lw	ra,36(sp)
8000275c:	03e00008 	jr	ra
80002760:	27bd0028 	addiu	sp,sp,40

80002764 <ADT7420_PrintCTPolarity>:
ADT7420_PrintCTPolarity():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:923
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintCTPolarity(void)
{
80002764:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:925
	unsigned char rxBuffer[1] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
80002768:	27a20018 	addiu	v0,sp,24
8000276c:	3c04b0a0 	lui	a0,0xb0a0
80002770:	afa20010 	sw	v0,16(sp)
80002774:	2405004b 	li	a1,75
80002778:	24060003 	li	a2,3
8000277c:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:923
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintCTPolarity(void)
{
80002780:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:925
	unsigned char rxBuffer[1] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
80002784:	0c000a49 	jal	80002924 <I2C_Read>
80002788:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:927

	if (rxBuffer[0] & (1 << CT_POL))
8000278c:	93a20018 	lbu	v0,24(sp)
80002790:	30420004 	andi	v0,v0,0x4
80002794:	54400007 	bnezl	v0,800027b4 <ADT7420_PrintCTPolarity+0x50>
80002798:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:933
	{
		uart_print("CT pin is Active High\n\r");
	}
	else
	{
		uart_print("CT pin is Active Low\n\r");
8000279c:	3c048000 	lui	a0,0x8000
800027a0:	0c0004b4 	jal	800012d0 <uart_print>
800027a4:	248435bc 	addiu	a0,a0,13756
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:935
	}
}
800027a8:	8fbf0024 	lw	ra,36(sp)
800027ac:	03e00008 	jr	ra
800027b0:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:929
	unsigned char rxBuffer[1] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);

	if (rxBuffer[0] & (1 << CT_POL))
	{
		uart_print("CT pin is Active High\n\r");
800027b4:	0c0004b4 	jal	800012d0 <uart_print>
800027b8:	248435a4 	addiu	a0,a0,13732
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:935
	}
	else
	{
		uart_print("CT pin is Active Low\n\r");
	}
}
800027bc:	8fbf0024 	lw	ra,36(sp)
800027c0:	03e00008 	jr	ra
800027c4:	27bd0028 	addiu	sp,sp,40

800027c8 <ADT7420_PrintINTPolarity>:
ADT7420_PrintINTPolarity():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:946
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintINTPolarity(void)
{
800027c8:	27bdffd8 	addiu	sp,sp,-40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:948
	unsigned char rxBuffer[1] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
800027cc:	27a20018 	addiu	v0,sp,24
800027d0:	3c04b0a0 	lui	a0,0xb0a0
800027d4:	afa20010 	sw	v0,16(sp)
800027d8:	2405004b 	li	a1,75
800027dc:	24060003 	li	a2,3
800027e0:	24070001 	li	a3,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:946
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_PrintINTPolarity(void)
{
800027e4:	afbf0024 	sw	ra,36(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:948
	unsigned char rxBuffer[1] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);
800027e8:	0c000a49 	jal	80002924 <I2C_Read>
800027ec:	a3a00018 	sb	zero,24(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:950

	if (rxBuffer[0] & (1 << INT_POL))
800027f0:	93a20018 	lbu	v0,24(sp)
800027f4:	30420008 	andi	v0,v0,0x8
800027f8:	54400007 	bnezl	v0,80002818 <ADT7420_PrintINTPolarity+0x50>
800027fc:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:956
	{
		uart_print("INT pin is Active High\n\r");
	}
	else
	{
		uart_print("INT pin is Active Low\n\r");
80002800:	3c048000 	lui	a0,0x8000
80002804:	0c0004b4 	jal	800012d0 <uart_print>
80002808:	248435f0 	addiu	a0,a0,13808
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:958
	}
}
8000280c:	8fbf0024 	lw	ra,36(sp)
80002810:	03e00008 	jr	ra
80002814:	27bd0028 	addiu	sp,sp,40
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:952
	unsigned char rxBuffer[1] = { 0x00 };
	I2C_Read(IIC_BASEADDR, ADT7420_IIC_ADDR, CONFIG_REG, 1, rxBuffer);

	if (rxBuffer[0] & (1 << INT_POL))
	{
		uart_print("INT pin is Active High\n\r");
80002818:	0c0004b4 	jal	800012d0 <uart_print>
8000281c:	248435d4 	addiu	a0,a0,13780
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:958
	}
	else
	{
		uart_print("INT pin is Active Low\n\r");
	}
}
80002820:	8fbf0024 	lw	ra,36(sp)
80002824:	03e00008 	jr	ra
80002828:	27bd0028 	addiu	sp,sp,40

8000282c <ADT7420_DisplaySettings>:
ADT7420_DisplaySettings():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:969
*
* @return None.
******************************************************************************/
void ADT7420_DisplaySettings(void)
{
	uart_print("\n\r ADT7420 Settings \n\r");
8000282c:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:968
* @param None.
*
* @return None.
******************************************************************************/
void ADT7420_DisplaySettings(void)
{
80002830:	27bdffe8 	addiu	sp,sp,-24
80002834:	afbf0014 	sw	ra,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:969
	uart_print("\n\r ADT7420 Settings \n\r");
80002838:	0c0004b4 	jal	800012d0 <uart_print>
8000283c:	24843608 	addiu	a0,a0,13832
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:970
	uart_print("-----------------------------------------\n\r");
80002840:	3c048000 	lui	a0,0x8000
80002844:	0c0004b4 	jal	800012d0 <uart_print>
80002848:	24842f38 	addiu	a0,a0,12088
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:971
	ADT7420_GetResolution(1);
8000284c:	0c000612 	jal	80001848 <ADT7420_GetResolution>
80002850:	24040001 	li	a0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:973

	ADT7420_PrintTHigh();
80002854:	0c0007bd 	jal	80001ef4 <ADT7420_PrintTHigh>
80002858:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:974
	ADT7420_PrintTLow();
8000285c:	0c00083f 	jal	800020fc <ADT7420_PrintTLow>
80002860:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:975
	ADT7420_PrintTCrit();
80002864:	0c0008c1 	jal	80002304 <ADT7420_PrintTCrit>
80002868:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:976
	ADT7420_PrintHysteresis();
8000286c:	0c00092b 	jal	800024ac <ADT7420_PrintHysteresis>
80002870:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:978

	ADT7420_PrintFaultQueue();
80002874:	0c000996 	jal	80002658 <ADT7420_PrintFaultQueue>
80002878:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:980

	ADT7420_PrintAlertMode();
8000287c:	0c0009c0 	jal	80002700 <ADT7420_PrintAlertMode>
80002880:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:981
	ADT7420_PrintCTPolarity();
80002884:	0c0009d9 	jal	80002764 <ADT7420_PrintCTPolarity>
80002888:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:982
	ADT7420_PrintINTPolarity();
8000288c:	0c0009f2 	jal	800027c8 <ADT7420_PrintINTPolarity>
80002890:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:986

	rxData = 'm';
	uart_print("\n\r>Returning to Main Menu...\n\r");
}
80002894:	8fbf0014 	lw	ra,20(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:985
	ADT7420_PrintAlertMode();
	ADT7420_PrintCTPolarity();
	ADT7420_PrintINTPolarity();

	rxData = 'm';
	uart_print("\n\r>Returning to Main Menu...\n\r");
80002898:	3c048000 	lui	a0,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:984

	ADT7420_PrintAlertMode();
	ADT7420_PrintCTPolarity();
	ADT7420_PrintINTPolarity();

	rxData = 'm';
8000289c:	2402006d 	li	v0,109
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:985
	uart_print("\n\r>Returning to Main Menu...\n\r");
800028a0:	248431a4 	addiu	a0,a0,12708
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:986
}
800028a4:	27bd0018 	addiu	sp,sp,24
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:984

	ADT7420_PrintAlertMode();
	ADT7420_PrintCTPolarity();
	ADT7420_PrintINTPolarity();

	rxData = 'm';
800028a8:	af82800c 	sw	v0,-32756(gp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/ADT7420.c:985
	uart_print("\n\r>Returning to Main Menu...\n\r");
800028ac:	080004b4 	j	800012d0 <uart_print>
800028b0:	00000000 	nop

800028b4 <delay_ms>:
delay_ms():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:63
* @return None.
******************************************************************************/
void delay_ms(unsigned int ms_count)
{
	unsigned count;
	for (count = 0; count < ((ms_count * 100000) + 1); count++)
800028b4:	00041880 	sll	v1,a0,0x2
800028b8:	000411c0 	sll	v0,a0,0x7
800028bc:	00431023 	subu	v0,v0,v1
800028c0:	00442021 	addu	a0,v0,a0
800028c4:	00041880 	sll	v1,a0,0x2
800028c8:	00832021 	addu	a0,a0,v1
800028cc:	00041880 	sll	v1,a0,0x2
800028d0:	00831821 	addu	v1,a0,v1
800028d4:	00031940 	sll	v1,v1,0x5
800028d8:	24630001 	addiu	v1,v1,1
800028dc:	00001021 	move	v0,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:65 (discriminator 3)
	{
	  asm("nop");
800028e0:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:63 (discriminator 3)
* @return None.
******************************************************************************/
void delay_ms(unsigned int ms_count)
{
	unsigned count;
	for (count = 0; count < ((ms_count * 100000) + 1); count++)
800028e4:	24420001 	addiu	v0,v0,1
800028e8:	0043202b 	sltu	a0,v0,v1
800028ec:	1480fffc 	bnez	a0,800028e0 <delay_ms+0x2c>
800028f0:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:67
	{
	  asm("nop");
	}
}
800028f4:	03e00008 	jr	ra
800028f8:	00000000 	nop

800028fc <I2C_Init>:
I2C_Init():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:82
{
	//disable the I2C core
	*WRITE_IO(axiBaseAddr + CR) = 0x00;
	
	//set the Rx FIFO depth to maximum
	*WRITE_IO(axiBaseAddr + RX_FIFO_PIRQ) = 0x0F;
800028fc:	2403000f 	li	v1,15
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:79
* @return TRUE.
******************************************************************************/
unsigned int I2C_Init(unsigned int axiBaseAddr, unsigned int i2cAddr)
{
	//disable the I2C core
	*WRITE_IO(axiBaseAddr + CR) = 0x00;
80002900:	ac800100 	sw	zero,256(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:82
	
	//set the Rx FIFO depth to maximum
	*WRITE_IO(axiBaseAddr + RX_FIFO_PIRQ) = 0x0F;
80002904:	ac830120 	sw	v1,288(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:85
	
	//reset the I2C core and flush the Tx fifo
	*WRITE_IO(axiBaseAddr + CR) = 0x02;
80002908:	24030002 	li	v1,2
8000290c:	ac830100 	sw	v1,256(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:88
	
	//enable the I2C core
	*WRITE_IO(axiBaseAddr + CR) = 0x01;
80002910:	24030001 	li	v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:91

	return 1;
}
80002914:	24020001 	li	v0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:88
	
	//reset the I2C core and flush the Tx fifo
	*WRITE_IO(axiBaseAddr + CR) = 0x02;
	
	//enable the I2C core
	*WRITE_IO(axiBaseAddr + CR) = 0x01;
80002918:	ac830100 	sw	v1,256(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:91

	return 1;
}
8000291c:	03e00008 	jr	ra
80002920:	00000000 	nop

80002924 <I2C_Read>:
I2C_Read():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:111
{
	unsigned int rxCnt   = 0;
	unsigned int timeout = 0xFFFF;

	// Reset tx fifo
	*WRITE_IO(axiBaseAddr + CR) = 0x002;
80002924:	24020002 	li	v0,2
80002928:	ac820100 	sw	v0,256(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:106
* @param rxBuf - Buffer to store the read data.
* @return Returns the number of bytes read.
******************************************************************************/
unsigned int I2C_Read(unsigned int axiBaseAddr, unsigned int i2cAddr, 
					  unsigned int regAddr, unsigned int rxSize, unsigned char* rxBuf)
{
8000292c:	8fa80010 	lw	t0,16(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:114

	// Reset tx fifo
	*WRITE_IO(axiBaseAddr + CR) = 0x002;

	// Enable iic
	*WRITE_IO(axiBaseAddr + CR) = 0x001;
80002930:	24020001 	li	v0,1
80002934:	ac820100 	sw	v0,256(a0)
80002938:	3c02000f 	lui	v0,0xf
8000293c:	24424241 	addiu	v0,v0,16961
delay_ms():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:65
void delay_ms(unsigned int ms_count)
{
	unsigned count;
	for (count = 0; count < ((ms_count * 100000) + 1); count++)
	{
	  asm("nop");
80002940:	00000000 	nop
80002944:	2442ffff 	addiu	v0,v0,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:63
* @return None.
******************************************************************************/
void delay_ms(unsigned int ms_count)
{
	unsigned count;
	for (count = 0; count < ((ms_count * 100000) + 1); count++)
80002948:	1440fffd 	bnez	v0,80002940 <I2C_Read+0x1c>
8000294c:	00000000 	nop
I2C_Read():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:118
	// Enable iic
	*WRITE_IO(axiBaseAddr + CR) = 0x001;

	 delay_ms(10);

	if(regAddr != -1)
80002950:	2402ffff 	li	v0,-1
80002954:	10c20023 	beq	a2,v0,800029e4 <I2C_Read+0xc0>
80002958:	24820108 	addiu	v0,a0,264
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:121
	{
		// Set the slave I2C address
		*WRITE_IO(axiBaseAddr + TX_FIFO) = 0x100 | (i2cAddr << 1);
8000295c:	00052840 	sll	a1,a1,0x1
80002960:	34a20100 	ori	v0,a1,0x100
80002964:	ac820108 	sw	v0,264(a0)
80002968:	24820108 	addiu	v0,a0,264
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:124
		
		// Set the slave register address
		*WRITE_IO(axiBaseAddr + TX_FIFO) = regAddr;
8000296c:	ac860108 	sw	a2,264(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:128
	}

	// Set the slave I2C address
	*WRITE_IO(axiBaseAddr + TX_FIFO) = 0x101 | (i2cAddr << 1);
80002970:	34a50101 	ori	a1,a1,0x101
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:131
	
	// Start a read transaction
	*WRITE_IO(axiBaseAddr + TX_FIFO) = 0x200 + rxSize;
80002974:	24e30200 	addiu	v1,a3,512
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:128
		// Set the slave register address
		*WRITE_IO(axiBaseAddr + TX_FIFO) = regAddr;
	}

	// Set the slave I2C address
	*WRITE_IO(axiBaseAddr + TX_FIFO) = 0x101 | (i2cAddr << 1);
80002978:	ac450000 	sw	a1,0(v0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:131
	
	// Start a read transaction
	*WRITE_IO(axiBaseAddr + TX_FIFO) = 0x200 + rxSize;
8000297c:	ac430000 	sw	v1,0(v0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:134

	// Read data from the I2C slave
	while(rxCnt < rxSize)
80002980:	10e0001a 	beqz	a3,800029ec <I2C_Read+0xc8>
80002984:	24860104 	addiu	a2,a0,260
80002988:	00001021 	move	v0,zero
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:134 (discriminator 2)
8000298c:	10000003 	b	8000299c <I2C_Read+0x78>
80002990:	3c050001 	lui	a1,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:137 (discriminator 1)
	{
		//wait for data to be available in the RxFifo
		 while((*WRITE_IO(axiBaseAddr + SR) & 0x00000040) && (timeout--));
80002994:	10a0000c 	beqz	a1,800029c8 <I2C_Read+0xa4>
80002998:	2403000f 	li	v1,15
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:137 (discriminator 2)
8000299c:	8cc30000 	lw	v1,0(a2)
800029a0:	30630040 	andi	v1,v1,0x40
800029a4:	1460fffb 	bnez	v1,80002994 <I2C_Read+0x70>
800029a8:	24a5ffff 	addiu	a1,a1,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:158
			return rxCnt;
		}
		timeout = 0xFFFF;

		//read the data
		rxBuf[rxCnt] = *READ_IO(axiBaseAddr + RX_FIFO) & 0xFFFF;
800029ac:	8c85010c 	lw	a1,268(a0)
800029b0:	01021821 	addu	v1,t0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:161

		//increment the receive counter
		rxCnt++;
800029b4:	24420001 	addiu	v0,v0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:134
	
	// Start a read transaction
	*WRITE_IO(axiBaseAddr + TX_FIFO) = 0x200 + rxSize;

	// Read data from the I2C slave
	while(rxCnt < rxSize)
800029b8:	1447fff4 	bne	v0,a3,8000298c <I2C_Read+0x68>
800029bc:	a0650000 	sb	a1,0(v1)
800029c0:	03e00008 	jr	ra
800029c4:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:142
		 while((*WRITE_IO(axiBaseAddr + SR) & 0x00000040) && (timeout--));

		if(timeout == -1)
		{
			//disable the I2C core
			*WRITE_IO(axiBaseAddr + CR) = 0x00;
800029c8:	ac800100 	sw	zero,256(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:145

			//set the Rx FIFO depth to maximum
			*WRITE_IO(axiBaseAddr + RX_FIFO_PIRQ) = 0x0F;
800029cc:	ac830120 	sw	v1,288(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:148

			//reset the I2C core and flush the Tx fifo
			*WRITE_IO(axiBaseAddr + CR) = 0x02;
800029d0:	24030002 	li	v1,2
800029d4:	ac830100 	sw	v1,256(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:151

			//enable the I2C core
			*WRITE_IO(axiBaseAddr + CR) = 0x01;
800029d8:	24030001 	li	v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:167
	}

	 // delay_ms(10);

	return rxCnt;
}
800029dc:	03e00008 	jr	ra
800029e0:	ac830100 	sw	v1,256(a0)
800029e4:	1000ffe2 	b	80002970 <I2C_Read+0x4c>
800029e8:	00052840 	sll	a1,a1,0x1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:107
* @return Returns the number of bytes read.
******************************************************************************/
unsigned int I2C_Read(unsigned int axiBaseAddr, unsigned int i2cAddr, 
					  unsigned int regAddr, unsigned int rxSize, unsigned char* rxBuf)
{
	unsigned int rxCnt   = 0;
800029ec:	03e00008 	jr	ra
800029f0:	00001021 	move	v0,zero

800029f4 <I2C_Write>:
I2C_Write():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:186
			   unsigned int txSize, unsigned char* txBuf)
{
	unsigned int txCnt = 0;

	// Reset tx fifo
	*WRITE_IO(axiBaseAddr + CR) = 0x002;
800029f4:	24020002 	li	v0,2
800029f8:	ac820100 	sw	v0,256(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:182
* @param txBuf - Buffer to store the data to be transmitted.
* @return Returns the number of bytes written.
******************************************************************************/
void I2C_Write(unsigned int axiBaseAddr, unsigned int i2cAddr, unsigned int regAddr, 
			   unsigned int txSize, unsigned char* txBuf)
{
800029fc:	8fa80010 	lw	t0,16(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:189

	// Reset tx fifo
	*WRITE_IO(axiBaseAddr + CR) = 0x002;
	
	// enable iic
	*WRITE_IO(axiBaseAddr + CR) = 0x001;
80002a00:	24020001 	li	v0,1
80002a04:	ac820100 	sw	v0,256(a0)
80002a08:	3c02000f 	lui	v0,0xf
80002a0c:	24424241 	addiu	v0,v0,16961
delay_ms():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:65
void delay_ms(unsigned int ms_count)
{
	unsigned count;
	for (count = 0; count < ((ms_count * 100000) + 1); count++)
	{
	  asm("nop");
80002a10:	00000000 	nop
80002a14:	2442ffff 	addiu	v0,v0,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:63
* @return None.
******************************************************************************/
void delay_ms(unsigned int ms_count)
{
	unsigned count;
	for (count = 0; count < ((ms_count * 100000) + 1); count++)
80002a18:	1440fffd 	bnez	v0,80002a10 <I2C_Write+0x1c>
80002a1c:	00000000 	nop
I2C_Write():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:194
	*WRITE_IO(axiBaseAddr + CR) = 0x001;

	delay_ms(10);

	// Set the I2C address
	*WRITE_IO(axiBaseAddr + TX_FIFO) = 0x100 | (i2cAddr << 1);
80002a20:	00051040 	sll	v0,a1,0x1
80002a24:	34420100 	ori	v0,v0,0x100
80002a28:	ac820108 	sw	v0,264(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:196

	if(regAddr != -1)
80002a2c:	2402ffff 	li	v0,-1
80002a30:	10c20002 	beq	a2,v0,80002a3c <I2C_Write+0x48>
80002a34:	24850108 	addiu	a1,a0,264
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:199
	{
		// Set the slave register address
		*WRITE_IO(axiBaseAddr + TX_FIFO) = regAddr;
80002a38:	ac860108 	sw	a2,264(a0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:203
	}

	// Write data to the I2C slave
	while(txCnt < txSize)
80002a3c:	10e00009 	beqz	a3,80002a64 <I2C_Write+0x70>
80002a40:	00001021 	move	v0,zero
80002a44:	24e4ffff 	addiu	a0,a3,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:206
	{
		// put the Tx data into the Tx FIFO
		*WRITE_IO(axiBaseAddr + TX_FIFO) = (txCnt == txSize - 1) ? (0x200 | txBuf[txCnt]) : txBuf[txCnt];
80002a48:	01043021 	addu	a2,t0,a0
80002a4c:	5082000d 	beql	a0,v0,80002a84 <I2C_Write+0x90>
80002a50:	90c30000 	lbu	v1,0(a2)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:206 (discriminator 2)
80002a54:	7d02198a 	lbux	v1,v0(t0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:207 (discriminator 4)
		txCnt++;
80002a58:	24420001 	addiu	v0,v0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:203 (discriminator 4)
		// Set the slave register address
		*WRITE_IO(axiBaseAddr + TX_FIFO) = regAddr;
	}

	// Write data to the I2C slave
	while(txCnt < txSize)
80002a5c:	1447fffb 	bne	v0,a3,80002a4c <I2C_Write+0x58>
80002a60:	aca30000 	sw	v1,0(a1)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:203
80002a64:	3c02000f 	lui	v0,0xf
80002a68:	24424241 	addiu	v0,v0,16961
delay_ms():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:65
void delay_ms(unsigned int ms_count)
{
	unsigned count;
	for (count = 0; count < ((ms_count * 100000) + 1); count++)
	{
	  asm("nop");
80002a6c:	00000000 	nop
80002a70:	2442ffff 	addiu	v0,v0,-1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/i2c.c:63
* @return None.
******************************************************************************/
void delay_ms(unsigned int ms_count)
{
	unsigned count;
	for (count = 0; count < ((ms_count * 100000) + 1); count++)
80002a74:	1440fffd 	bnez	v0,80002a6c <I2C_Write+0x78>
80002a78:	00000000 	nop
80002a7c:	03e00008 	jr	ra
80002a80:	00000000 	nop
I2C_Write():
80002a84:	1000fff4 	b	80002a58 <I2C_Write+0x64>
80002a88:	34630200 	ori	v1,v1,0x200

80002a8c <main>:
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:67
volatile unsigned int len = 0;

//------------------
// main()
//------------------
int main() {
80002a8c:	27bdffa0 	addiu	sp,sp,-96
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:68
	volatile unsigned int pushbutton, count = 0xF;
80002a90:	2402000f 	li	v0,15
80002a94:	afa20044 	sw	v0,68(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:69
	volatile unsigned int j = 1;
80002a98:	24020001 	li	v0,1
80002a9c:	afa20040 	sw	v0,64(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:72


	*WRITE_IO(UART_BASE + lcr) = 0x00000080; // LCR[7]  is 1
80002aa0:	24030080 	li	v1,128
80002aa4:	3c02b040 	lui	v0,0xb040
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:67
volatile unsigned int len = 0;

//------------------
// main()
//------------------
int main() {
80002aa8:	afbf005c 	sw	ra,92(sp)
80002aac:	afb30058 	sw	s3,88(sp)
80002ab0:	afb20054 	sw	s2,84(sp)
80002ab4:	afb10050 	sw	s1,80(sp)
80002ab8:	afb0004c 	sw	s0,76(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:72
	volatile unsigned int pushbutton, count = 0xF;
	volatile unsigned int j = 1;


	*WRITE_IO(UART_BASE + lcr) = 0x00000080; // LCR[7]  is 1
80002abc:	ac43100c 	sw	v1,4108(v0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002ac0:	afa00038 	sw	zero,56(sp)
80002ac4:	8fa20038 	lw	v0,56(sp)
80002ac8:	2c422710 	sltiu	v0,v0,10000
80002acc:	10400008 	beqz	v0,80002af0 <main+0x64>
80002ad0:	3c02b040 	lui	v0,0xb040
80002ad4:	8fa20038 	lw	v0,56(sp)
80002ad8:	24420001 	addiu	v0,v0,1
80002adc:	afa20038 	sw	v0,56(sp)
80002ae0:	8fa20038 	lw	v0,56(sp)
80002ae4:	2c422710 	sltiu	v0,v0,10000
80002ae8:	1440fffa 	bnez	v0,80002ad4 <main+0x48>
80002aec:	3c02b040 	lui	v0,0xb040
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:74
	volatile unsigned int j = 1;


	*WRITE_IO(UART_BASE + lcr) = 0x00000080; // LCR[7]  is 1
	delay();
	*WRITE_IO(UART_BASE + dll) = 27; // DLL msb. 115200 at 50MHz. Formula is Clk/16/baudrate. From axi_uart manual.
80002af0:	2403001b 	li	v1,27
80002af4:	ac431000 	sw	v1,4096(v0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002af8:	afa00034 	sw	zero,52(sp)
80002afc:	8fa20034 	lw	v0,52(sp)
80002b00:	2c422710 	sltiu	v0,v0,10000
80002b04:	10400008 	beqz	v0,80002b28 <main+0x9c>
80002b08:	3c02b040 	lui	v0,0xb040
80002b0c:	8fa20034 	lw	v0,52(sp)
80002b10:	24420001 	addiu	v0,v0,1
80002b14:	afa20034 	sw	v0,52(sp)
80002b18:	8fa20034 	lw	v0,52(sp)
80002b1c:	2c422710 	sltiu	v0,v0,10000
80002b20:	1440fffa 	bnez	v0,80002b0c <main+0x80>
80002b24:	3c02b040 	lui	v0,0xb040
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:76

	*WRITE_IO(UART_BASE + lcr) = 0x00000080; // LCR[7]  is 1
	delay();
	*WRITE_IO(UART_BASE + dll) = 27; // DLL msb. 115200 at 50MHz. Formula is Clk/16/baudrate. From axi_uart manual.
	delay();
	*WRITE_IO(UART_BASE + dlm) = 0x00000000; // DLL lsb.
80002b28:	ac401004 	sw	zero,4100(v0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002b2c:	afa00030 	sw	zero,48(sp)
80002b30:	8fa20030 	lw	v0,48(sp)
80002b34:	2c422710 	sltiu	v0,v0,10000
80002b38:	10400008 	beqz	v0,80002b5c <main+0xd0>
80002b3c:	3c02b040 	lui	v0,0xb040
80002b40:	8fa20030 	lw	v0,48(sp)
80002b44:	24420001 	addiu	v0,v0,1
80002b48:	afa20030 	sw	v0,48(sp)
80002b4c:	8fa20030 	lw	v0,48(sp)
80002b50:	2c422710 	sltiu	v0,v0,10000
80002b54:	1440fffa 	bnez	v0,80002b40 <main+0xb4>
80002b58:	3c02b040 	lui	v0,0xb040
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:78
	delay();
	*WRITE_IO(UART_BASE + dll) = 27; // DLL msb. 115200 at 50MHz. Formula is Clk/16/baudrate. From axi_uart manual.
	delay();
	*WRITE_IO(UART_BASE + dlm) = 0x00000000; // DLL lsb.
	delay();
	*WRITE_IO(UART_BASE + lcr) = 0x00000003; // LCR register. 8n1 parity disabled
80002b5c:	24030003 	li	v1,3
80002b60:	ac43100c 	sw	v1,4108(v0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002b64:	afa0002c 	sw	zero,44(sp)
80002b68:	8fa2002c 	lw	v0,44(sp)
80002b6c:	2c422710 	sltiu	v0,v0,10000
80002b70:	10400008 	beqz	v0,80002b94 <main+0x108>
80002b74:	3c02b040 	lui	v0,0xb040
80002b78:	8fa2002c 	lw	v0,44(sp)
80002b7c:	24420001 	addiu	v0,v0,1
80002b80:	afa2002c 	sw	v0,44(sp)
80002b84:	8fa2002c 	lw	v0,44(sp)
80002b88:	2c422710 	sltiu	v0,v0,10000
80002b8c:	1440fffa 	bnez	v0,80002b78 <main+0xec>
80002b90:	3c02b040 	lui	v0,0xb040
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:80
	delay();
	*WRITE_IO(UART_BASE + dlm) = 0x00000000; // DLL lsb.
	delay();
	*WRITE_IO(UART_BASE + lcr) = 0x00000003; // LCR register. 8n1 parity disabled
	delay();
	*WRITE_IO(UART_BASE + ier) = 0x00000000; // IER register. disable interrupts
80002b94:	ac401004 	sw	zero,4100(v0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002b98:	afa00028 	sw	zero,40(sp)
80002b9c:	8fa20028 	lw	v0,40(sp)
80002ba0:	2c422710 	sltiu	v0,v0,10000
80002ba4:	10400008 	beqz	v0,80002bc8 <main+0x13c>
80002ba8:	3c02b040 	lui	v0,0xb040
80002bac:	8fa20028 	lw	v0,40(sp)
80002bb0:	24420001 	addiu	v0,v0,1
80002bb4:	afa20028 	sw	v0,40(sp)
80002bb8:	8fa20028 	lw	v0,40(sp)
80002bbc:	2c422710 	sltiu	v0,v0,10000
80002bc0:	1440fffa 	bnez	v0,80002bac <main+0x120>
80002bc4:	3c02b040 	lui	v0,0xb040
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:83
	*WRITE_IO(UART_BASE + lcr) = 0x00000003; // LCR register. 8n1 parity disabled
	delay();
	*WRITE_IO(UART_BASE + ier) = 0x00000000; // IER register. disable interrupts
	delay();
		
	*WRITE_IO(UART_BASE + ier) = 0x00000001; // IER register. Enables Receiver Line Status and Received Data Interrupts
80002bc8:	24030001 	li	v1,1
80002bcc:	ac431004 	sw	v1,4100(v0)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002bd0:	afa00024 	sw	zero,36(sp)
80002bd4:	8fa20024 	lw	v0,36(sp)
80002bd8:	2c422710 	sltiu	v0,v0,10000
80002bdc:	10400008 	beqz	v0,80002c00 <main+0x174>
80002be0:	00000000 	nop
80002be4:	8fa20024 	lw	v0,36(sp)
80002be8:	24420001 	addiu	v0,v0,1
80002bec:	afa20024 	sw	v0,36(sp)
80002bf0:	8fa20024 	lw	v0,36(sp)
80002bf4:	2c422710 	sltiu	v0,v0,10000
80002bf8:	1440fffa 	bnez	v0,80002be4 <main+0x158>
80002bfc:	00000000 	nop
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:88
	*WRITE_IO(UART_BASE + ier) = 0x00000001; // IER register. Enables Receiver Line Status and Received Data Interrupts
	delay();
	
	// Begin ADT7420 test
	// Initialize ADT7420 Device
	ADT7420_Init();
80002c00:	0c000576 	jal	800015d8 <ADT7420_Init>
80002c04:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:90

	*WRITE_IO(SEGM_BASE) = 0;
80002c08:	3c02b1a0 	lui	v0,0xb1a0
80002c0c:	ac400000 	sw	zero,0(v0)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:94
	// Display Main Menu on UART
	//ADT7420_DisplayMainMenu();

	volatile int signal = 0;
80002c10:	afa0003c 	sw	zero,60(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:95
	  Display_Temp(ADT7420_ReadTemp());	//send temp
80002c14:	0c000697 	jal	80001a5c <ADT7420_ReadTemp>
80002c18:	3c108000 	lui	s0,0x8000
80002c1c:	0c0006b4 	jal	80001ad0 <Display_Temp>
80002c20:	7c022620 	seh	a0,v0
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:96
		Display_Switch();					//send switch
80002c24:	0c000431 	jal	800010c4 <Display_Switch>
80002c28:	26102eac 	addiu	s0,s0,11948
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
80002c2c:	3c13b040 	lui	s3,0xb040
80002c30:	2411000a 	li	s1,10
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:112
		uart_print("\n");


		if (rxData == 'L')
		{
			s[1] = uart_inbyte();
80002c34:	3c128000 	lui	s2,0x8000
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:97
	//ADT7420_DisplayMainMenu();

	volatile int signal = 0;
	  Display_Temp(ADT7420_ReadTemp());	//send temp
		Display_Switch();					//send switch
	while(!signal)
80002c38:	8fa2003c 	lw	v0,60(sp)
80002c3c:	1440004b 	bnez	v0,80002d6c <main+0x2e0>
80002c40:	8fbf005c 	lw	ra,92(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:103
    {

   		//Display_Temp(ADT7420_ReadTemp());	//send temp
		//Display_Switch();					//send switch
	
		rxData = uart_inbyte();	
80002c44:	0c00048c 	jal	80001230 <uart_inbyte>
80002c48:	00000000 	nop
80002c4c:	af82800c 	sw	v0,-32756(gp)
80002c50:	02001821 	move	v1,s0
80002c54:	24020072 	li	v0,114
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
80002c58:	ae621000 	sw	v0,4096(s3)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002c5c:	afa00020 	sw	zero,32(sp)
80002c60:	8fa20020 	lw	v0,32(sp)
80002c64:	2c422710 	sltiu	v0,v0,10000
80002c68:	50400009 	beqzl	v0,80002c90 <main+0x204>
80002c6c:	24630001 	addiu	v1,v1,1
80002c70:	8fa20020 	lw	v0,32(sp)
80002c74:	24420001 	addiu	v0,v0,1
80002c78:	afa20020 	sw	v0,32(sp)
80002c7c:	8fa20020 	lw	v0,32(sp)
80002c80:	2c422710 	sltiu	v0,v0,10000
80002c84:	1440fffa 	bnez	v0,80002c70 <main+0x1e4>
80002c88:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:211

void uart_print(const char *ptr)
{
	while (*ptr) {
		uart_outbyte (*ptr);
		ptr++;
80002c8c:	24630001 	addiu	v1,v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80002c90:	90620000 	lbu	v0,0(v1)
80002c94:	1440fff0 	bnez	v0,80002c58 <main+0x1cc>
80002c98:	00000000 	nop
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:106
		//Display_Switch();					//send switch
	
		rxData = uart_inbyte();	
		uart_print("receive\n");
		
		uart_print(my_itoa(rxData));
80002c9c:	8f84800c 	lw	a0,-32756(gp)
80002ca0:	0c000533 	jal	800014cc <my_itoa>
80002ca4:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80002ca8:	90430000 	lbu	v1,0(v0)
80002cac:	10600012 	beqz	v1,80002cf8 <main+0x26c>
80002cb0:	00000000 	nop
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
80002cb4:	ae631000 	sw	v1,4096(s3)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002cb8:	afa0001c 	sw	zero,28(sp)
80002cbc:	8fa3001c 	lw	v1,28(sp)
80002cc0:	2c632710 	sltiu	v1,v1,10000
80002cc4:	50600009 	beqzl	v1,80002cec <main+0x260>
80002cc8:	24420001 	addiu	v0,v0,1
80002ccc:	8fa3001c 	lw	v1,28(sp)
80002cd0:	24630001 	addiu	v1,v1,1
80002cd4:	afa3001c 	sw	v1,28(sp)
80002cd8:	8fa3001c 	lw	v1,28(sp)
80002cdc:	2c632710 	sltiu	v1,v1,10000
80002ce0:	1460fffa 	bnez	v1,80002ccc <main+0x240>
80002ce4:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:211

void uart_print(const char *ptr)
{
	while (*ptr) {
		uart_outbyte (*ptr);
		ptr++;
80002ce8:	24420001 	addiu	v0,v0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80002cec:	90430000 	lbu	v1,0(v0)
80002cf0:	1460fff0 	bnez	v1,80002cb4 <main+0x228>
80002cf4:	00000000 	nop
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
80002cf8:	ae711000 	sw	s1,4096(s3)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002cfc:	afa00018 	sw	zero,24(sp)
80002d00:	8fa20018 	lw	v0,24(sp)
80002d04:	2c422710 	sltiu	v0,v0,10000
80002d08:	10400008 	beqz	v0,80002d2c <main+0x2a0>
80002d0c:	00000000 	nop
80002d10:	8fa20018 	lw	v0,24(sp)
80002d14:	24420001 	addiu	v0,v0,1
80002d18:	afa20018 	sw	v0,24(sp)
80002d1c:	8fa20018 	lw	v0,24(sp)
80002d20:	2c422710 	sltiu	v0,v0,10000
80002d24:	1440fffa 	bnez	v0,80002d10 <main+0x284>
80002d28:	00000000 	nop
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:110
		
		uart_print(my_itoa(rxData));
		uart_print("\n");


		if (rxData == 'L')
80002d2c:	8f83800c 	lw	v1,-32756(gp)
80002d30:	2402004c 	li	v0,76
80002d34:	1062002b 	beq	v1,v0,80002de4 <main+0x358>
80002d38:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:118
			uart_print("receive\n");
			uart_print(my_itoa(s[1]));
			Rev_Led();
			rxData = 0;
		}
		else if (rxData == 'P')
80002d3c:	8f83800c 	lw	v1,-32756(gp)
80002d40:	24020050 	li	v0,80
80002d44:	10620010 	beq	v1,v0,80002d88 <main+0x2fc>
80002d48:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:126
			Rev_Pwm();
			*WRITE_IO(SEGM_BASE) = s[1] - 0x30;
			rxData =0;

		}
		else if (rxData == 'Q')
80002d4c:	8f83800c 	lw	v1,-32756(gp)
80002d50:	24020051 	li	v0,81
80002d54:	1462ffb8 	bne	v1,v0,80002c38 <main+0x1ac>
80002d58:	24020001 	li	v0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:128
		{
			signal = 1;
80002d5c:	afa2003c 	sw	v0,60(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:97
	//ADT7420_DisplayMainMenu();

	volatile int signal = 0;
	  Display_Temp(ADT7420_ReadTemp());	//send temp
		Display_Switch();					//send switch
	while(!signal)
80002d60:	8fa2003c 	lw	v0,60(sp)
80002d64:	1040ffb7 	beqz	v0,80002c44 <main+0x1b8>
80002d68:	8fbf005c 	lw	ra,92(sp)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:133
			signal = 1;
		}
    }
			
	return 0;
}
80002d6c:	8fb30058 	lw	s3,88(sp)
80002d70:	8fb20054 	lw	s2,84(sp)
80002d74:	8fb10050 	lw	s1,80(sp)
80002d78:	8fb0004c 	lw	s0,76(sp)
80002d7c:	00001021 	move	v0,zero
80002d80:	03e00008 	jr	ra
80002d84:	27bd0060 	addiu	sp,sp,96
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:120
			Rev_Led();
			rxData = 0;
		}
		else if (rxData == 'P')
		{		
			s[1] = uart_inbyte();
80002d88:	0c00048c 	jal	80001230 <uart_inbyte>
80002d8c:	00000000 	nop
Rev_Pwm():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:139

void Rev_Pwm(){			//injput_data: 0~9
	//unsigned int RecievedByte;
	//RecievedByte = *READ_IO(UART_BASE + rbr);

	*WRITE_IO(PWM_BASE) = 110000 * (s[1] - 0x30);
80002d90:	2445ffd0 	addiu	a1,v0,-48
80002d94:	00051980 	sll	v1,a1,0x6
80002d98:	00052200 	sll	a0,a1,0x8
80002d9c:	00832023 	subu	a0,a0,v1
80002da0:	00851823 	subu	v1,a0,a1
80002da4:	000320c0 	sll	a0,v1,0x3
80002da8:	00641821 	addu	v1,v1,a0
80002dac:	00031880 	sll	v1,v1,0x2
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:120
			Rev_Led();
			rxData = 0;
		}
		else if (rxData == 'P')
		{		
			s[1] = uart_inbyte();
80002db0:	26443634 	addiu	a0,s2,13876
Rev_Pwm():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:139

void Rev_Pwm(){			//injput_data: 0~9
	//unsigned int RecievedByte;
	//RecievedByte = *READ_IO(UART_BASE + rbr);

	*WRITE_IO(PWM_BASE) = 110000 * (s[1] - 0x30);
80002db4:	00651823 	subu	v1,v1,a1
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:120
			Rev_Led();
			rxData = 0;
		}
		else if (rxData == 'P')
		{		
			s[1] = uart_inbyte();
80002db8:	a0820001 	sb	v0,1(a0)
Rev_Pwm():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:139

void Rev_Pwm(){			//injput_data: 0~9
	//unsigned int RecievedByte;
	//RecievedByte = *READ_IO(UART_BASE + rbr);

	*WRITE_IO(PWM_BASE) = 110000 * (s[1] - 0x30);
80002dbc:	00031900 	sll	v1,v1,0x4
80002dc0:	3c02b0c0 	lui	v0,0xb0c0
80002dc4:	ac430000 	sw	v1,0(v0)
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:122
		}
		else if (rxData == 'P')
		{		
			s[1] = uart_inbyte();
			Rev_Pwm();
			*WRITE_IO(SEGM_BASE) = s[1] - 0x30;
80002dc8:	90820001 	lbu	v0,1(a0)
80002dcc:	3c03b1a0 	lui	v1,0xb1a0
80002dd0:	2442ffd0 	addiu	v0,v0,-48
80002dd4:	ac620000 	sw	v0,0(v1)
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:123
			rxData =0;
80002dd8:	af80800c 	sw	zero,-32756(gp)
80002ddc:	1000ff96 	b	80002c38 <main+0x1ac>
80002de0:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:112
		uart_print("\n");


		if (rxData == 'L')
		{
			s[1] = uart_inbyte();
80002de4:	0c00048c 	jal	80001230 <uart_inbyte>
80002de8:	00000000 	nop
80002dec:	26443634 	addiu	a0,s2,13876
80002df0:	a0820001 	sb	v0,1(a0)
80002df4:	02001821 	move	v1,s0
80002df8:	24020072 	li	v0,114
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
80002dfc:	ae621000 	sw	v0,4096(s3)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002e00:	afa00014 	sw	zero,20(sp)
80002e04:	8fa20014 	lw	v0,20(sp)
80002e08:	2c422710 	sltiu	v0,v0,10000
80002e0c:	50400009 	beqzl	v0,80002e34 <main+0x3a8>
80002e10:	24630001 	addiu	v1,v1,1
80002e14:	8fa20014 	lw	v0,20(sp)
80002e18:	24420001 	addiu	v0,v0,1
80002e1c:	afa20014 	sw	v0,20(sp)
80002e20:	8fa20014 	lw	v0,20(sp)
80002e24:	2c422710 	sltiu	v0,v0,10000
80002e28:	1440fffa 	bnez	v0,80002e14 <main+0x388>
80002e2c:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:211

void uart_print(const char *ptr)
{
	while (*ptr) {
		uart_outbyte (*ptr);
		ptr++;
80002e30:	24630001 	addiu	v1,v1,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80002e34:	90620000 	lbu	v0,0(v1)
80002e38:	1440fff0 	bnez	v0,80002dfc <main+0x370>
80002e3c:	00000000 	nop
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:114

		if (rxData == 'L')
		{
			s[1] = uart_inbyte();
			uart_print("receive\n");
			uart_print(my_itoa(s[1]));
80002e40:	0c000533 	jal	800014cc <my_itoa>
80002e44:	90840001 	lbu	a0,1(a0)
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80002e48:	90430000 	lbu	v1,0(v0)
80002e4c:	10600012 	beqz	v1,80002e98 <main+0x40c>
80002e50:	00000000 	nop
uart_outbyte():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:181

	for (j = 0; j < (10000); j++) ;	// delay 
}

void uart_outbyte(char c) {
	*WRITE_IO(UART_BASE + thr) = (unsigned int) c;
80002e54:	ae631000 	sw	v1,4096(s3)
delay():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:177
}

void delay() {
	volatile unsigned int j;

	for (j = 0; j < (10000); j++) ;	// delay 
80002e58:	afa00010 	sw	zero,16(sp)
80002e5c:	8fa30010 	lw	v1,16(sp)
80002e60:	2c632710 	sltiu	v1,v1,10000
80002e64:	50600009 	beqzl	v1,80002e8c <main+0x400>
80002e68:	24420001 	addiu	v0,v0,1
80002e6c:	8fa30010 	lw	v1,16(sp)
80002e70:	24630001 	addiu	v1,v1,1
80002e74:	afa30010 	sw	v1,16(sp)
80002e78:	8fa30010 	lw	v1,16(sp)
80002e7c:	2c632710 	sltiu	v1,v1,10000
80002e80:	1460fffa 	bnez	v1,80002e6c <main+0x3e0>
80002e84:	00000000 	nop
uart_print():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:211

void uart_print(const char *ptr)
{
	while (*ptr) {
		uart_outbyte (*ptr);
		ptr++;
80002e88:	24420001 	addiu	v0,v0,1
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:209
	return (char)RecievedByte;
}

void uart_print(const char *ptr)
{
	while (*ptr) {
80002e8c:	90430000 	lbu	v1,0(v0)
80002e90:	1460fff0 	bnez	v1,80002e54 <main+0x3c8>
80002e94:	00000000 	nop
main():
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:115
		if (rxData == 'L')
		{
			s[1] = uart_inbyte();
			uart_print("receive\n");
			uart_print(my_itoa(s[1]));
			Rev_Led();
80002e98:	0c000410 	jal	80001040 <Rev_Led>
80002e9c:	00000000 	nop
D:\MIPSfpga_ADT7420_C\MIPSfpga_ADT7420_C/main.c:116
			rxData = 0;
80002ea0:	af80800c 	sw	zero,-32756(gp)
80002ea4:	1000ff64 	b	80002c38 <main+0x1ac>
80002ea8:	00000000 	nop
80002eac:	65636572 	0x65636572
80002eb0:	0a657669 	j	8995d9a4 <_gp+0x9952384>
80002eb4:	00000000 	nop
80002eb8:	454d4954 	bc1any4t	$fcc3,8001540c <_gp+0x9dec>
80002ebc:	6e692052 	0x6e692052
80002ec0:	72726574 	q16sll	xr5,xr9,xr9,xr12,9
80002ec4:	73747075 	q16slr	xr1,xr12,xr1,xr13,13
80002ec8:	63636f20 	0x63636f20
80002ecc:	65727275 	0x65727275
80002ed0:	0d0a2164 	jal	84288590 <_gp+0x427cf70>
80002ed4:	00000000 	nop
80002ed8:	204d5750 	addi	t5,v0,22352
80002edc:	65746e69 	0x65746e69
80002ee0:	70757272 	0x70757272
80002ee4:	6f207374 	0x6f207374
80002ee8:	72756363 	s8std	xr13,s3,88,
80002eec:	21646572 	addi	a0,t3,25970
80002ef0:	00000d0a 	0xd0a
80002ef4:	6568744f 	0x6568744f
80002ef8:	6e692072 	0x6e692072
80002efc:	72726574 	q16sll	xr5,xr9,xr9,xr12,9
80002f00:	73747075 	q16slr	xr1,xr12,xr1,xr13,13
80002f04:	63636f20 	0x63636f20
80002f08:	65727275 	0x65727275
80002f0c:	0d0a2164 	jal	84288590 <_gp+0x427cf70>
80002f10:	00000000 	nop
80002f14:	69766552 	0x69766552
80002f18:	6e6f6973 	0x6e6f6973
80002f1c:	20444920 	addi	a0,v0,18720
80002f20:	0000203d 	0x203d
80002f24:	756e614d 	jalx	85b98534 <_gp+0x5b8cf14>
80002f28:	74636166 	jalx	818d8598 <_gp+0x18ccf78>
80002f2c:	20657275 	addi	a1,v1,29301
80002f30:	3d204449 	0x3d204449
80002f34:	00000020 	add	zero,zero,zero
80002f38:	2d2d2d2d 	sltiu	t5,t1,11565
80002f3c:	2d2d2d2d 	sltiu	t5,t1,11565
80002f40:	2d2d2d2d 	sltiu	t5,t1,11565
80002f44:	2d2d2d2d 	sltiu	t5,t1,11565
80002f48:	2d2d2d2d 	sltiu	t5,t1,11565
80002f4c:	2d2d2d2d 	sltiu	t5,t1,11565
80002f50:	2d2d2d2d 	sltiu	t5,t1,11565
80002f54:	2d2d2d2d 	sltiu	t5,t1,11565
80002f58:	2d2d2d2d 	sltiu	t5,t1,11565
80002f5c:	2d2d2d2d 	sltiu	t5,t1,11565
80002f60:	000d0a2d 	0xd0a2d
80002f64:	44410d0a 	0x44410d0a
80002f68:	32343754 	andi	s4,s1,0x3754
80002f6c:	65442030 	0x65442030
80002f70:	50206f6d 	beqzl	at,8001ed28 <_gp+0x13708>
80002f74:	72676f72 	0x72676f72
80002f78:	0a206d61 	j	8881b584 <_gp+0x880ff64>
80002f7c:	0000000d 	break
80002f80:	69617641 	0x69617641
80002f84:	6c62616c 	0x6c62616c
80002f88:	706f2065 	s8sdi	xr1,v1,-56,ptn3
80002f8c:	6e6f6974 	0x6e6f6974
80002f90:	0a203a73 	j	8880e9cc <_gp+0x88033ac>
80002f94:	0000000d 	break
80002f98:	5d745b09 	0x5d745b09
80002f9c:	61655220 	0x61655220
80002fa0:	65542064 	0x65542064
80002fa4:	7265706d 	s16sdi	xr1,s3,-328,ptn0
80002fa8:	72757461 	0x72757461
80002fac:	000d0a65 	0xd0a65
80002fb0:	5d725b09 	0x5d725b09
80002fb4:	74655320 	jalx	81954c80 <_gp+0x1949660>
80002fb8:	73655220 	0x73655220
80002fbc:	74756c6f 	jalx	81d5b1bc <_gp+0x1d4fb9c>
80002fc0:	0a6e6f69 	j	89b9bda4 <_gp+0x9b90784>
80002fc4:	0000000d 	break
80002fc8:	5d685b09 	0x5d685b09
80002fcc:	74655320 	jalx	81954c80 <_gp+0x1949660>
80002fd0:	69485420 	0x69485420
80002fd4:	0d0a6867 	jal	8429a19c <_gp+0x428eb7c>
80002fd8:	00000000 	nop
80002fdc:	5d6c5b09 	0x5d6c5b09
80002fe0:	74655320 	jalx	81954c80 <_gp+0x1949660>
80002fe4:	6f4c5420 	0x6f4c5420
80002fe8:	000d0a77 	0xd0a77
80002fec:	5d635b09 	0x5d635b09
80002ff0:	74655320 	jalx	81954c80 <_gp+0x1949660>
80002ff4:	72435420 	0x72435420
80002ff8:	0d0a7469 	jal	8429d1a4 <_gp+0x4291b84>
80002ffc:	00000000 	nop
80003000:	5d795b09 	0x5d795b09
80003004:	74655320 	jalx	81954c80 <_gp+0x1949660>
80003008:	79485420 	ld.b	$w16,328(t2)
8000300c:	0d0a7473 	jal	8429d1cc <_gp+0x4291bac>
80003010:	00000000 	nop
80003014:	5d665b09 	0x5d665b09
80003018:	74655320 	jalx	81954c80 <_gp+0x1949660>
8000301c:	75614620 	jalx	85851880 <_gp+0x5846260>
80003020:	5120746c 	beqzl	t1,800201d4 <_gp+0x14bb4>
80003024:	65756575 	0x65756575
80003028:	00000d0a 	0xd0a
8000302c:	5d735b09 	0x5d735b09
80003030:	73694420 	0x73694420
80003034:	79616c70 	0x79616c70
80003038:	74655320 	jalx	81954c80 <_gp+0x1949660>
8000303c:	676e6974 	0x676e6974
80003040:	0d0a2073 	jal	842881cc <_gp+0x427cbac>
80003044:	00000000 	nop
80003048:	5d6d5b09 	0x5d6d5b09
8000304c:	6f745320 	0x6f745320
80003050:	68742070 	0x68742070
80003054:	72702065 	s8sdi	xr1,s3,8,
80003058:	6172676f 	0x6172676f
8000305c:	6e61206d 	0x6e61206d
80003060:	69642064 	0x69642064
80003064:	616c7073 	0x616c7073
80003068:	68742079 	0x68742079
8000306c:	6d207369 	0x6d207369
80003070:	0a756e65 	j	89d5b994 <_gp+0x9d50374>
80003074:	0000000d 	break
80003078:	73657250 	s32ldd	xr9,k1,1392
8000307c:	656b2073 	0x656b2073
80003080:	6f742079 	0x6f742079
80003084:	6c657320 	0x6c657320
80003088:	20746365 	addi	s4,v1,25445
8000308c:	69736564 	0x69736564
80003090:	20646572 	addi	a0,v1,25970
80003094:	6974706f 	0x6974706f
80003098:	0d0a6e6f 	jal	8429b9bc <_gp+0x429039c>
8000309c:	00000000 	nop
800030a0:	73657250 	s32ldd	xr9,k1,1392
800030a4:	715b2073 	d32sar	xr1,xr8,xr12,xr6,5
800030a8:	6f74205d 	0x6f74205d
800030ac:	69786520 	0x69786520
800030b0:	68742074 	0x68742074
800030b4:	70612065 	s8sdi	xr1,v1,72,ptn0
800030b8:	63696c70 	0x63696c70
800030bc:	6f697461 	0x6f697461
800030c0:	000d0a6e 	0xd0a6e
800030c4:	76410d0a 	jalx	89043428 <_gp+0x9037e08>
800030c8:	616c6961 	0x616c6961
800030cc:	20656c62 	addi	a1,v1,27746
800030d0:	6974706f 	0x6974706f
800030d4:	3a736e6f 	xori	s3,s3,0x6e6f
800030d8:	000d0a20 	0xd0a20
800030dc:	6f736552 	0x6f736552
800030e0:	6974756c 	0x6974756c
800030e4:	69206e6f 	0x69206e6f
800030e8:	33312073 	andi	s1,t9,0x2073
800030ec:	74696220 	jalx	81a58880 <_gp+0x1a4d260>
800030f0:	30282073 	andi	t0,at,0x2073
800030f4:	3236302e 	andi	s6,s1,0x302e
800030f8:	2f432035 	sltiu	v1,k0,8245
800030fc:	2942534c 	slti	v0,t2,21324
80003100:	00000d0a 	0xd0a
80003104:	6f736552 	0x6f736552
80003108:	6974756c 	0x6974756c
8000310c:	69206e6f 	0x69206e6f
80003110:	36312073 	ori	s1,s1,0x2073
80003114:	74696220 	jalx	81a58880 <_gp+0x1a4d260>
80003118:	30282073 	andi	t0,at,0x2073
8000311c:	3730302e 	ori	s0,t9,0x302e
80003120:	2f432038 	sltiu	v1,k0,8248
80003124:	2942534c 	slti	v0,t2,21324
80003128:	00000d0a 	0xd0a
8000312c:	533e0d0a 	beql	t9,s8,80006558 <_end+0x2eb4>
80003130:	52207465 	beqzl	s1,800202c8 <_gp+0x14ca8>
80003134:	6c6f7365 	0x6c6f7365
80003138:	6f697475 	0x6f697475
8000313c:	654d206e 	0x654d206e
80003140:	0d0a756e 	jal	8429d5b8 <_gp+0x4291f98>
80003144:	00000000 	nop
80003148:	73736f50 	s32lddr	xr13,k1,876
8000314c:	656c6269 	0x656c6269
80003150:	73657220 	0x73657220
80003154:	74756c6f 	jalx	81d5b1bc <_gp+0x1d4fb9c>
80003158:	736e6f69 	0x736e6f69
8000315c:	65726120 	0x65726120
80003160:	000d0a3a 	0xd0a3a
80003164:	202e3109 	addi	t6,at,12553
80003168:	62203331 	0x62203331
8000316c:	20737469 	addi	s3,v1,29801
80003170:	302e3028 	andi	t6,at,0x3028
80003174:	20353236 	addi	s5,at,12854
80003178:	534c2f43 	beql	k0,t4,8000ee88 <_gp+0x3868>
8000317c:	0a3a2942 	j	88e8a508 <_gp+0x8e7eee8>
80003180:	0000000d 	break
80003184:	202e3209 	addi	t6,at,12809
80003188:	62203631 	0x62203631
8000318c:	20737469 	addi	s3,v1,29801
80003190:	302e3028 	andi	t6,at,0x3028
80003194:	20383730 	addi	t8,at,14128
80003198:	534c2f43 	beql	k0,t4,8000eea8 <_gp+0x3888>
8000319c:	0a3a2942 	j	88e8a508 <_gp+0x8e7eee8>
800031a0:	0000000d 	break
800031a4:	523e0d0a 	beql	s1,s8,800065d0 <_end+0x2f2c>
800031a8:	72757465 	s8sdi	xr1,s3,93,
800031ac:	676e696e 	0x676e696e
800031b0:	206f7420 	addi	t7,v1,29728
800031b4:	6e69614d 	0x6e69614d
800031b8:	6e654d20 	0x6e654d20
800031bc:	2e2e2e75 	sltiu	t6,s1,11893
800031c0:	00000d0a 	0xd0a
800031c4:	6e6f7257 	0x6e6f7257
800031c8:	706f2067 	0x706f2067
800031cc:	6e6f6974 	0x6e6f6974
800031d0:	000d0a21 	0xd0a21
800031d4:	00000054 	0x54
800031d8:	0000002e 	0x2e
800031dc:	0000000a 	movz	zero,zero,zero
800031e0:	00002d54 	0x2d54
800031e4:	68430d0a 	0x68430d0a
800031e8:	63617261 	0x63617261
800031ec:	73726574 	q16sll	xr5,xr9,xr9,xr12,13
800031f0:	746e6520 	jalx	81b99480 <_gp+0x1b8de60>
800031f4:	64657265 	0x64657265
800031f8:	73756d20 	0x73756d20
800031fc:	65622074 	0x65622074
80003200:	58454820 	0x58454820
80003204:	6c617620 	0x6c617620
80003208:	20736575 	addi	s3,v1,25973
8000320c:	74203028 	jalx	8080c0a0 <_gp+0x800a80>
80003210:	2039206f 	addi	t9,at,8303
80003214:	20646e61 	addi	a0,v1,28257
80003218:	20422041 	addi	v0,v0,8257
8000321c:	20442043 	addi	a0,v0,8259
80003220:	29462045 	slti	a2,t2,8261
80003224:	00000d0a 	0xd0a
80003228:	533e0d0a 	beql	t9,s8,80006654 <_end+0x2fb0>
8000322c:	54207465 	bnezl	at,800203c4 <_gp+0x14da4>
80003230:	68676948 	0x68676948
80003234:	6e654d20 	0x6e654d20
80003238:	000d0a75 	0xd0a75
8000323c:	6c500d0a 	0x6c500d0a
80003240:	65736165 	0x65736165
80003244:	746e6520 	jalx	81b99480 <_gp+0x1b8de60>
80003248:	61207265 	0x61207265
8000324c:	6c617620 	0x6c617620
80003250:	62206575 	0x62206575
80003254:	65777465 	0x65777465
80003258:	30206e65 	andi	zero,at,0x6e65
8000325c:	30303078 	andi	s0,at,0x3078
80003260:	6e612030 	0x6e612030
80003264:	78302064 	st.b	$w1,48(a0)
80003268:	43333030 	c0	0x1333030
8000326c:	00000000 	nop
80003270:	61560d0a 	0x61560d0a
80003274:	2065756c 	addi	a1,v1,30060
80003278:	20726f66 	addi	s2,v1,28518
8000327c:	67694854 	0x67694854
80003280:	756d2068 	jalx	85b481a0 <_gp+0x5b3cb80>
80003284:	62207473 	0x62207473
80003288:	6e692065 	0x6e692065
8000328c:	65687420 	0x65687420
80003290:	6e617220 	0x6e617220
80003294:	30206567 	andi	zero,at,0x6567
80003298:	30303078 	andi	s0,at,0x3078
8000329c:	6e612030 	0x6e612030
800032a0:	78302064 	st.b	$w1,48(a0)
800032a4:	43333030 	c0	0x1333030
800032a8:	00000d0a 	0xd0a
800032ac:	61656c50 	0x61656c50
800032b0:	65206573 	0x65206573
800032b4:	7265746e 	0x7265746e
800032b8:	76206120 	jalx	88818480 <_gp+0x880ce60>
800032bc:	64696c61 	0x64696c61
800032c0:	6c617620 	0x6c617620
800032c4:	203a6575 	addi	k0,at,25973
800032c8:	00007830 	tge	zero,zero,0x1e0
800032cc:	0d0a0d0a 	jal	84283428 <_gp+0x4277e08>
800032d0:	7465523e 	jalx	819548f8 <_gp+0x19492d8>
800032d4:	696e7275 	0x696e7275
800032d8:	7420676e 	jalx	80819db8 <_gp+0x80e798>
800032dc:	614d206f 	0x614d206f
800032e0:	4d206e69 	msub.d	$f25,$f9,$f13,$f0
800032e4:	2e756e65 	sltiu	s5,s3,28261
800032e8:	0d0a2e2e 	jal	8428b8b8 <_gp+0x4280298>
800032ec:	00000000 	nop
800032f0:	67694854 	0x67694854
800032f4:	65532068 	0x65532068
800032f8:	696f7074 	0x696f7074
800032fc:	0020746e 	0x20746e
80003300:	533e0d0a 	beql	t9,s8,8000672c <_end+0x3088>
80003304:	54207465 	bnezl	at,8002049c <_gp+0x14e7c>
80003308:	20776f4c 	addi	s7,v1,28492
8000330c:	756e654d 	jalx	85b99534 <_gp+0x5b8df14>
80003310:	00000d0a 	0xd0a
80003314:	6c500d0a 	0x6c500d0a
80003318:	65736165 	0x65736165
8000331c:	746e6520 	jalx	81b99480 <_gp+0x1b8de60>
80003320:	61207265 	0x61207265
80003324:	6c617620 	0x6c617620
80003328:	62206575 	0x62206575
8000332c:	65777465 	0x65777465
80003330:	30206e65 	andi	zero,at,0x6e65
80003334:	30303078 	andi	s0,at,0x3078
80003338:	6e612030 	0x6e612030
8000333c:	78302064 	st.b	$w1,48(a0)
80003340:	41303030 	0x41303030
80003344:	00000000 	nop
80003348:	61560d0a 	0x61560d0a
8000334c:	2065756c 	addi	a1,v1,30060
80003350:	20726f66 	addi	s2,v1,28518
80003354:	776f4c54 	jalx	8dbd3150 <_gp+0xdbc7b30>
80003358:	73756d20 	0x73756d20
8000335c:	65622074 	0x65622074
80003360:	206e6920 	addi	t6,v1,26912
80003364:	20656874 	addi	a1,v1,26740
80003368:	676e6172 	0x676e6172
8000336c:	78302065 	st.h	$w1,96(a0)
80003370:	30303030 	andi	s0,at,0x3030
80003374:	646e6120 	0x646e6120
80003378:	30783020 	andi	t8,v1,0x3020
8000337c:	0a413030 	j	8904c0c0 <_gp+0x9040aa0>
80003380:	0000000d 	break
80003384:	776f4c54 	jalx	8dbd3150 <_gp+0xdbc7b30>
80003388:	74655320 	jalx	81954c80 <_gp+0x1949660>
8000338c:	6e696f70 	0x6e696f70
80003390:	00002074 	teq	zero,zero,0x81
80003394:	533e0d0a 	beql	t9,s8,800067c0 <_end+0x311c>
80003398:	54207465 	bnezl	at,80020530 <_gp+0x14f10>
8000339c:	74697243 	jalx	81a5c90c <_gp+0x1a512ec>
800033a0:	6e654d20 	0x6e654d20
800033a4:	000d0a75 	0xd0a75
800033a8:	6c500d0a 	0x6c500d0a
800033ac:	65736165 	0x65736165
800033b0:	746e6520 	jalx	81b99480 <_gp+0x1b8de60>
800033b4:	61207265 	0x61207265
800033b8:	6c617620 	0x6c617620
800033bc:	62206575 	0x62206575
800033c0:	65777465 	0x65777465
800033c4:	30206e65 	andi	zero,at,0x6e65
800033c8:	30303078 	andi	s0,at,0x3078
800033cc:	6e612030 	0x6e612030
800033d0:	78302064 	st.b	$w1,48(a0)
800033d4:	34363030 	ori	s6,at,0x3030
800033d8:	00000000 	nop
800033dc:	61560d0a 	0x61560d0a
800033e0:	2065756c 	addi	a1,v1,30060
800033e4:	20726f66 	addi	s2,v1,28518
800033e8:	69724354 	0x69724354
800033ec:	756d2074 	jalx	85b481d0 <_gp+0x5b3cbb0>
800033f0:	62207473 	0x62207473
800033f4:	6e692065 	0x6e692065
800033f8:	65687420 	0x65687420
800033fc:	6e617220 	0x6e617220
80003400:	30206567 	andi	zero,at,0x6567
80003404:	30303078 	andi	s0,at,0x3078
80003408:	6e612030 	0x6e612030
8000340c:	78302064 	st.b	$w1,48(a0)
80003410:	34363030 	ori	s6,at,0x3030
80003414:	00000d0a 	0xd0a
80003418:	69724354 	0x69724354
8000341c:	65532074 	0x65532074
80003420:	696f7074 	0x696f7074
80003424:	0020746e 	0x20746e
80003428:	533e0d0a 	beql	t9,s8,80006854 <_end+0x31b0>
8000342c:	54207465 	bnezl	at,800205c4 <_gp+0x14fa4>
80003430:	74737948 	jalx	81cde520 <_gp+0x1cd2f00>
80003434:	6e654d20 	0x6e654d20
80003438:	000d0a75 	0xd0a75
8000343c:	65746e45 	0x65746e45
80003440:	20612072 	addi	at,v1,8306
80003444:	756c6176 	jalx	85b185d8 <_gp+0x5b0cfb8>
80003448:	72662065 	s8sdi	xr1,s3,-120,ptn1
8000344c:	30206d6f 	andi	zero,at,0x6d6f
80003450:	30303078 	andi	s0,at,0x3078
80003454:	6f742030 	0x6f742030
80003458:	30783020 	andi	t8,v1,0x3020
8000345c:	3a463030 	xori	a2,s2,0x3030
80003460:	00783020 	add	a2,v1,t8
80003464:	61560d0a 	0x61560d0a
80003468:	2065756c 	addi	a1,v1,30060
8000346c:	20726f66 	addi	s2,v1,28518
80003470:	73794854 	s32ldir	xr1,k1,-1720
80003474:	756d2074 	jalx	85b481d0 <_gp+0x5b3cbb0>
80003478:	62207473 	0x62207473
8000347c:	6e692065 	0x6e692065
80003480:	65687420 	0x65687420
80003484:	6e617220 	0x6e617220
80003488:	30206567 	andi	zero,at,0x6567
8000348c:	74204320 	jalx	80810c80 <_gp+0x805660>
80003490:	3531206f 	ori	s1,t1,0x206f
80003494:	0d0a4320 	jal	84290c80 <_gp+0x4285660>
80003498:	00000000 	nop
8000349c:	73794854 	s32ldir	xr1,k1,-1720
800034a0:	65532074 	0x65532074
800034a4:	696f7074 	0x696f7074
800034a8:	5420746e 	bnezl	at,80020664 <_gp+0x15044>
800034ac:	00203d20 	0x203d20
800034b0:	463e0d0a 	c1	0x3e0d0a
800034b4:	746c7561 	jalx	81b1d584 <_gp+0x1b11f64>
800034b8:	65755120 	0x65755120
800034bc:	4d206575 	0x4d206575
800034c0:	0a756e65 	j	89d5b994 <_gp+0x9d50374>
800034c4:	0000000d 	break
800034c8:	626d754e 	0x626d754e
800034cc:	6f207265 	0x6f207265
800034d0:	61662066 	0x61662066
800034d4:	20746c75 	addi	s4,v1,27765
800034d8:	75657571 	jalx	8595d5c4 <_gp+0x5951fa4>
800034dc:	0a3a7365 	j	88e9cd94 <_gp+0x8e91774>
800034e0:	0000000d 	break
800034e4:	202e3109 	addi	t6,at,12553
800034e8:	61662031 	0x61662031
800034ec:	0a746c75 	j	89d1b1d4 <_gp+0x9d0fbb4>
800034f0:	0000000d 	break
800034f4:	202e3209 	addi	t6,at,12809
800034f8:	61662032 	0x61662032
800034fc:	73746c75 	q16slr	xr1,xr11,xr1,xr13,13
80003500:	00000d0a 	0xd0a
80003504:	202e3309 	addi	t6,at,13065
80003508:	61662033 	0x61662033
8000350c:	73746c75 	q16slr	xr1,xr11,xr1,xr13,13
80003510:	00000d0a 	0xd0a
80003514:	202e3409 	addi	t6,at,13321
80003518:	61662034 	0x61662034
8000351c:	73746c75 	q16slr	xr1,xr11,xr1,xr13,13
80003520:	00000d0a 	0xd0a
80003524:	61662031 	0x61662031
80003528:	20746c75 	addi	s4,v1,27765
8000352c:	75657571 	jalx	8595d5c4 <_gp+0x5951fa4>
80003530:	000d0a65 	0xd0a65
80003534:	61662032 	0x61662032
80003538:	20746c75 	addi	s4,v1,27765
8000353c:	75657571 	jalx	8595d5c4 <_gp+0x5951fa4>
80003540:	0d0a7365 	jal	8429cd94 <_gp+0x4291774>
80003544:	00000000 	nop
80003548:	61662033 	0x61662033
8000354c:	20746c75 	addi	s4,v1,27765
80003550:	75657571 	jalx	8595d5c4 <_gp+0x5951fa4>
80003554:	0d0a7365 	jal	8429cd94 <_gp+0x4291774>
80003558:	00000000 	nop
8000355c:	61662034 	0x61662034
80003560:	20746c75 	addi	s4,v1,27765
80003564:	75657571 	jalx	8595d5c4 <_gp+0x5951fa4>
80003568:	0d0a7365 	jal	8429cd94 <_gp+0x4291774>
8000356c:	00000000 	nop
80003570:	72656c41 	0x72656c41
80003574:	6f4d2074 	0x6f4d2074
80003578:	203a6564 	addi	k0,at,25956
8000357c:	706d6f43 	0x706d6f43
80003580:	74617261 	jalx	8185c984 <_gp+0x1851364>
80003584:	0d0a726f 	jal	8429c9bc <_gp+0x429139c>
80003588:	00000000 	nop
8000358c:	72656c41 	0x72656c41
80003590:	6f4d2074 	0x6f4d2074
80003594:	203a6564 	addi	k0,at,25956
80003598:	65746e49 	0x65746e49
8000359c:	70757272 	0x70757272
800035a0:	000d0a74 	teq	zero,t5,0x29
800035a4:	70205443 	0x70205443
800035a8:	69206e69 	0x69206e69
800035ac:	63412073 	0x63412073
800035b0:	65766974 	0x65766974
800035b4:	67694820 	0x67694820
800035b8:	000d0a68 	0xd0a68
800035bc:	70205443 	0x70205443
800035c0:	69206e69 	0x69206e69
800035c4:	63412073 	0x63412073
800035c8:	65766974 	0x65766974
800035cc:	776f4c20 	jalx	8dbd3080 <_gp+0xdbc7a60>
800035d0:	00000d0a 	0xd0a
800035d4:	20544e49 	addi	s4,v0,20041
800035d8:	206e6970 	addi	t6,v1,26992
800035dc:	41207369 	0x41207369
800035e0:	76697463 	jalx	89a5d18c <_gp+0x9a51b6c>
800035e4:	69482065 	0x69482065
800035e8:	0d0a6867 	jal	8429a19c <_gp+0x428eb7c>
800035ec:	00000000 	nop
800035f0:	20544e49 	addi	s4,v0,20041
800035f4:	206e6970 	addi	t6,v1,26992
800035f8:	41207369 	0x41207369
800035fc:	76697463 	jalx	89a5d18c <_gp+0x9a51b6c>
80003600:	6f4c2065 	0x6f4c2065
80003604:	000d0a77 	0xd0a77
80003608:	41200d0a 	0x41200d0a
8000360c:	34375444 	ori	s7,at,0x5444
80003610:	53203032 	beqzl	t9,8000f6dc <_gp+0x40bc>
80003614:	69747465 	0x69747465
80003618:	2073676e 	addi	s3,v1,26478
8000361c:	00000d0a 	0xd0a
