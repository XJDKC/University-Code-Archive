NAME SHOW_MENU,EXIT
PUBLIC SHOW_MENU,EXIT
EXTERN SHOW_ALL:NEAR
EXTERN SHOW_ICONS:NEAR
EXTERN PRINT_NUM:NEAR
EXTERN CAL_PROFIT:NEAR
EXTERN SORT_PROFIT:NEAR
EXTERN CLEAR_SCREEN:NEAR
EXTERN S1:BYTE,GA1:BYTE,S2:BYTE,GB1:BYTE
EXTERN MEN_ATTR:BYTE,ATTR_OFF:BYTE
.386
STACK SEGMENT USE16 STACK 'STACK'
	DB 200 DUP(0)
STACK ENDS
DATA SEGMENT USE16 PUBLIC 'D'
	N EQU	30	
	OUT_SHOP	EQU 1H
	OUT_NAME	EQU 2H
	OUT_INPRI	EQU 4H
	OUT_OUTPRI	EQU 8H
	OUT_INNUM	EQU 10H
	OUT_OUTNUM	EQU 20H
	OUT_RANK	EQU 40H	;既表示利润率信息 又表示rank信息
	FAIL_INQUIRED_GOODS_INFORM DB 'Wrong inquired goods input! Please try again ', 0AH, 0DH, '$'
	FAIL_MODIFIED_GOODS_INFORM DB 'Wrong goods input! Please try again', 0AH, 0DH, '$'

	INQ_INFORM DB 'Please enter the inquired goods name: $'
	MOD_SHOP_INFORM	DB 'Please enter the shop name: $'
	MOD_GOOD_INFORM DB 'Please enter the modified goods name: $'
	
	SHOW_MENU_TITLE DB 'SHOW MENU$'
	SHOW_MENU_1 DB '1.INQUIRE GOODS INFO$'
	SHOW_MENU_2 DB '2.MODIFY  GOODS INFO$'
	SHOW_MENU_3 DB '3.CALCUL THE  PROFIT$'
	SHOU_MENU_4 DB '4.RANK CALCUL PROFIT$'
	SHOW_MENU_5 DB '5.SHOW ALL GOOD INFO$'
	SHOW_MENU_6 DB '6.EXIT              $'

	SHOW_MENU_CHOOSE DB 'Please enter the choice: $'

	INQ_GA  DB 80,?,80 DUP(0)
	MOD_SHOP	DB 80,?,80 DUP(0)
	MOD_GA  DB 80,?,80 DUP(0)
	MOD_DATA  DB 80,?,80 DUP(0)
	CHOICE	DB 80,?,80 DUP(0)
DATA ENDS 
CODE SEGMENT USE16 PUBLIC 'C'
	ASSUME CS:CODE,DS:DATA,SS:STACK

IN_STRING MACRO A,B					;宏定义 输入字符串 A表示输入时的提示信息 B表示输入字符串的位置偏移量
	LEA DX,A						;将提示信息字符串偏移地址存入DX
	MOV AH,9						;将代表显示字符串的9号调用存入AH
	INT 21H							;执行中断
	LEA DX,B						;将存放输入信息的字符串偏移地址存入DX
	MOV AH,10						;将代表输入字符串的10号调用存入AH
	INT 21H							;执行中断
	MOV DL,10						;将换行符存入DL
	MOV AH,2						;将代表输出字符的2号调用存入AH
	INT 21H							;执行中断
ENDM								;结束宏定义

OUT_INFO MACRO A,B					;宏定义 输出信息 A表示输出信息(字符串偏移地址 或者 字符) B表示输出类型
	MOV	DX,A						;将待输出的 字符串偏移地址 或 字符 存入DX
	MOV AH,B						;将输出类型存入AH 可能为9or2 分别表示输出字符串 和 字符 
	INT 21H							;调用中断
ENDM								;结束宏定义

SHOW_INFO MACRO A,B,C
	LOCAL PRE_LPP4,LOOPP4,OUT_ATTR,OUT_NEXT,LP,P_NUM,NEXTP4,OUT_10,FINISH
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	PUSH DI
	PUSH BP
	MOV CX,A
	MOV SI,B
	MOV DI,C
	ADD CX,48
	
	SHR DI,1
	JNC	PRE_LPP4
	OUT_INFO <OFFSET MEN_ATTR>,9
	OUT_INFO CX,2
	MOV CH,1
PRE_LPP4:
	MOV BX,1
LOOPP4:
	SHR DI,1
	JNC NEXTP4
	CMP CH,0
	JE OUT_ATTR
	OUT_INFO 10,2
OUT_ATTR:
	INC CH	
	MOV BP,BX
	CMP BX,6
	JNE OUT_NEXT
	CMP CL,'2'
	JNE OUT_NEXT
	INC BP
OUT_NEXT:
	IMUL BP,30
	ADD BP,OFFSET MEN_ATTR
	OUT_INFO BP,9
	MOVZX BP,BYTE PTR [BX+ATTR_OFF]
	ADD BP,SI
	CMP BX,1
	JNE P_NUM
	MOV DH,10
LP:	CMP DH,0
	JE NEXTP4
	MOV DL,DS:[BP]
	MOV AH,2
	INT 21H
	INC BP
	DEC DH
	JMP LP
P_NUM:
	PUSH DS:[BP]
	CALL PRINT_NUM
	CMP BX,6
	JNE NEXTP4
	CMP CL,'1'
	JNE NEXTP4
	OUT_INFO '%',2
NEXTP4:
	INC BX
	CMP BX,7
	JB	LOOPP4
	
OUT_10:
	CMP CH,1
	JE	FINISH
	OUT_INFO 10,2
	
FINISH:	
	POP BP
	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
ENDM	

SHOW_MENU:
	CALL CLEAR_SCREEN

	CALL SHOW_ICONS
	MOV AH,1
	INT 21H
	
	MOV DH, 7
	MOV DL, 30
	MOV BH, 0
	MOV AH, 02H
	INT 10H

	LEA DX, SHOW_MENU_TITLE
	MOV AH, 9
	INT 21H

	MOV CL, 7
	LEA SI, SHOW_MENU_1
SHOW_MENU_CIR:
	INC CL
	MOV DH, CL
	MOV DL, 25
	MOV BH, 0
	MOV AH, 02H
	INT 10H
	MOV DX, SI
	MOV AH, 9
	INT 21H
	ADD SI, 21
	CMP CL, 13
JNZ SHOW_MENU_CIR

	ADD CL, 2 					;行数
	MOV DH, CL
	MOV DL, 23
	MOV BH, 0
	MOV AH, 02H
	INT 10H
	MOV DX, SI
	MOV AH, 9
	INT 21H

	LEA DX, CHOICE
	MOV AH, 10
	INT 21H
	
	CALL CLEAR_SCREEN


	CMP BYTE PTR[CHOICE + 2], '1'
	JZ SHOW_1
	CMP BYTE PTR[CHOICE + 2], '2'
	JZ SHOW_2
	CMP BYTE PTR[CHOICE + 2], '3'
	JZ SHOW_3
	CMP BYTE PTR[CHOICE + 2], '4'
	JZ SHOW_4
	CMP BYTE PTR[CHOICE + 2], '5'
	JZ SHOW_5
	CMP BYTE PTR[CHOICE + 2], '6'
	JZ SHOW_6

SHOW_1:
	CALL INQ_INFO
	MOV AH, 1
	INT 21H
	JMP SHOW_MENU

SHOW_2:
	CALL MOD_INFO
	JMP SHOW_MENU
	
SHOW_3:
	CALL CAL_PROFIT
	JMP SHOW_MENU
	
SHOW_4:
	CALL SORT_PROFIT
	JMP SHOW_MENU
	
SHOW_5:
	CALL SHOW_ALL
	JMP SHOW_MENU
	
SHOW_6:
	CALL EXIT
	JMP SHOW_MENU
		

EXIT PROC
	MOV AH, 4CH
	INT 21H
EXIT ENDP


INQ_INFO PROC					;查询商品信息
F_3_1:
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	PUSH DI
	IN_STRING INQ_INFORM,INQ_GA	;输入查询商品信息
	LEA BX, INQ_GA + 2			;商品名称偏移地址
	CMP BYTE PTR[BX], 0DH
	JE F_3_1_BACK				;输入回车，回到功能三1
	LEA AX, GA1					;商品1的偏移地址
	MOV CL, N
F_3_1_1:						;循环网店中所有商品
	MOV DI, AX					;已有商品的偏移地址
	MOV SI, BX					;输入商品的偏移地址
	F_3_1_2:					;比较两个商品字节
		MOV CH, BYTE PTR[SI]
		CMP CH, BYTE PTR[DI]
		JNE F_3_1_3
		INC SI
		INC DI
		CMP BYTE PTR[DI], 0
		JNZ F_3_1_2
		CMP BYTE PTR[SI], 0DH
		JNZ F_3_1_2		
	JMP JUDGE_1					;成功找到匹配目标
	F_3_1_3:					;继续循环，比较下一件商品
	ADD AX, 20
	DEC CL
JNZ F_3_1_1
JMP FAIL_INQUIRED_GOODS 					;未找到，提示重新输入商品
JUDGE_1:
								;AX为当前商品的偏移地址
	;----------------------------输出商品信息

	SHOW_INFO 1, AX, OUT_SHOP+OUT_NAME+OUT_INPRI+OUT_INNUM+OUT_OUTNUM
	ADD AX,OFFSET GB1
	SUB AX,OFFSET GA1
	SHOW_INFO 2, AX, OUT_SHOP+OUT_NAME+OUT_INPRI+OUT_INNUM+OUT_OUTNUM


F_3_1_BACK:
	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
	RET
INQ_INFO ENDP

MOD_INFO PROC					;修改商品信息
F_3_2:
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	PUSH SI
	PUSH DI
	IN_STRING MOD_SHOP_INFORM, MOD_SHOP 	;输入修改商品的商店信息
	IN_STRING MOD_GOOD_INFORM, MOD_GA		;输入修改商品信息
	LEA BX, MOD_GA + 2			;商品名称偏移地址
	CMP BYTE PTR[BX], 0DH
	JE F_3_2_BACK				;输入回车，回到功能三1
	MOV CL, N

	LEA AX, GA1					;待修改商品的商店偏移地址
	CMP BYTE PTR[MOD_SHOP + 2], '1'
	JZ F_3_2_1
	ADD AX,OFFSET GB1
	SUB AX,OFFSET GA1

F_3_2_1:						;循环网店中所有商品
	MOV DI, AX					;已有商品的偏移地址
	MOV SI, BX					;输入商品的偏移地址
	F_3_2_2:					;比较两个商品字节
		MOV CH, BYTE PTR[SI]
		CMP CH, BYTE PTR[DI]
		JNE F_3_2_3
		INC SI
		INC DI
		CMP BYTE PTR[DI], 0
		JNZ F_3_2_2
		CMP BYTE PTR[SI], 0DH
		JNZ F_3_2_2		
	JMP JUDGE_2					;成功找到匹配目标
	F_3_2_3:					;继续循环，比较下一件商品
	ADD AX, 20
	DEC CL
JNZ F_3_2_1
JMP FAIL_MODIFIED_GOODS 					;未找到，提示重新输入商品
JUDGE_2:
								;AX为当前商品的偏移地址
	;----------------------------输出商品信息

MOV BX, OUT_INPRI				;BX--输出哪项数据
MOV DI, 0
PUSH AX
F_3_2_4:
	POP AX
	SHOW_INFO 1, AX, BX
	PUSH AX
	MOV DL, '>'
	MOV AH, 2
	INT 21H
	LEA DX, MOD_DATA
	MOV AH, 10
	INT 21H

	LEA CX, MOD_DATA + 2
	PUSH BX
	MOV BX, CX
	CMP BYTE PTR[BX], 0DH		;输入回车
	POP BX
	JZ F_3_2_6
	
	MOV SI, CX

F_3_2_5:
	CMP BYTE PTR[SI], '0'
	JB FAIL_ILLEGAL_INPUT
	CMP BYTE PTR[SI], '9'
	JA FAIL_ILLEGAL_INPUT
	INC SI
	CMP BYTE PTR[SI], 0DH
JNZ F_3_2_5

	LEA SI, MOD_DATA + 2
	MOV DX, 0
F_3_2_IN:
	MOV CL, BYTE PTR[SI]
	SUB CL, 30H
	MOV CH, 0
	IMUL DX, 10
	ADD DX, CX
	INC SI
	CMP BYTE PTR[SI], 0DH
JNZ F_3_2_IN
	

	POP AX
	PUSH BX
	MOV BX, AX

	MOV WORD PTR[BX + DI + 10], DX
	POP BX
	PUSH AX
F_3_2_6:
	MOV DL, 0AH
	MOV AH, 2
	INT 21H
	MOV DL, 0DH
	MOV AH, 2
	INT 21H
	ADD DI, 2
	SAL BX, 1
	CMP BX, 20H
JNZ F_3_2_4
POP AX

F_3_2_BACK:
	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
	RET
MOD_INFO ENDP

FAIL_ILLEGAL_INPUT:
	MOV DL, 0AH
	MOV AH, 2
	INT 21H
	MOV DL, 0DH
	MOV AH, 2
	INT 21H
JMP F_3_2_4

FAIL_MODIFIED_GOODS:
	LEA DX, FAIL_MODIFIED_GOODS_INFORM
	MOV AH, 9
	INT 21H
	MOV AH, 1
	INT 21H
	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
JMP F_3_2


FAIL_INQUIRED_GOODS:
	LEA DX, FAIL_INQUIRED_GOODS_INFORM
	MOV AH, 9
	INT 21H
	MOV AH, 1
	INT 21H
	POP DI
	POP SI
	POP DX
	POP CX
	POP BX
	POP AX
JMP F_3_1
CODE ENDS
	END